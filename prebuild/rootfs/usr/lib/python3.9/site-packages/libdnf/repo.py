# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _repo
else:
    import _repo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _repo.delete_SwigPyIterator

    def value(self):
        return _repo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _repo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _repo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _repo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _repo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _repo.SwigPyIterator_copy(self)

    def next(self):
        return _repo.SwigPyIterator_next(self)

    def __next__(self):
        return _repo.SwigPyIterator___next__(self)

    def previous(self):
        return _repo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _repo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _repo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _repo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _repo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _repo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _repo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _repo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _repo:
_repo.SwigPyIterator_swigregister(SwigPyIterator)

import libdnf.common_types
import libdnf.conf
class VectorPPackageTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _repo.VectorPPackageTarget_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _repo.VectorPPackageTarget___nonzero__(self)

    def __bool__(self):
        return _repo.VectorPPackageTarget___bool__(self)

    def __len__(self):
        return _repo.VectorPPackageTarget___len__(self)

    def __getslice__(self, i, j):
        return _repo.VectorPPackageTarget___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _repo.VectorPPackageTarget___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _repo.VectorPPackageTarget___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _repo.VectorPPackageTarget___delitem__(self, *args)

    def __getitem__(self, *args):
        return _repo.VectorPPackageTarget___getitem__(self, *args)

    def __setitem__(self, *args):
        return _repo.VectorPPackageTarget___setitem__(self, *args)

    def pop(self):
        return _repo.VectorPPackageTarget_pop(self)

    def append(self, x):
        return _repo.VectorPPackageTarget_append(self, x)

    def empty(self):
        return _repo.VectorPPackageTarget_empty(self)

    def size(self):
        return _repo.VectorPPackageTarget_size(self)

    def swap(self, v):
        return _repo.VectorPPackageTarget_swap(self, v)

    def begin(self):
        return _repo.VectorPPackageTarget_begin(self)

    def end(self):
        return _repo.VectorPPackageTarget_end(self)

    def rbegin(self):
        return _repo.VectorPPackageTarget_rbegin(self)

    def rend(self):
        return _repo.VectorPPackageTarget_rend(self)

    def clear(self):
        return _repo.VectorPPackageTarget_clear(self)

    def get_allocator(self):
        return _repo.VectorPPackageTarget_get_allocator(self)

    def pop_back(self):
        return _repo.VectorPPackageTarget_pop_back(self)

    def erase(self, *args):
        return _repo.VectorPPackageTarget_erase(self, *args)

    def __init__(self, *args):
        _repo.VectorPPackageTarget_swiginit(self, _repo.new_VectorPPackageTarget(*args))

    def push_back(self, x):
        return _repo.VectorPPackageTarget_push_back(self, x)

    def front(self):
        return _repo.VectorPPackageTarget_front(self)

    def back(self):
        return _repo.VectorPPackageTarget_back(self)

    def assign(self, n, x):
        return _repo.VectorPPackageTarget_assign(self, n, x)

    def resize(self, *args):
        return _repo.VectorPPackageTarget_resize(self, *args)

    def insert(self, *args):
        return _repo.VectorPPackageTarget_insert(self, *args)

    def reserve(self, n):
        return _repo.VectorPPackageTarget_reserve(self, n)

    def capacity(self):
        return _repo.VectorPPackageTarget_capacity(self)
    __swig_destroy__ = _repo.delete_VectorPPackageTarget

# Register VectorPPackageTarget in _repo:
_repo.VectorPPackageTarget_swigregister(VectorPPackageTarget)

class LrException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _repo.LrException_swiginit(self, _repo.new_LrException(*args))

    def getCode(self):
        return _repo.LrException_getCode(self)
    __swig_destroy__ = _repo.delete_LrException

# Register LrException in _repo:
_repo.LrException_swigregister(LrException)

class RepoCB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FastestMirrorStage_INIT = _repo.RepoCB_FastestMirrorStage_INIT
    FastestMirrorStage_CACHELOADING = _repo.RepoCB_FastestMirrorStage_CACHELOADING
    FastestMirrorStage_CACHELOADINGSTATUS = _repo.RepoCB_FastestMirrorStage_CACHELOADINGSTATUS
    FastestMirrorStage_DETECTION = _repo.RepoCB_FastestMirrorStage_DETECTION
    FastestMirrorStage_FINISHING = _repo.RepoCB_FastestMirrorStage_FINISHING
    FastestMirrorStage_STATUS = _repo.RepoCB_FastestMirrorStage_STATUS

    def start(self, what):
        return _repo.RepoCB_start(self, what)

    def end(self):
        return _repo.RepoCB_end(self)

    def progress(self, totalToDownload, downloaded):
        return _repo.RepoCB_progress(self, totalToDownload, downloaded)

    def fastestMirror(self, stage, msg):
        return _repo.RepoCB_fastestMirror(self, stage, msg)

    def handleMirrorFailure(self, msg, url, metadata):
        return _repo.RepoCB_handleMirrorFailure(self, msg, url, metadata)

    def repokeyImport(self, id, userId, fingerprint, url, timestamp):
        return _repo.RepoCB_repokeyImport(self, id, userId, fingerprint, url, timestamp)
    __swig_destroy__ = _repo.delete_RepoCB

    def __init__(self):
        if self.__class__ == RepoCB:
            _self = None
        else:
            _self = self
        _repo.RepoCB_swiginit(self, _repo.new_RepoCB(_self, ))
    def __disown__(self):
        self.this.disown()
        _repo.disown_RepoCB(self)
        return weakref.proxy(self)

# Register RepoCB in _repo:
_repo.RepoCB_swigregister(RepoCB)

class Repo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_AVAILABLE = _repo.Repo_Type_AVAILABLE
    Type_SYSTEM = _repo.Repo_Type_SYSTEM
    Type_COMMANDLINE = _repo.Repo_Type_COMMANDLINE
    SyncStrategy_LAZY = _repo.Repo_SyncStrategy_LAZY
    SyncStrategy_ONLY_CACHE = _repo.Repo_SyncStrategy_ONLY_CACHE
    SyncStrategy_TRY_CACHE = _repo.Repo_SyncStrategy_TRY_CACHE

    @staticmethod
    def verifyId(id):
        return _repo.Repo_verifyId(id)

    def verify(self):
        return _repo.Repo_verify(self)

    def getConfig(self):
        return _repo.Repo_getConfig(self)

    def getId(self):
        return _repo.Repo_getId(self)

    def enable(self):
        return _repo.Repo_enable(self)

    def disable(self):
        return _repo.Repo_disable(self)

    def isEnabled(self):
        return _repo.Repo_isEnabled(self)

    def isLocal(self):
        return _repo.Repo_isLocal(self)

    def getLocalBaseurl(self):
        return _repo.Repo_getLocalBaseurl(self)

    def load(self):
        return _repo.Repo_load(self)

    def loadCache(self, throwExcept, ignoreMissing=False):
        return _repo.Repo_loadCache(self, throwExcept, ignoreMissing)

    def downloadMetadata(self, destdir):
        return _repo.Repo_downloadMetadata(self, destdir)

    def getUseIncludes(self):
        return _repo.Repo_getUseIncludes(self)

    def setUseIncludes(self, enabled):
        return _repo.Repo_setUseIncludes(self, enabled)

    def getLoadMetadataOther(self):
        return _repo.Repo_getLoadMetadataOther(self)

    def setLoadMetadataOther(self, value):
        return _repo.Repo_setLoadMetadataOther(self, value)

    def getCost(self):
        return _repo.Repo_getCost(self)

    def getPriority(self):
        return _repo.Repo_getPriority(self)

    def getCompsFn(self):
        return _repo.Repo_getCompsFn(self)

    def getModulesFn(self):
        return _repo.Repo_getModulesFn(self)

    def getRevision(self):
        return _repo.Repo_getRevision(self)

    def getAge(self):
        return _repo.Repo_getAge(self)

    def addMetadataTypeToDownload(self, metadataType):
        return _repo.Repo_addMetadataTypeToDownload(self, metadataType)

    def removeMetadataTypeFromDownload(self, metadataType):
        return _repo.Repo_removeMetadataTypeFromDownload(self, metadataType)

    def getMetadataPath(self, metadataType):
        return _repo.Repo_getMetadataPath(self, metadataType)

    def getMetadataContent(self, metadataType):
        return _repo.Repo_getMetadataContent(self, metadataType)

    def expire(self):
        return _repo.Repo_expire(self)

    def isExpired(self):
        return _repo.Repo_isExpired(self)

    def getExpiresIn(self):
        return _repo.Repo_getExpiresIn(self)

    def fresh(self):
        return _repo.Repo_fresh(self)

    def setMaxMirrorTries(self, maxMirrorTries):
        return _repo.Repo_setMaxMirrorTries(self, maxMirrorTries)

    def getTimestamp(self):
        return _repo.Repo_getTimestamp(self)

    def getMaxTimestamp(self):
        return _repo.Repo_getMaxTimestamp(self)

    def setPreserveRemoteTime(self, preserveRemoteTime):
        return _repo.Repo_setPreserveRemoteTime(self, preserveRemoteTime)

    def getPreserveRemoteTime(self):
        return _repo.Repo_getPreserveRemoteTime(self)

    def getContentTags(self):
        return _repo.Repo_getContentTags(self)

    def getDistroTags(self):
        return _repo.Repo_getDistroTags(self)

    def getMetadataLocations(self):
        return _repo.Repo_getMetadataLocations(self)

    def getCachedir(self):
        return _repo.Repo_getCachedir(self)

    def setRepoFilePath(self, path):
        return _repo.Repo_setRepoFilePath(self, path)

    def getRepoFilePath(self):
        return _repo.Repo_getRepoFilePath(self)

    def setSyncStrategy(self, strategy):
        return _repo.Repo_setSyncStrategy(self, strategy)

    def getSyncStrategy(self):
        return _repo.Repo_getSyncStrategy(self)

    def downloadUrl(self, url, fd):
        return _repo.Repo_downloadUrl(self, url, fd)

    def getMirrors(self):
        return _repo.Repo_getMirrors(self)

    def setSubstitutions(self, substitutions):
        return _repo.Repo_setSubstitutions(self, substitutions)
    __swig_destroy__ = _repo.delete_Repo

    def __init__(self, id, config):
        _repo.Repo_swiginit(self, _repo.new_Repo(id, config))

    def setCallbacks(self, callbacks):
        return _repo.Repo_setCallbacks(self, callbacks)

    def setHttpHeaders(self, headers):
        return _repo.Repo_setHttpHeaders(self, headers)

    def getHttpHeaders(self):
        return _repo.Repo_getHttpHeaders(self)

# Register Repo in _repo:
_repo.Repo_swigregister(Repo)

def Repo_verifyId(id):
    return _repo.Repo_verifyId(id)

class Downloader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def downloadURL(cfg, url, fd):
        return _repo.Downloader_downloadURL(cfg, url, fd)

    def __init__(self):
        _repo.Downloader_swiginit(self, _repo.new_Downloader())
    __swig_destroy__ = _repo.delete_Downloader

# Register Downloader in _repo:
_repo.Downloader_swigregister(Downloader)

def Downloader_downloadURL(cfg, url, fd):
    return _repo.Downloader_downloadURL(cfg, url, fd)

class PackageTargetCB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TransferStatus_SUCCESSFUL = _repo.PackageTargetCB_TransferStatus_SUCCESSFUL
    TransferStatus_ALREADYEXISTS = _repo.PackageTargetCB_TransferStatus_ALREADYEXISTS
    TransferStatus_ERROR = _repo.PackageTargetCB_TransferStatus_ERROR

    def end(self, status, msg):
        return _repo.PackageTargetCB_end(self, status, msg)

    def progress(self, totalToDownload, downloaded):
        return _repo.PackageTargetCB_progress(self, totalToDownload, downloaded)

    def mirrorFailure(self, msg, url):
        return _repo.PackageTargetCB_mirrorFailure(self, msg, url)
    __swig_destroy__ = _repo.delete_PackageTargetCB

    def __init__(self):
        if self.__class__ == PackageTargetCB:
            _self = None
        else:
            _self = self
        _repo.PackageTargetCB_swiginit(self, _repo.new_PackageTargetCB(_self, ))
    def __disown__(self):
        self.this.disown()
        _repo.disown_PackageTargetCB(self)
        return weakref.proxy(self)

# Register PackageTargetCB in _repo:
_repo.PackageTargetCB_swigregister(PackageTargetCB)

class PackageTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChecksumType_UNKNOWN = _repo.PackageTarget_ChecksumType_UNKNOWN
    ChecksumType_MD5 = _repo.PackageTarget_ChecksumType_MD5
    ChecksumType_SHA1 = _repo.PackageTarget_ChecksumType_SHA1
    ChecksumType_SHA224 = _repo.PackageTarget_ChecksumType_SHA224
    ChecksumType_SHA256 = _repo.PackageTarget_ChecksumType_SHA256
    ChecksumType_SHA384 = _repo.PackageTarget_ChecksumType_SHA384
    ChecksumType_SHA512 = _repo.PackageTarget_ChecksumType_SHA512

    @staticmethod
    def checksumType(name):
        return _repo.PackageTarget_checksumType(name)

    @staticmethod
    def downloadPackages(targets, failFast):
        return _repo.PackageTarget_downloadPackages(targets, failFast)
    __swig_destroy__ = _repo.delete_PackageTarget

    def getCallbacks(self):
        return _repo.PackageTarget_getCallbacks(self)

    def getErr(self):
        return _repo.PackageTarget_getErr(self)

    def __init__(self, *args):
        _repo.PackageTarget_swiginit(self, _repo.new_PackageTarget(*args))

# Register PackageTarget in _repo:
_repo.PackageTarget_swigregister(PackageTarget)

def PackageTarget_checksumType(name):
    return _repo.PackageTarget_checksumType(name)

def PackageTarget_downloadPackages(targets, failFast):
    return _repo.PackageTarget_downloadPackages(targets, failFast)

class LibrepoLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def addHandler(filePath, debug=False):
        return _repo.LibrepoLog_addHandler(filePath, debug)

    @staticmethod
    def removeHandler(uid):
        return _repo.LibrepoLog_removeHandler(uid)

    @staticmethod
    def removeAllHandlers():
        return _repo.LibrepoLog_removeAllHandlers()

    def __init__(self):
        _repo.LibrepoLog_swiginit(self, _repo.new_LibrepoLog())
    __swig_destroy__ = _repo.delete_LibrepoLog

# Register LibrepoLog in _repo:
_repo.LibrepoLog_swigregister(LibrepoLog)

def LibrepoLog_addHandler(filePath, debug=False):
    return _repo.LibrepoLog_addHandler(filePath, debug)

def LibrepoLog_removeHandler(uid):
    return _repo.LibrepoLog_removeHandler(uid)

def LibrepoLog_removeAllHandlers():
    return _repo.LibrepoLog_removeAllHandlers()

class RepoError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _repo.RepoError_swiginit(self, _repo.new_RepoError(what))
    __swig_destroy__ = _repo.delete_RepoError

# Register RepoError in _repo:
_repo.RepoError_swigregister(RepoError)



