# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gpgme
else:
    import _gpgme

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def gpgme_op_keylist_start(*args) -> "gpgme_error_t":
    r"""gpgme_op_keylist_start(ctx, pattern="", secret_only=0) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keylist_start(*args)

def gpgme_data_seek(*args) -> "off_t":
    r"""gpgme_data_seek(dh, offset, whence=SEEK_SET) -> off_t"""
    return _gpgme.gpgme_data_seek(*args)
class _gpgme_sig_notation(object):
    r"""Proxy of C _gpgme_sig_notation struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_gpgme._gpgme_sig_notation_name_get, _gpgme._gpgme_sig_notation_name_set, doc=r"""name""")
    value = property(_gpgme._gpgme_sig_notation_value_get, _gpgme._gpgme_sig_notation_value_set, doc=r"""value""")
    flags = property(_gpgme._gpgme_sig_notation_flags_get, _gpgme._gpgme_sig_notation_flags_set, doc=r"""flags""")
    human_readable = property(_gpgme._gpgme_sig_notation_human_readable_get, _gpgme._gpgme_sig_notation_human_readable_set, doc=r"""human_readable""")
    critical = property(_gpgme._gpgme_sig_notation_critical_get, _gpgme._gpgme_sig_notation_critical_set, doc=r"""critical""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_sig_notation"""
        _gpgme._gpgme_sig_notation_swiginit(self, _gpgme.new__gpgme_sig_notation())
    __swig_destroy__ = _gpgme.delete__gpgme_sig_notation

# Register _gpgme_sig_notation in _gpgme:
_gpgme._gpgme_sig_notation_swigregister(_gpgme_sig_notation)

BUILD_REVISION = _gpgme.BUILD_REVISION

BUILD_TIMESTAMP = _gpgme.BUILD_TIMESTAMP

ENABLE_UISERVER = _gpgme.ENABLE_UISERVER

GPGME_LIBASSUAN_VERSION = _gpgme.GPGME_LIBASSUAN_VERSION

HAVE_ARGP_H = _gpgme.HAVE_ARGP_H

HAVE_CLOSEFROM = _gpgme.HAVE_CLOSEFROM

HAVE_DECL_TTYNAME_R = _gpgme.HAVE_DECL_TTYNAME_R

HAVE_DLFCN_H = _gpgme.HAVE_DLFCN_H

HAVE_ERROR_T = _gpgme.HAVE_ERROR_T

HAVE_FSEEKO = _gpgme.HAVE_FSEEKO

HAVE_GETEGID = _gpgme.HAVE_GETEGID

HAVE_GETGID = _gpgme.HAVE_GETGID

HAVE_INTTYPES_H = _gpgme.HAVE_INTTYPES_H

HAVE_LOCALE_H = _gpgme.HAVE_LOCALE_H

HAVE_POSIXDECL_TTYNAME_R = _gpgme.HAVE_POSIXDECL_TTYNAME_R

HAVE_SETENV = _gpgme.HAVE_SETENV

HAVE_SETLOCALE = _gpgme.HAVE_SETLOCALE

HAVE_STDINT_H = _gpgme.HAVE_STDINT_H

HAVE_STDIO_H = _gpgme.HAVE_STDIO_H

HAVE_STDLIB_H = _gpgme.HAVE_STDLIB_H

HAVE_STPCPY = _gpgme.HAVE_STPCPY

HAVE_STRINGS_H = _gpgme.HAVE_STRINGS_H

HAVE_STRING_H = _gpgme.HAVE_STRING_H

HAVE_SYS_SELECT_H = _gpgme.HAVE_SYS_SELECT_H

HAVE_SYS_STAT_H = _gpgme.HAVE_SYS_STAT_H

HAVE_SYS_TIME_H = _gpgme.HAVE_SYS_TIME_H

HAVE_SYS_TYPES_H = _gpgme.HAVE_SYS_TYPES_H

HAVE_SYS_UIO_H = _gpgme.HAVE_SYS_UIO_H

HAVE_THREAD_SAFE_GETENV = _gpgme.HAVE_THREAD_SAFE_GETENV

HAVE_TIMEGM = _gpgme.HAVE_TIMEGM

HAVE_TLS = _gpgme.HAVE_TLS

HAVE_TTYNAME_R = _gpgme.HAVE_TTYNAME_R

HAVE_UINTPTR_T = _gpgme.HAVE_UINTPTR_T

HAVE_UNISTD_H = _gpgme.HAVE_UNISTD_H

HAVE_WCHAR_H = _gpgme.HAVE_WCHAR_H

LT_OBJDIR = _gpgme.LT_OBJDIR

PACKAGE = _gpgme.PACKAGE

PACKAGE_BUGREPORT = _gpgme.PACKAGE_BUGREPORT

PACKAGE_NAME = _gpgme.PACKAGE_NAME

PACKAGE_STRING = _gpgme.PACKAGE_STRING

PACKAGE_TARNAME = _gpgme.PACKAGE_TARNAME

PACKAGE_URL = _gpgme.PACKAGE_URL

PACKAGE_VERSION = _gpgme.PACKAGE_VERSION

PATHSEP_C = _gpgme.PATHSEP_C

DIRSEP_C = _gpgme.DIRSEP_C

DIRSEP_S = _gpgme.DIRSEP_S

SIZEOF_UNSIGNED_INT = _gpgme.SIZEOF_UNSIGNED_INT

STDC_HEADERS = _gpgme.STDC_HEADERS

USE_DESCRIPTOR_PASSING = _gpgme.USE_DESCRIPTOR_PASSING

USE_LINUX_GETDENTS = _gpgme.USE_LINUX_GETDENTS

_ALL_SOURCE = _gpgme._ALL_SOURCE

_DARWIN_C_SOURCE = _gpgme._DARWIN_C_SOURCE

__EXTENSIONS__ = _gpgme.__EXTENSIONS__

_GNU_SOURCE = _gpgme._GNU_SOURCE

_HPUX_ALT_XOPEN_SOCKET_API = _gpgme._HPUX_ALT_XOPEN_SOCKET_API

_NETBSD_SOURCE = _gpgme._NETBSD_SOURCE

_OPENBSD_SOURCE = _gpgme._OPENBSD_SOURCE

_POSIX_PTHREAD_SEMANTICS = _gpgme._POSIX_PTHREAD_SEMANTICS

__STDC_WANT_IEC_60559_ATTRIBS_EXT__ = _gpgme.__STDC_WANT_IEC_60559_ATTRIBS_EXT__

__STDC_WANT_IEC_60559_BFP_EXT__ = _gpgme.__STDC_WANT_IEC_60559_BFP_EXT__

__STDC_WANT_IEC_60559_DFP_EXT__ = _gpgme.__STDC_WANT_IEC_60559_DFP_EXT__

__STDC_WANT_IEC_60559_FUNCS_EXT__ = _gpgme.__STDC_WANT_IEC_60559_FUNCS_EXT__

__STDC_WANT_IEC_60559_TYPES_EXT__ = _gpgme.__STDC_WANT_IEC_60559_TYPES_EXT__

__STDC_WANT_LIB_EXT2__ = _gpgme.__STDC_WANT_LIB_EXT2__

__STDC_WANT_MATH_SPEC_FUNCS__ = _gpgme.__STDC_WANT_MATH_SPEC_FUNCS__

_TANDEM_SOURCE = _gpgme._TANDEM_SOURCE

VERSION = _gpgme.VERSION

_REENTRANT = _gpgme._REENTRANT

GPG_ERR_ENABLE_ERRNO_MACROS = _gpgme.GPG_ERR_ENABLE_ERRNO_MACROS

CRIGHTBLURB = _gpgme.CRIGHTBLURB

GPGME_VERSION = _gpgme.GPGME_VERSION

GPGME_VERSION_NUMBER = _gpgme.GPGME_VERSION_NUMBER

_GPGME_OBSOLETE_SOME_SYMBOLS = _gpgme._GPGME_OBSOLETE_SOME_SYMBOLS


def gpgme_err_make(source: "gpgme_err_source_t", code: "gpgme_err_code_t") -> "gpgme_error_t":
    r"""gpgme_err_make(source, code) -> gpgme_error_t"""
    return _gpgme.gpgme_err_make(source, code)

def gpgme_error(code: "gpgme_err_code_t") -> "gpgme_error_t":
    r"""gpgme_error(code) -> gpgme_error_t"""
    return _gpgme.gpgme_error(code)

def gpgme_err_code(err: "gpgme_error_t") -> "gpgme_err_code_t":
    r"""gpgme_err_code(err) -> gpgme_err_code_t"""
    return _gpgme.gpgme_err_code(err)

def gpgme_err_source(err: "gpgme_error_t") -> "gpgme_err_source_t":
    r"""gpgme_err_source(err) -> gpgme_err_source_t"""
    return _gpgme.gpgme_err_source(err)

def gpgme_strerror(err: "gpgme_error_t") -> "char const *":
    r"""gpgme_strerror(err) -> char const *"""
    return _gpgme.gpgme_strerror(err)

def gpgme_strerror_r(err: "gpg_error_t", buf: "char *") -> "size_t":
    r"""gpgme_strerror_r(err, buf) -> int"""
    return _gpgme.gpgme_strerror_r(err, buf)

def gpgme_strsource(err: "gpgme_error_t") -> "char const *":
    r"""gpgme_strsource(err) -> char const *"""
    return _gpgme.gpgme_strsource(err)

def gpgme_err_code_from_errno(err: "int") -> "gpgme_err_code_t":
    r"""gpgme_err_code_from_errno(err) -> gpgme_err_code_t"""
    return _gpgme.gpgme_err_code_from_errno(err)

def gpgme_err_code_to_errno(code: "gpgme_err_code_t") -> "int":
    r"""gpgme_err_code_to_errno(code) -> int"""
    return _gpgme.gpgme_err_code_to_errno(code)

def gpgme_err_code_from_syserror() -> "gpgme_err_code_t":
    r"""gpgme_err_code_from_syserror() -> gpgme_err_code_t"""
    return _gpgme.gpgme_err_code_from_syserror()

def gpgme_err_set_errno(err: "int") -> "void":
    r"""gpgme_err_set_errno(err)"""
    return _gpgme.gpgme_err_set_errno(err)

def gpgme_err_make_from_errno(source: "gpgme_err_source_t", err: "int") -> "gpgme_error_t":
    r"""gpgme_err_make_from_errno(source, err) -> gpgme_error_t"""
    return _gpgme.gpgme_err_make_from_errno(source, err)

def gpgme_error_from_errno(err: "int") -> "gpgme_error_t":
    r"""gpgme_error_from_errno(err) -> gpgme_error_t"""
    return _gpgme.gpgme_error_from_errno(err)

def gpgme_error_from_syserror() -> "gpgme_error_t":
    r"""gpgme_error_from_syserror() -> gpgme_error_t"""
    return _gpgme.gpgme_error_from_syserror()
GPGME_DATA_ENCODING_NONE = _gpgme.GPGME_DATA_ENCODING_NONE

GPGME_DATA_ENCODING_BINARY = _gpgme.GPGME_DATA_ENCODING_BINARY

GPGME_DATA_ENCODING_BASE64 = _gpgme.GPGME_DATA_ENCODING_BASE64

GPGME_DATA_ENCODING_ARMOR = _gpgme.GPGME_DATA_ENCODING_ARMOR

GPGME_DATA_ENCODING_URL = _gpgme.GPGME_DATA_ENCODING_URL

GPGME_DATA_ENCODING_URLESC = _gpgme.GPGME_DATA_ENCODING_URLESC

GPGME_DATA_ENCODING_URL0 = _gpgme.GPGME_DATA_ENCODING_URL0

GPGME_DATA_ENCODING_MIME = _gpgme.GPGME_DATA_ENCODING_MIME

GPGME_DATA_TYPE_INVALID = _gpgme.GPGME_DATA_TYPE_INVALID

GPGME_DATA_TYPE_UNKNOWN = _gpgme.GPGME_DATA_TYPE_UNKNOWN

GPGME_DATA_TYPE_PGP_SIGNED = _gpgme.GPGME_DATA_TYPE_PGP_SIGNED

GPGME_DATA_TYPE_PGP_ENCRYPTED = _gpgme.GPGME_DATA_TYPE_PGP_ENCRYPTED

GPGME_DATA_TYPE_PGP_OTHER = _gpgme.GPGME_DATA_TYPE_PGP_OTHER

GPGME_DATA_TYPE_PGP_KEY = _gpgme.GPGME_DATA_TYPE_PGP_KEY

GPGME_DATA_TYPE_PGP_SIGNATURE = _gpgme.GPGME_DATA_TYPE_PGP_SIGNATURE

GPGME_DATA_TYPE_CMS_SIGNED = _gpgme.GPGME_DATA_TYPE_CMS_SIGNED

GPGME_DATA_TYPE_CMS_ENCRYPTED = _gpgme.GPGME_DATA_TYPE_CMS_ENCRYPTED

GPGME_DATA_TYPE_CMS_OTHER = _gpgme.GPGME_DATA_TYPE_CMS_OTHER

GPGME_DATA_TYPE_X509_CERT = _gpgme.GPGME_DATA_TYPE_X509_CERT

GPGME_DATA_TYPE_PKCS12 = _gpgme.GPGME_DATA_TYPE_PKCS12

GPGME_PK_RSA = _gpgme.GPGME_PK_RSA

GPGME_PK_RSA_E = _gpgme.GPGME_PK_RSA_E

GPGME_PK_RSA_S = _gpgme.GPGME_PK_RSA_S

GPGME_PK_ELG_E = _gpgme.GPGME_PK_ELG_E

GPGME_PK_DSA = _gpgme.GPGME_PK_DSA

GPGME_PK_ECC = _gpgme.GPGME_PK_ECC

GPGME_PK_ELG = _gpgme.GPGME_PK_ELG

GPGME_PK_ECDSA = _gpgme.GPGME_PK_ECDSA

GPGME_PK_ECDH = _gpgme.GPGME_PK_ECDH

GPGME_PK_EDDSA = _gpgme.GPGME_PK_EDDSA

GPGME_MD_NONE = _gpgme.GPGME_MD_NONE

GPGME_MD_MD5 = _gpgme.GPGME_MD_MD5

GPGME_MD_SHA1 = _gpgme.GPGME_MD_SHA1

GPGME_MD_RMD160 = _gpgme.GPGME_MD_RMD160

GPGME_MD_MD2 = _gpgme.GPGME_MD_MD2

GPGME_MD_TIGER = _gpgme.GPGME_MD_TIGER

GPGME_MD_HAVAL = _gpgme.GPGME_MD_HAVAL

GPGME_MD_SHA256 = _gpgme.GPGME_MD_SHA256

GPGME_MD_SHA384 = _gpgme.GPGME_MD_SHA384

GPGME_MD_SHA512 = _gpgme.GPGME_MD_SHA512

GPGME_MD_SHA224 = _gpgme.GPGME_MD_SHA224

GPGME_MD_MD4 = _gpgme.GPGME_MD_MD4

GPGME_MD_CRC32 = _gpgme.GPGME_MD_CRC32

GPGME_MD_CRC32_RFC1510 = _gpgme.GPGME_MD_CRC32_RFC1510

GPGME_MD_CRC24_RFC2440 = _gpgme.GPGME_MD_CRC24_RFC2440

GPGME_SIG_MODE_NORMAL = _gpgme.GPGME_SIG_MODE_NORMAL

GPGME_SIG_MODE_DETACH = _gpgme.GPGME_SIG_MODE_DETACH

GPGME_SIG_MODE_CLEAR = _gpgme.GPGME_SIG_MODE_CLEAR

GPGME_VALIDITY_UNKNOWN = _gpgme.GPGME_VALIDITY_UNKNOWN

GPGME_VALIDITY_UNDEFINED = _gpgme.GPGME_VALIDITY_UNDEFINED

GPGME_VALIDITY_NEVER = _gpgme.GPGME_VALIDITY_NEVER

GPGME_VALIDITY_MARGINAL = _gpgme.GPGME_VALIDITY_MARGINAL

GPGME_VALIDITY_FULL = _gpgme.GPGME_VALIDITY_FULL

GPGME_VALIDITY_ULTIMATE = _gpgme.GPGME_VALIDITY_ULTIMATE

GPGME_TOFU_POLICY_NONE = _gpgme.GPGME_TOFU_POLICY_NONE

GPGME_TOFU_POLICY_AUTO = _gpgme.GPGME_TOFU_POLICY_AUTO

GPGME_TOFU_POLICY_GOOD = _gpgme.GPGME_TOFU_POLICY_GOOD

GPGME_TOFU_POLICY_UNKNOWN = _gpgme.GPGME_TOFU_POLICY_UNKNOWN

GPGME_TOFU_POLICY_BAD = _gpgme.GPGME_TOFU_POLICY_BAD

GPGME_TOFU_POLICY_ASK = _gpgme.GPGME_TOFU_POLICY_ASK

GPGME_KEYORG_UNKNOWN = _gpgme.GPGME_KEYORG_UNKNOWN

GPGME_KEYORG_KS = _gpgme.GPGME_KEYORG_KS

GPGME_KEYORG_DANE = _gpgme.GPGME_KEYORG_DANE

GPGME_KEYORG_WKD = _gpgme.GPGME_KEYORG_WKD

GPGME_KEYORG_URL = _gpgme.GPGME_KEYORG_URL

GPGME_KEYORG_FILE = _gpgme.GPGME_KEYORG_FILE

GPGME_KEYORG_SELF = _gpgme.GPGME_KEYORG_SELF

GPGME_KEYORG_OTHER = _gpgme.GPGME_KEYORG_OTHER

GPGME_PROTOCOL_OpenPGP = _gpgme.GPGME_PROTOCOL_OpenPGP

GPGME_PROTOCOL_CMS = _gpgme.GPGME_PROTOCOL_CMS

GPGME_PROTOCOL_GPGCONF = _gpgme.GPGME_PROTOCOL_GPGCONF

GPGME_PROTOCOL_ASSUAN = _gpgme.GPGME_PROTOCOL_ASSUAN

GPGME_PROTOCOL_G13 = _gpgme.GPGME_PROTOCOL_G13

GPGME_PROTOCOL_UISERVER = _gpgme.GPGME_PROTOCOL_UISERVER

GPGME_PROTOCOL_SPAWN = _gpgme.GPGME_PROTOCOL_SPAWN

GPGME_PROTOCOL_DEFAULT = _gpgme.GPGME_PROTOCOL_DEFAULT

GPGME_PROTOCOL_UNKNOWN = _gpgme.GPGME_PROTOCOL_UNKNOWN

GPGME_KEYLIST_MODE_LOCAL = _gpgme.GPGME_KEYLIST_MODE_LOCAL

GPGME_KEYLIST_MODE_EXTERN = _gpgme.GPGME_KEYLIST_MODE_EXTERN

GPGME_KEYLIST_MODE_SIGS = _gpgme.GPGME_KEYLIST_MODE_SIGS

GPGME_KEYLIST_MODE_SIG_NOTATIONS = _gpgme.GPGME_KEYLIST_MODE_SIG_NOTATIONS

GPGME_KEYLIST_MODE_WITH_SECRET = _gpgme.GPGME_KEYLIST_MODE_WITH_SECRET

GPGME_KEYLIST_MODE_WITH_TOFU = _gpgme.GPGME_KEYLIST_MODE_WITH_TOFU

GPGME_KEYLIST_MODE_WITH_KEYGRIP = _gpgme.GPGME_KEYLIST_MODE_WITH_KEYGRIP

GPGME_KEYLIST_MODE_EPHEMERAL = _gpgme.GPGME_KEYLIST_MODE_EPHEMERAL

GPGME_KEYLIST_MODE_VALIDATE = _gpgme.GPGME_KEYLIST_MODE_VALIDATE

GPGME_KEYLIST_MODE_LOCATE = _gpgme.GPGME_KEYLIST_MODE_LOCATE

GPGME_PINENTRY_MODE_DEFAULT = _gpgme.GPGME_PINENTRY_MODE_DEFAULT

GPGME_PINENTRY_MODE_ASK = _gpgme.GPGME_PINENTRY_MODE_ASK

GPGME_PINENTRY_MODE_CANCEL = _gpgme.GPGME_PINENTRY_MODE_CANCEL

GPGME_PINENTRY_MODE_ERROR = _gpgme.GPGME_PINENTRY_MODE_ERROR

GPGME_PINENTRY_MODE_LOOPBACK = _gpgme.GPGME_PINENTRY_MODE_LOOPBACK

GPGME_EXPORT_MODE_EXTERN = _gpgme.GPGME_EXPORT_MODE_EXTERN

GPGME_EXPORT_MODE_MINIMAL = _gpgme.GPGME_EXPORT_MODE_MINIMAL

GPGME_EXPORT_MODE_SECRET = _gpgme.GPGME_EXPORT_MODE_SECRET

GPGME_EXPORT_MODE_RAW = _gpgme.GPGME_EXPORT_MODE_RAW

GPGME_EXPORT_MODE_PKCS12 = _gpgme.GPGME_EXPORT_MODE_PKCS12

GPGME_EXPORT_MODE_SSH = _gpgme.GPGME_EXPORT_MODE_SSH

GPGME_AUDITLOG_DEFAULT = _gpgme.GPGME_AUDITLOG_DEFAULT

GPGME_AUDITLOG_HTML = _gpgme.GPGME_AUDITLOG_HTML

GPGME_AUDITLOG_DIAG = _gpgme.GPGME_AUDITLOG_DIAG

GPGME_AUDITLOG_WITH_HELP = _gpgme.GPGME_AUDITLOG_WITH_HELP

GPGME_SIG_NOTATION_HUMAN_READABLE = _gpgme.GPGME_SIG_NOTATION_HUMAN_READABLE

GPGME_SIG_NOTATION_CRITICAL = _gpgme.GPGME_SIG_NOTATION_CRITICAL

class _gpgme_engine_info(object):
    r"""Proxy of C _gpgme_engine_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    protocol = property(_gpgme._gpgme_engine_info_protocol_get, _gpgme._gpgme_engine_info_protocol_set, doc=r"""protocol""")
    file_name = property(_gpgme._gpgme_engine_info_file_name_get, _gpgme._gpgme_engine_info_file_name_set, doc=r"""file_name""")
    version = property(_gpgme._gpgme_engine_info_version_get, _gpgme._gpgme_engine_info_version_set, doc=r"""version""")
    req_version = property(_gpgme._gpgme_engine_info_req_version_get, _gpgme._gpgme_engine_info_req_version_set, doc=r"""req_version""")
    home_dir = property(_gpgme._gpgme_engine_info_home_dir_get, _gpgme._gpgme_engine_info_home_dir_set, doc=r"""home_dir""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_engine_info"""
        _gpgme._gpgme_engine_info_swiginit(self, _gpgme.new__gpgme_engine_info())
    __swig_destroy__ = _gpgme.delete__gpgme_engine_info

# Register _gpgme_engine_info in _gpgme:
_gpgme._gpgme_engine_info_swigregister(_gpgme_engine_info)

class _gpgme_tofu_info(object):
    r"""Proxy of C _gpgme_tofu_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    validity = property(_gpgme._gpgme_tofu_info_validity_get, _gpgme._gpgme_tofu_info_validity_set, doc=r"""validity""")
    policy = property(_gpgme._gpgme_tofu_info_policy_get, _gpgme._gpgme_tofu_info_policy_set, doc=r"""policy""")
    _rfu = property(_gpgme._gpgme_tofu_info__rfu_get, _gpgme._gpgme_tofu_info__rfu_set, doc=r"""_rfu""")
    signcount = property(_gpgme._gpgme_tofu_info_signcount_get, _gpgme._gpgme_tofu_info_signcount_set, doc=r"""signcount""")
    encrcount = property(_gpgme._gpgme_tofu_info_encrcount_get, _gpgme._gpgme_tofu_info_encrcount_set, doc=r"""encrcount""")
    signfirst = property(_gpgme._gpgme_tofu_info_signfirst_get, _gpgme._gpgme_tofu_info_signfirst_set, doc=r"""signfirst""")
    signlast = property(_gpgme._gpgme_tofu_info_signlast_get, _gpgme._gpgme_tofu_info_signlast_set, doc=r"""signlast""")
    encrfirst = property(_gpgme._gpgme_tofu_info_encrfirst_get, _gpgme._gpgme_tofu_info_encrfirst_set, doc=r"""encrfirst""")
    encrlast = property(_gpgme._gpgme_tofu_info_encrlast_get, _gpgme._gpgme_tofu_info_encrlast_set, doc=r"""encrlast""")
    description = property(_gpgme._gpgme_tofu_info_description_get, _gpgme._gpgme_tofu_info_description_set, doc=r"""description""")

    def __repr__(self):
        names = [name for name in dir(self)
            if not name.startswith("_") and name != "this"]
        props = ", ".join(("{}={!r}".format(name, getattr(self, name))
            for name in names)
        )
        return "TofuInfo({})".format(props)


    def __init__(self):
        r"""__init__(self) -> _gpgme_tofu_info"""
        _gpgme._gpgme_tofu_info_swiginit(self, _gpgme.new__gpgme_tofu_info())
    __swig_destroy__ = _gpgme.delete__gpgme_tofu_info

# Register _gpgme_tofu_info in _gpgme:
_gpgme._gpgme_tofu_info_swigregister(_gpgme_tofu_info)

class _gpgme_subkey(object):
    r"""Proxy of C _gpgme_subkey struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    revoked = property(_gpgme._gpgme_subkey_revoked_get, _gpgme._gpgme_subkey_revoked_set, doc=r"""revoked""")
    expired = property(_gpgme._gpgme_subkey_expired_get, _gpgme._gpgme_subkey_expired_set, doc=r"""expired""")
    disabled = property(_gpgme._gpgme_subkey_disabled_get, _gpgme._gpgme_subkey_disabled_set, doc=r"""disabled""")
    invalid = property(_gpgme._gpgme_subkey_invalid_get, _gpgme._gpgme_subkey_invalid_set, doc=r"""invalid""")
    can_encrypt = property(_gpgme._gpgme_subkey_can_encrypt_get, _gpgme._gpgme_subkey_can_encrypt_set, doc=r"""can_encrypt""")
    can_sign = property(_gpgme._gpgme_subkey_can_sign_get, _gpgme._gpgme_subkey_can_sign_set, doc=r"""can_sign""")
    can_certify = property(_gpgme._gpgme_subkey_can_certify_get, _gpgme._gpgme_subkey_can_certify_set, doc=r"""can_certify""")
    secret = property(_gpgme._gpgme_subkey_secret_get, _gpgme._gpgme_subkey_secret_set, doc=r"""secret""")
    can_authenticate = property(_gpgme._gpgme_subkey_can_authenticate_get, _gpgme._gpgme_subkey_can_authenticate_set, doc=r"""can_authenticate""")
    is_qualified = property(_gpgme._gpgme_subkey_is_qualified_get, _gpgme._gpgme_subkey_is_qualified_set, doc=r"""is_qualified""")
    is_cardkey = property(_gpgme._gpgme_subkey_is_cardkey_get, _gpgme._gpgme_subkey_is_cardkey_set, doc=r"""is_cardkey""")
    is_de_vs = property(_gpgme._gpgme_subkey_is_de_vs_get, _gpgme._gpgme_subkey_is_de_vs_set, doc=r"""is_de_vs""")
    _unused = property(_gpgme._gpgme_subkey__unused_get, _gpgme._gpgme_subkey__unused_set, doc=r"""_unused""")
    pubkey_algo = property(_gpgme._gpgme_subkey_pubkey_algo_get, _gpgme._gpgme_subkey_pubkey_algo_set, doc=r"""pubkey_algo""")
    length = property(_gpgme._gpgme_subkey_length_get, _gpgme._gpgme_subkey_length_set, doc=r"""length""")
    keyid = property(_gpgme._gpgme_subkey_keyid_get, _gpgme._gpgme_subkey_keyid_set, doc=r"""keyid""")
    _keyid = property(_gpgme._gpgme_subkey__keyid_get, _gpgme._gpgme_subkey__keyid_set, doc=r"""_keyid""")
    fpr = property(_gpgme._gpgme_subkey_fpr_get, _gpgme._gpgme_subkey_fpr_set, doc=r"""fpr""")
    timestamp = property(_gpgme._gpgme_subkey_timestamp_get, _gpgme._gpgme_subkey_timestamp_set, doc=r"""timestamp""")
    expires = property(_gpgme._gpgme_subkey_expires_get, _gpgme._gpgme_subkey_expires_set, doc=r"""expires""")
    card_number = property(_gpgme._gpgme_subkey_card_number_get, _gpgme._gpgme_subkey_card_number_set, doc=r"""card_number""")
    curve = property(_gpgme._gpgme_subkey_curve_get, _gpgme._gpgme_subkey_curve_set, doc=r"""curve""")
    keygrip = property(_gpgme._gpgme_subkey_keygrip_get, _gpgme._gpgme_subkey_keygrip_set, doc=r"""keygrip""")

    def __repr__(self):
        names = [name for name in dir(self)
            if not name.startswith("_") and name != "this"]
        props = ", ".join(("{}={!r}".format(name, getattr(self, name))
            for name in names)
        )
        return "SubKey({})".format(props)


    def __init__(self):
        r"""__init__(self) -> _gpgme_subkey"""
        _gpgme._gpgme_subkey_swiginit(self, _gpgme.new__gpgme_subkey())
    __swig_destroy__ = _gpgme.delete__gpgme_subkey

# Register _gpgme_subkey in _gpgme:
_gpgme._gpgme_subkey_swigregister(_gpgme_subkey)

class _gpgme_key_sig(object):
    r"""Proxy of C _gpgme_key_sig struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    revoked = property(_gpgme._gpgme_key_sig_revoked_get, _gpgme._gpgme_key_sig_revoked_set, doc=r"""revoked""")
    expired = property(_gpgme._gpgme_key_sig_expired_get, _gpgme._gpgme_key_sig_expired_set, doc=r"""expired""")
    invalid = property(_gpgme._gpgme_key_sig_invalid_get, _gpgme._gpgme_key_sig_invalid_set, doc=r"""invalid""")
    exportable = property(_gpgme._gpgme_key_sig_exportable_get, _gpgme._gpgme_key_sig_exportable_set, doc=r"""exportable""")
    _unused = property(_gpgme._gpgme_key_sig__unused_get, _gpgme._gpgme_key_sig__unused_set, doc=r"""_unused""")
    trust_depth = property(_gpgme._gpgme_key_sig_trust_depth_get, _gpgme._gpgme_key_sig_trust_depth_set, doc=r"""trust_depth""")
    trust_value = property(_gpgme._gpgme_key_sig_trust_value_get, _gpgme._gpgme_key_sig_trust_value_set, doc=r"""trust_value""")
    pubkey_algo = property(_gpgme._gpgme_key_sig_pubkey_algo_get, _gpgme._gpgme_key_sig_pubkey_algo_set, doc=r"""pubkey_algo""")
    keyid = property(_gpgme._gpgme_key_sig_keyid_get, _gpgme._gpgme_key_sig_keyid_set, doc=r"""keyid""")
    _keyid = property(_gpgme._gpgme_key_sig__keyid_get, _gpgme._gpgme_key_sig__keyid_set, doc=r"""_keyid""")
    timestamp = property(_gpgme._gpgme_key_sig_timestamp_get, _gpgme._gpgme_key_sig_timestamp_set, doc=r"""timestamp""")
    expires = property(_gpgme._gpgme_key_sig_expires_get, _gpgme._gpgme_key_sig_expires_set, doc=r"""expires""")
    status = property(_gpgme._gpgme_key_sig_status_get, _gpgme._gpgme_key_sig_status_set, doc=r"""status""")
    _obsolete_class = property(_gpgme._gpgme_key_sig__obsolete_class_get, _gpgme._gpgme_key_sig__obsolete_class_set, doc=r"""_obsolete_class""")
    uid = property(_gpgme._gpgme_key_sig_uid_get, _gpgme._gpgme_key_sig_uid_set, doc=r"""uid""")
    name = property(_gpgme._gpgme_key_sig_name_get, _gpgme._gpgme_key_sig_name_set, doc=r"""name""")
    email = property(_gpgme._gpgme_key_sig_email_get, _gpgme._gpgme_key_sig_email_set, doc=r"""email""")
    comment = property(_gpgme._gpgme_key_sig_comment_get, _gpgme._gpgme_key_sig_comment_set, doc=r"""comment""")
    sig_class = property(_gpgme._gpgme_key_sig_sig_class_get, _gpgme._gpgme_key_sig_sig_class_set, doc=r"""sig_class""")
    notations = property(_gpgme._gpgme_key_sig_notations_get, _gpgme._gpgme_key_sig_notations_set, doc=r"""notations""")
    _last_notation = property(_gpgme._gpgme_key_sig__last_notation_get, _gpgme._gpgme_key_sig__last_notation_set, doc=r"""_last_notation""")
    trust_scope = property(_gpgme._gpgme_key_sig_trust_scope_get, _gpgme._gpgme_key_sig_trust_scope_set, doc=r"""trust_scope""")

    def __repr__(self):
        names = [name for name in dir(self)
            if not name.startswith("_") and name != "this"]
        props = ", ".join(("{}={!r}".format(name, getattr(self, name))
            for name in names)
        )
        return "KeySig({})".format(props)


    def __init__(self):
        r"""__init__(self) -> _gpgme_key_sig"""
        _gpgme._gpgme_key_sig_swiginit(self, _gpgme.new__gpgme_key_sig())
    __swig_destroy__ = _gpgme.delete__gpgme_key_sig

# Register _gpgme_key_sig in _gpgme:
_gpgme._gpgme_key_sig_swigregister(_gpgme_key_sig)

class _gpgme_user_id(object):
    r"""Proxy of C _gpgme_user_id struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    revoked = property(_gpgme._gpgme_user_id_revoked_get, _gpgme._gpgme_user_id_revoked_set, doc=r"""revoked""")
    invalid = property(_gpgme._gpgme_user_id_invalid_get, _gpgme._gpgme_user_id_invalid_set, doc=r"""invalid""")
    _unused = property(_gpgme._gpgme_user_id__unused_get, _gpgme._gpgme_user_id__unused_set, doc=r"""_unused""")
    origin = property(_gpgme._gpgme_user_id_origin_get, _gpgme._gpgme_user_id_origin_set, doc=r"""origin""")
    validity = property(_gpgme._gpgme_user_id_validity_get, _gpgme._gpgme_user_id_validity_set, doc=r"""validity""")
    uid = property(_gpgme._gpgme_user_id_uid_get, _gpgme._gpgme_user_id_uid_set, doc=r"""uid""")
    name = property(_gpgme._gpgme_user_id_name_get, _gpgme._gpgme_user_id_name_set, doc=r"""name""")
    email = property(_gpgme._gpgme_user_id_email_get, _gpgme._gpgme_user_id_email_set, doc=r"""email""")
    comment = property(_gpgme._gpgme_user_id_comment_get, _gpgme._gpgme_user_id_comment_set, doc=r"""comment""")
    signatures = property(_gpgme._gpgme_user_id_signatures_get, _gpgme._gpgme_user_id_signatures_set, doc=r"""signatures""")
    _last_keysig = property(_gpgme._gpgme_user_id__last_keysig_get, _gpgme._gpgme_user_id__last_keysig_set, doc=r"""_last_keysig""")
    address = property(_gpgme._gpgme_user_id_address_get, _gpgme._gpgme_user_id_address_set, doc=r"""address""")
    tofu = property(_gpgme._gpgme_user_id_tofu_get, _gpgme._gpgme_user_id_tofu_set, doc=r"""tofu""")
    last_update = property(_gpgme._gpgme_user_id_last_update_get, _gpgme._gpgme_user_id_last_update_set, doc=r"""last_update""")
    uidhash = property(_gpgme._gpgme_user_id_uidhash_get, _gpgme._gpgme_user_id_uidhash_set, doc=r"""uidhash""")

    def __repr__(self):
        names = [name for name in dir(self)
            if not name.startswith("_") and name != "this"]
        props = ", ".join(("{}={!r}".format(name, getattr(self, name))
            for name in names)
        )
        return "UID({})".format(props)


    def __init__(self):
        r"""__init__(self) -> _gpgme_user_id"""
        _gpgme._gpgme_user_id_swiginit(self, _gpgme.new__gpgme_user_id())
    __swig_destroy__ = _gpgme.delete__gpgme_user_id

# Register _gpgme_user_id in _gpgme:
_gpgme._gpgme_user_id_swigregister(_gpgme_user_id)

class _gpgme_key(object):
    r"""Proxy of C _gpgme_key struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _refs = property(_gpgme._gpgme_key__refs_get, _gpgme._gpgme_key__refs_set, doc=r"""_refs""")
    revoked = property(_gpgme._gpgme_key_revoked_get, _gpgme._gpgme_key_revoked_set, doc=r"""revoked""")
    expired = property(_gpgme._gpgme_key_expired_get, _gpgme._gpgme_key_expired_set, doc=r"""expired""")
    disabled = property(_gpgme._gpgme_key_disabled_get, _gpgme._gpgme_key_disabled_set, doc=r"""disabled""")
    invalid = property(_gpgme._gpgme_key_invalid_get, _gpgme._gpgme_key_invalid_set, doc=r"""invalid""")
    can_encrypt = property(_gpgme._gpgme_key_can_encrypt_get, _gpgme._gpgme_key_can_encrypt_set, doc=r"""can_encrypt""")
    can_sign = property(_gpgme._gpgme_key_can_sign_get, _gpgme._gpgme_key_can_sign_set, doc=r"""can_sign""")
    can_certify = property(_gpgme._gpgme_key_can_certify_get, _gpgme._gpgme_key_can_certify_set, doc=r"""can_certify""")
    secret = property(_gpgme._gpgme_key_secret_get, _gpgme._gpgme_key_secret_set, doc=r"""secret""")
    can_authenticate = property(_gpgme._gpgme_key_can_authenticate_get, _gpgme._gpgme_key_can_authenticate_set, doc=r"""can_authenticate""")
    is_qualified = property(_gpgme._gpgme_key_is_qualified_get, _gpgme._gpgme_key_is_qualified_set, doc=r"""is_qualified""")
    _unused = property(_gpgme._gpgme_key__unused_get, _gpgme._gpgme_key__unused_set, doc=r"""_unused""")
    origin = property(_gpgme._gpgme_key_origin_get, _gpgme._gpgme_key_origin_set, doc=r"""origin""")
    protocol = property(_gpgme._gpgme_key_protocol_get, _gpgme._gpgme_key_protocol_set, doc=r"""protocol""")
    issuer_serial = property(_gpgme._gpgme_key_issuer_serial_get, _gpgme._gpgme_key_issuer_serial_set, doc=r"""issuer_serial""")
    issuer_name = property(_gpgme._gpgme_key_issuer_name_get, _gpgme._gpgme_key_issuer_name_set, doc=r"""issuer_name""")
    chain_id = property(_gpgme._gpgme_key_chain_id_get, _gpgme._gpgme_key_chain_id_set, doc=r"""chain_id""")
    owner_trust = property(_gpgme._gpgme_key_owner_trust_get, _gpgme._gpgme_key_owner_trust_set, doc=r"""owner_trust""")
    subkeys = property(_gpgme._gpgme_key_subkeys_get, _gpgme._gpgme_key_subkeys_set, doc=r"""subkeys""")
    uids = property(_gpgme._gpgme_key_uids_get, _gpgme._gpgme_key_uids_set, doc=r"""uids""")
    _last_subkey = property(_gpgme._gpgme_key__last_subkey_get, _gpgme._gpgme_key__last_subkey_set, doc=r"""_last_subkey""")
    _last_uid = property(_gpgme._gpgme_key__last_uid_get, _gpgme._gpgme_key__last_uid_set, doc=r"""_last_uid""")
    keylist_mode = property(_gpgme._gpgme_key_keylist_mode_get, _gpgme._gpgme_key_keylist_mode_set, doc=r"""keylist_mode""")
    fpr = property(_gpgme._gpgme_key_fpr_get, _gpgme._gpgme_key_fpr_set, doc=r"""fpr""")
    last_update = property(_gpgme._gpgme_key_last_update_get, _gpgme._gpgme_key_last_update_set, doc=r"""last_update""")

    def __repr__(self):
        names = [name for name in dir(self)
            if not name.startswith("_") and name != "this"]
        props = ", ".join(("{}={!r}".format(name, getattr(self, name))
            for name in names)
        )
        return "Key({})".format(props)


    def __init__(self):
        r"""__init__(self) -> _gpgme_key"""
        _gpgme._gpgme_key_swiginit(self, _gpgme.new__gpgme_key())
    __swig_destroy__ = _gpgme.delete__gpgme_key

# Register _gpgme_key in _gpgme:
_gpgme._gpgme_key_swigregister(_gpgme_key)

class _gpgme_invalid_key(object):
    r"""Proxy of C _gpgme_invalid_key struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fpr = property(_gpgme._gpgme_invalid_key_fpr_get, _gpgme._gpgme_invalid_key_fpr_set, doc=r"""fpr""")
    reason = property(_gpgme._gpgme_invalid_key_reason_get, _gpgme._gpgme_invalid_key_reason_set, doc=r"""reason""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_invalid_key"""
        _gpgme._gpgme_invalid_key_swiginit(self, _gpgme.new__gpgme_invalid_key())
    __swig_destroy__ = _gpgme.delete__gpgme_invalid_key

# Register _gpgme_invalid_key in _gpgme:
_gpgme._gpgme_invalid_key_swigregister(_gpgme_invalid_key)


def gpgme_new(ctx: "gpgme_ctx_t *") -> "gpgme_error_t":
    r"""gpgme_new(ctx) -> gpgme_error_t"""
    return _gpgme.gpgme_new(ctx)

def gpgme_release(ctx: "gpgme_ctx_t") -> "void":
    r"""gpgme_release(ctx)"""
    return _gpgme.gpgme_release(ctx)

def gpgme_set_ctx_flag(ctx: "gpgme_ctx_t", name: "char const *", value: "char const *") -> "gpgme_error_t":
    r"""gpgme_set_ctx_flag(ctx, name, value) -> gpgme_error_t"""
    return _gpgme.gpgme_set_ctx_flag(ctx, name, value)

def gpgme_get_ctx_flag(ctx: "gpgme_ctx_t", name: "char const *") -> "char const *":
    r"""gpgme_get_ctx_flag(ctx, name) -> char const *"""
    return _gpgme.gpgme_get_ctx_flag(ctx, name)

def gpgme_set_protocol(ctx: "gpgme_ctx_t", proto: "gpgme_protocol_t") -> "gpgme_error_t":
    r"""gpgme_set_protocol(ctx, proto) -> gpgme_error_t"""
    return _gpgme.gpgme_set_protocol(ctx, proto)

def gpgme_get_protocol(ctx: "gpgme_ctx_t") -> "gpgme_protocol_t":
    r"""gpgme_get_protocol(ctx) -> gpgme_protocol_t"""
    return _gpgme.gpgme_get_protocol(ctx)

def gpgme_set_sub_protocol(ctx: "gpgme_ctx_t", proto: "gpgme_protocol_t") -> "gpgme_error_t":
    r"""gpgme_set_sub_protocol(ctx, proto) -> gpgme_error_t"""
    return _gpgme.gpgme_set_sub_protocol(ctx, proto)

def gpgme_get_sub_protocol(ctx: "gpgme_ctx_t") -> "gpgme_protocol_t":
    r"""gpgme_get_sub_protocol(ctx) -> gpgme_protocol_t"""
    return _gpgme.gpgme_get_sub_protocol(ctx)

def gpgme_get_protocol_name(proto: "gpgme_protocol_t") -> "char const *":
    r"""gpgme_get_protocol_name(proto) -> char const *"""
    return _gpgme.gpgme_get_protocol_name(proto)

def gpgme_set_armor(ctx: "gpgme_ctx_t", yes: "int") -> "void":
    r"""gpgme_set_armor(ctx, yes)"""
    return _gpgme.gpgme_set_armor(ctx, yes)

def gpgme_get_armor(ctx: "gpgme_ctx_t") -> "int":
    r"""gpgme_get_armor(ctx) -> int"""
    return _gpgme.gpgme_get_armor(ctx)

def gpgme_set_textmode(ctx: "gpgme_ctx_t", yes: "int") -> "void":
    r"""gpgme_set_textmode(ctx, yes)"""
    return _gpgme.gpgme_set_textmode(ctx, yes)

def gpgme_get_textmode(ctx: "gpgme_ctx_t") -> "int":
    r"""gpgme_get_textmode(ctx) -> int"""
    return _gpgme.gpgme_get_textmode(ctx)

def gpgme_set_offline(ctx: "gpgme_ctx_t", yes: "int") -> "void":
    r"""gpgme_set_offline(ctx, yes)"""
    return _gpgme.gpgme_set_offline(ctx, yes)

def gpgme_get_offline(ctx: "gpgme_ctx_t") -> "int":
    r"""gpgme_get_offline(ctx) -> int"""
    return _gpgme.gpgme_get_offline(ctx)
GPGME_INCLUDE_CERTS_DEFAULT = _gpgme.GPGME_INCLUDE_CERTS_DEFAULT


def gpgme_set_include_certs(ctx: "gpgme_ctx_t", nr_of_certs: "int") -> "void":
    r"""gpgme_set_include_certs(ctx, nr_of_certs)"""
    return _gpgme.gpgme_set_include_certs(ctx, nr_of_certs)

def gpgme_get_include_certs(ctx: "gpgme_ctx_t") -> "int":
    r"""gpgme_get_include_certs(ctx) -> int"""
    return _gpgme.gpgme_get_include_certs(ctx)

def gpgme_set_keylist_mode(ctx: "gpgme_ctx_t", mode: "gpgme_keylist_mode_t") -> "gpgme_error_t":
    r"""gpgme_set_keylist_mode(ctx, mode) -> gpgme_error_t"""
    return _gpgme.gpgme_set_keylist_mode(ctx, mode)

def gpgme_get_keylist_mode(ctx: "gpgme_ctx_t") -> "gpgme_keylist_mode_t":
    r"""gpgme_get_keylist_mode(ctx) -> gpgme_keylist_mode_t"""
    return _gpgme.gpgme_get_keylist_mode(ctx)

def gpgme_set_pinentry_mode(ctx: "gpgme_ctx_t", mode: "gpgme_pinentry_mode_t") -> "gpgme_error_t":
    r"""gpgme_set_pinentry_mode(ctx, mode) -> gpgme_error_t"""
    return _gpgme.gpgme_set_pinentry_mode(ctx, mode)

def gpgme_get_pinentry_mode(ctx: "gpgme_ctx_t") -> "gpgme_pinentry_mode_t":
    r"""gpgme_get_pinentry_mode(ctx) -> gpgme_pinentry_mode_t"""
    return _gpgme.gpgme_get_pinentry_mode(ctx)

def gpgme_set_passphrase_cb(ctx: "gpgme_ctx_t", cb: "gpgme_passphrase_cb_t", hook_value: "void *") -> "void":
    r"""gpgme_set_passphrase_cb(ctx, cb, hook_value)"""
    return _gpgme.gpgme_set_passphrase_cb(ctx, cb, hook_value)

def gpgme_get_passphrase_cb(ctx: "gpgme_ctx_t", cb: "gpgme_passphrase_cb_t *", hook_value: "void **") -> "void":
    r"""gpgme_get_passphrase_cb(ctx, cb, hook_value)"""
    return _gpgme.gpgme_get_passphrase_cb(ctx, cb, hook_value)

def gpgme_set_progress_cb(c: "gpgme_ctx_t", cb: "gpgme_progress_cb_t", hook_value: "void *") -> "void":
    r"""gpgme_set_progress_cb(c, cb, hook_value)"""
    return _gpgme.gpgme_set_progress_cb(c, cb, hook_value)

def gpgme_get_progress_cb(ctx: "gpgme_ctx_t", cb: "gpgme_progress_cb_t *", hook_value: "void **") -> "void":
    r"""gpgme_get_progress_cb(ctx, cb, hook_value)"""
    return _gpgme.gpgme_get_progress_cb(ctx, cb, hook_value)

def gpgme_set_status_cb(c: "gpgme_ctx_t", cb: "gpgme_status_cb_t", hook_value: "void *") -> "void":
    r"""gpgme_set_status_cb(c, cb, hook_value)"""
    return _gpgme.gpgme_set_status_cb(c, cb, hook_value)

def gpgme_get_status_cb(ctx: "gpgme_ctx_t", cb: "gpgme_status_cb_t *", hook_value: "void **") -> "void":
    r"""gpgme_get_status_cb(ctx, cb, hook_value)"""
    return _gpgme.gpgme_get_status_cb(ctx, cb, hook_value)

def gpgme_set_locale(ctx: "gpgme_ctx_t", category: "int", value: "char const *") -> "gpgme_error_t":
    r"""gpgme_set_locale(ctx, category, value) -> gpgme_error_t"""
    return _gpgme.gpgme_set_locale(ctx, category, value)

def gpgme_ctx_get_engine_info(ctx: "gpgme_ctx_t") -> "gpgme_engine_info_t":
    r"""gpgme_ctx_get_engine_info(ctx) -> _gpgme_engine_info"""
    return _gpgme.gpgme_ctx_get_engine_info(ctx)

def gpgme_ctx_set_engine_info(ctx: "gpgme_ctx_t", proto: "gpgme_protocol_t", file_name: "char const *", home_dir: "char const *") -> "gpgme_error_t":
    r"""gpgme_ctx_set_engine_info(ctx, proto, file_name, home_dir) -> gpgme_error_t"""
    return _gpgme.gpgme_ctx_set_engine_info(ctx, proto, file_name, home_dir)

def gpgme_signers_clear(ctx: "gpgme_ctx_t") -> "void":
    r"""gpgme_signers_clear(ctx)"""
    return _gpgme.gpgme_signers_clear(ctx)

def gpgme_signers_add(ctx: "gpgme_ctx_t", key: "_gpgme_key") -> "gpgme_error_t":
    r"""gpgme_signers_add(ctx, key) -> gpgme_error_t"""
    return _gpgme.gpgme_signers_add(ctx, key)

def gpgme_signers_count(ctx: "gpgme_ctx_t const") -> "unsigned int":
    r"""gpgme_signers_count(ctx) -> unsigned int"""
    return _gpgme.gpgme_signers_count(ctx)

def gpgme_signers_enum(ctx: "gpgme_ctx_t const", seq: "int") -> "gpgme_key_t":
    r"""gpgme_signers_enum(ctx, seq) -> _gpgme_key"""
    return _gpgme.gpgme_signers_enum(ctx, seq)

def gpgme_sig_notation_clear(ctx: "gpgme_ctx_t") -> "void":
    r"""gpgme_sig_notation_clear(ctx)"""
    return _gpgme.gpgme_sig_notation_clear(ctx)

def gpgme_sig_notation_add(ctx: "gpgme_ctx_t", name: "char const *", value: "char const *", flags: "gpgme_sig_notation_flags_t") -> "gpgme_error_t":
    r"""gpgme_sig_notation_add(ctx, name, value, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_sig_notation_add(ctx, name, value, flags)

def gpgme_sig_notation_get(ctx: "gpgme_ctx_t") -> "gpgme_sig_notation_t":
    r"""gpgme_sig_notation_get(ctx) -> _gpgme_sig_notation"""
    return _gpgme.gpgme_sig_notation_get(ctx)

def gpgme_set_sender(ctx: "gpgme_ctx_t", address: "char const *") -> "gpgme_error_t":
    r"""gpgme_set_sender(ctx, address) -> gpgme_error_t"""
    return _gpgme.gpgme_set_sender(ctx, address)

def gpgme_get_sender(ctx: "gpgme_ctx_t") -> "char const *":
    r"""gpgme_get_sender(ctx) -> char const *"""
    return _gpgme.gpgme_get_sender(ctx)
GPGME_EVENT_START = _gpgme.GPGME_EVENT_START

GPGME_EVENT_DONE = _gpgme.GPGME_EVENT_DONE

GPGME_EVENT_NEXT_KEY = _gpgme.GPGME_EVENT_NEXT_KEY

GPGME_EVENT_NEXT_TRUSTITEM = _gpgme.GPGME_EVENT_NEXT_TRUSTITEM

class gpgme_io_event_done_data(object):
    r"""Proxy of C gpgme_io_event_done_data struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    err = property(_gpgme.gpgme_io_event_done_data_err_get, _gpgme.gpgme_io_event_done_data_err_set, doc=r"""err""")
    op_err = property(_gpgme.gpgme_io_event_done_data_op_err_get, _gpgme.gpgme_io_event_done_data_op_err_set, doc=r"""op_err""")

    def __init__(self):
        r"""__init__(self) -> gpgme_io_event_done_data"""
        _gpgme.gpgme_io_event_done_data_swiginit(self, _gpgme.new_gpgme_io_event_done_data())
    __swig_destroy__ = _gpgme.delete_gpgme_io_event_done_data

# Register gpgme_io_event_done_data in _gpgme:
_gpgme.gpgme_io_event_done_data_swigregister(gpgme_io_event_done_data)

class gpgme_io_cbs(object):
    r"""Proxy of C gpgme_io_cbs struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    add = property(_gpgme.gpgme_io_cbs_add_get, _gpgme.gpgme_io_cbs_add_set, doc=r"""add""")
    add_priv = property(_gpgme.gpgme_io_cbs_add_priv_get, _gpgme.gpgme_io_cbs_add_priv_set, doc=r"""add_priv""")
    remove = property(_gpgme.gpgme_io_cbs_remove_get, _gpgme.gpgme_io_cbs_remove_set, doc=r"""remove""")
    event = property(_gpgme.gpgme_io_cbs_event_get, _gpgme.gpgme_io_cbs_event_set, doc=r"""event""")
    event_priv = property(_gpgme.gpgme_io_cbs_event_priv_get, _gpgme.gpgme_io_cbs_event_priv_set, doc=r"""event_priv""")

    def __init__(self):
        r"""__init__(self) -> gpgme_io_cbs"""
        _gpgme.gpgme_io_cbs_swiginit(self, _gpgme.new_gpgme_io_cbs())
    __swig_destroy__ = _gpgme.delete_gpgme_io_cbs

# Register gpgme_io_cbs in _gpgme:
_gpgme.gpgme_io_cbs_swigregister(gpgme_io_cbs)


def gpgme_set_io_cbs(ctx: "gpgme_ctx_t", io_cbs: "gpgme_io_cbs") -> "void":
    r"""gpgme_set_io_cbs(ctx, io_cbs)"""
    return _gpgme.gpgme_set_io_cbs(ctx, io_cbs)

def gpgme_get_io_cbs(ctx: "gpgme_ctx_t", io_cbs: "gpgme_io_cbs") -> "void":
    r"""gpgme_get_io_cbs(ctx, io_cbs)"""
    return _gpgme.gpgme_get_io_cbs(ctx, io_cbs)

def gpgme_io_read(fd: "int", buffer: "void *", count: "size_t") -> "ssize_t":
    r"""gpgme_io_read(fd, buffer, count) -> ssize_t"""
    return _gpgme.gpgme_io_read(fd, buffer, count)

def gpgme_io_write(fd: "int", buffer: "void const *", count: "size_t") -> "ssize_t":
    r"""gpgme_io_write(fd, buffer, count) -> ssize_t"""
    return _gpgme.gpgme_io_write(fd, buffer, count)

def gpgme_io_writen(fd: "int", buffer: "void const *", count: "size_t") -> "int":
    r"""gpgme_io_writen(fd, buffer, count) -> int"""
    return _gpgme.gpgme_io_writen(fd, buffer, count)

def gpgme_wait(ctx: "gpgme_ctx_t", status: "gpgme_error_t *", hang: "int") -> "gpgme_ctx_t":
    r"""gpgme_wait(ctx, status, hang) -> gpgme_ctx_t"""
    return _gpgme.gpgme_wait(ctx, status, hang)

def gpgme_wait_ext(ctx: "gpgme_ctx_t", status: "gpgme_error_t *", op_err: "gpgme_error_t *", hang: "int") -> "gpgme_ctx_t":
    r"""gpgme_wait_ext(ctx, status, op_err, hang) -> gpgme_ctx_t"""
    return _gpgme.gpgme_wait_ext(ctx, status, op_err, hang)

def gpgme_cancel(ctx: "gpgme_ctx_t") -> "gpgme_error_t":
    r"""gpgme_cancel(ctx) -> gpgme_error_t"""
    return _gpgme.gpgme_cancel(ctx)

def gpgme_cancel_async(ctx: "gpgme_ctx_t") -> "gpgme_error_t":
    r"""gpgme_cancel_async(ctx) -> gpgme_error_t"""
    return _gpgme.gpgme_cancel_async(ctx)
class gpgme_data_cbs(object):
    r"""Proxy of C gpgme_data_cbs struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    read = property(_gpgme.gpgme_data_cbs_read_get, _gpgme.gpgme_data_cbs_read_set, doc=r"""read""")
    write = property(_gpgme.gpgme_data_cbs_write_get, _gpgme.gpgme_data_cbs_write_set, doc=r"""write""")
    seek = property(_gpgme.gpgme_data_cbs_seek_get, _gpgme.gpgme_data_cbs_seek_set, doc=r"""seek""")
    release = property(_gpgme.gpgme_data_cbs_release_get, _gpgme.gpgme_data_cbs_release_set, doc=r"""release""")

    def __init__(self):
        r"""__init__(self) -> gpgme_data_cbs"""
        _gpgme.gpgme_data_cbs_swiginit(self, _gpgme.new_gpgme_data_cbs())
    __swig_destroy__ = _gpgme.delete_gpgme_data_cbs

# Register gpgme_data_cbs in _gpgme:
_gpgme.gpgme_data_cbs_swigregister(gpgme_data_cbs)


def gpgme_data_read(dh: "gpgme_data_t", buffer: "void *") -> "size_t":
    r"""gpgme_data_read(dh, buffer) -> ssize_t"""
    return _gpgme.gpgme_data_read(dh, buffer)

def gpgme_data_write(dh: "gpgme_data_t", buffer: "void const *") -> "ssize_t":
    r"""gpgme_data_write(dh, buffer) -> ssize_t"""
    return _gpgme.gpgme_data_write(dh, buffer)

def gpgme_data_new(r_dh: "gpgme_data_t *") -> "gpgme_error_t":
    r"""gpgme_data_new(r_dh) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new(r_dh)

def gpgme_data_release(dh: "gpgme_data_t") -> "void":
    r"""gpgme_data_release(dh)"""
    return _gpgme.gpgme_data_release(dh)

def gpgme_data_new_from_mem(r_dh: "gpgme_data_t *", buffer: "char const *", size: "size_t", copy: "int") -> "gpgme_error_t":
    r"""gpgme_data_new_from_mem(r_dh, buffer, size, copy) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_mem(r_dh, buffer, size, copy)

def gpgme_data_release_and_get_mem(dh: "gpgme_data_t", r_len: "size_t *") -> "char *":
    r"""gpgme_data_release_and_get_mem(dh, r_len) -> char *"""
    return _gpgme.gpgme_data_release_and_get_mem(dh, r_len)

def gpgme_free(buffer: "void *") -> "void":
    r"""gpgme_free(buffer)"""
    return _gpgme.gpgme_free(buffer)

def gpgme_data_new_from_cbs(dh: "gpgme_data_t *", cbs: "gpgme_data_cbs", handle: "void *") -> "gpgme_error_t":
    r"""gpgme_data_new_from_cbs(dh, cbs, handle) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_cbs(dh, cbs, handle)

def gpgme_data_new_from_fd(dh: "gpgme_data_t *", fd: "int") -> "gpgme_error_t":
    r"""gpgme_data_new_from_fd(dh, fd) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_fd(dh, fd)

def gpgme_data_new_from_stream(dh: "gpgme_data_t *", stream: "FILE *") -> "gpgme_error_t":
    r"""gpgme_data_new_from_stream(dh, stream) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_stream(dh, stream)

def gpgme_data_new_from_estream(r_dh: "gpgme_data_t *", stream: "gpgrt_stream_t") -> "gpgme_error_t":
    r"""gpgme_data_new_from_estream(r_dh, stream) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_estream(r_dh, stream)

def gpgme_data_get_encoding(dh: "gpgme_data_t") -> "gpgme_data_encoding_t":
    r"""gpgme_data_get_encoding(dh) -> gpgme_data_encoding_t"""
    return _gpgme.gpgme_data_get_encoding(dh)

def gpgme_data_set_encoding(dh: "gpgme_data_t", enc: "gpgme_data_encoding_t") -> "gpgme_error_t":
    r"""gpgme_data_set_encoding(dh, enc) -> gpgme_error_t"""
    return _gpgme.gpgme_data_set_encoding(dh, enc)

def gpgme_data_get_file_name(dh: "gpgme_data_t") -> "char *":
    r"""gpgme_data_get_file_name(dh) -> char *"""
    return _gpgme.gpgme_data_get_file_name(dh)

def gpgme_data_set_file_name(dh: "gpgme_data_t", file_name: "char const *") -> "gpgme_error_t":
    r"""gpgme_data_set_file_name(dh, file_name) -> gpgme_error_t"""
    return _gpgme.gpgme_data_set_file_name(dh, file_name)

def gpgme_data_set_flag(dh: "gpgme_data_t", name: "char const *", value: "char const *") -> "gpg_error_t":
    r"""gpgme_data_set_flag(dh, name, value) -> gpg_error_t"""
    return _gpgme.gpgme_data_set_flag(dh, name, value)

def gpgme_data_identify(dh: "gpgme_data_t", reserved: "int") -> "gpgme_data_type_t":
    r"""gpgme_data_identify(dh, reserved) -> gpgme_data_type_t"""
    return _gpgme.gpgme_data_identify(dh, reserved)

def gpgme_data_new_from_file(r_dh: "gpgme_data_t *", fname: "char const *", copy: "int") -> "gpgme_error_t":
    r"""gpgme_data_new_from_file(r_dh, fname, copy) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_file(r_dh, fname, copy)

def gpgme_data_new_from_filepart(r_dh: "gpgme_data_t *", fname: "char const *", fp: "FILE *", offset: "off_t", length: "size_t") -> "gpgme_error_t":
    r"""gpgme_data_new_from_filepart(r_dh, fname, fp, offset, length) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_from_filepart(r_dh, fname, fp, offset, length)

def gpgme_data_rewind(dh: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_data_rewind(dh) -> gpgme_error_t"""
    return _gpgme.gpgme_data_rewind(dh)

def gpgme_get_key(ctx: "gpgme_ctx_t", fpr: "char const *", r_key: "gpgme_key_t *", secret: "int") -> "gpgme_error_t":
    r"""gpgme_get_key(ctx, fpr, r_key, secret) -> gpgme_error_t"""
    return _gpgme.gpgme_get_key(ctx, fpr, r_key, secret)

def gpgme_key_from_uid(key: "gpgme_key_t *", name: "char const *") -> "gpgme_error_t":
    r"""gpgme_key_from_uid(key, name) -> gpgme_error_t"""
    return _gpgme.gpgme_key_from_uid(key, name)

def gpgme_key_ref(key: "_gpgme_key") -> "void":
    r"""gpgme_key_ref(key)"""
    return _gpgme.gpgme_key_ref(key)

def gpgme_key_unref(key: "_gpgme_key") -> "void":
    r"""gpgme_key_unref(key)"""
    return _gpgme.gpgme_key_unref(key)

def gpgme_key_release(key: "_gpgme_key") -> "void":
    r"""gpgme_key_release(key)"""
    return _gpgme.gpgme_key_release(key)
class _gpgme_op_encrypt_result(object):
    r"""Proxy of C _gpgme_op_encrypt_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    invalid_recipients = property(_gpgme._gpgme_op_encrypt_result_invalid_recipients_get, _gpgme._gpgme_op_encrypt_result_invalid_recipients_set, doc=r"""invalid_recipients""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_encrypt_result"""
        _gpgme._gpgme_op_encrypt_result_swiginit(self, _gpgme.new__gpgme_op_encrypt_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_encrypt_result

# Register _gpgme_op_encrypt_result in _gpgme:
_gpgme._gpgme_op_encrypt_result_swigregister(_gpgme_op_encrypt_result)


def gpgme_op_encrypt_result(ctx: "gpgme_ctx_t") -> "gpgme_encrypt_result_t":
    r"""gpgme_op_encrypt_result(ctx) -> _gpgme_op_encrypt_result"""
    return _gpgme.gpgme_op_encrypt_result(ctx)
GPGME_ENCRYPT_ALWAYS_TRUST = _gpgme.GPGME_ENCRYPT_ALWAYS_TRUST

GPGME_ENCRYPT_NO_ENCRYPT_TO = _gpgme.GPGME_ENCRYPT_NO_ENCRYPT_TO

GPGME_ENCRYPT_PREPARE = _gpgme.GPGME_ENCRYPT_PREPARE

GPGME_ENCRYPT_EXPECT_SIGN = _gpgme.GPGME_ENCRYPT_EXPECT_SIGN

GPGME_ENCRYPT_NO_COMPRESS = _gpgme.GPGME_ENCRYPT_NO_COMPRESS

GPGME_ENCRYPT_SYMMETRIC = _gpgme.GPGME_ENCRYPT_SYMMETRIC

GPGME_ENCRYPT_THROW_KEYIDS = _gpgme.GPGME_ENCRYPT_THROW_KEYIDS

GPGME_ENCRYPT_WRAP = _gpgme.GPGME_ENCRYPT_WRAP

GPGME_ENCRYPT_WANT_ADDRESS = _gpgme.GPGME_ENCRYPT_WANT_ADDRESS


def gpgme_op_encrypt_start(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_start(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_start(ctx, recp, flags, plain, cipher)

def gpgme_op_encrypt(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt(ctx, recp, flags, plain, cipher)

def gpgme_op_encrypt_ext_start(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", recpstring: "char const *", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_ext_start(ctx, recp, recpstring, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_ext_start(ctx, recp, recpstring, flags, plain, cipher)

def gpgme_op_encrypt_ext(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", recpstring: "char const *", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_ext(ctx, recp, recpstring, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_ext(ctx, recp, recpstring, flags, plain, cipher)

def gpgme_op_encrypt_sign_start(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_sign_start(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_sign_start(ctx, recp, flags, plain, cipher)

def gpgme_op_encrypt_sign(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_sign(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_sign(ctx, recp, flags, plain, cipher)

def gpgme_op_encrypt_sign_ext_start(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", recpstring: "char const *", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_sign_ext_start(ctx, recp, recpstring, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_sign_ext_start(ctx, recp, recpstring, flags, plain, cipher)

def gpgme_op_encrypt_sign_ext(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", recpstring: "char const *", flags: "gpgme_encrypt_flags_t", plain: "gpgme_data_t", cipher: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_encrypt_sign_ext(ctx, recp, recpstring, flags, plain, cipher) -> gpgme_error_t"""
    return _gpgme.gpgme_op_encrypt_sign_ext(ctx, recp, recpstring, flags, plain, cipher)
class _gpgme_recipient(object):
    r"""Proxy of C _gpgme_recipient struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    keyid = property(_gpgme._gpgme_recipient_keyid_get, _gpgme._gpgme_recipient_keyid_set, doc=r"""keyid""")
    _keyid = property(_gpgme._gpgme_recipient__keyid_get, _gpgme._gpgme_recipient__keyid_set, doc=r"""_keyid""")
    pubkey_algo = property(_gpgme._gpgme_recipient_pubkey_algo_get, _gpgme._gpgme_recipient_pubkey_algo_set, doc=r"""pubkey_algo""")
    status = property(_gpgme._gpgme_recipient_status_get, _gpgme._gpgme_recipient_status_set, doc=r"""status""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_recipient"""
        _gpgme._gpgme_recipient_swiginit(self, _gpgme.new__gpgme_recipient())
    __swig_destroy__ = _gpgme.delete__gpgme_recipient

# Register _gpgme_recipient in _gpgme:
_gpgme._gpgme_recipient_swigregister(_gpgme_recipient)

class _gpgme_op_decrypt_result(object):
    r"""Proxy of C _gpgme_op_decrypt_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    unsupported_algorithm = property(_gpgme._gpgme_op_decrypt_result_unsupported_algorithm_get, _gpgme._gpgme_op_decrypt_result_unsupported_algorithm_set, doc=r"""unsupported_algorithm""")
    wrong_key_usage = property(_gpgme._gpgme_op_decrypt_result_wrong_key_usage_get, _gpgme._gpgme_op_decrypt_result_wrong_key_usage_set, doc=r"""wrong_key_usage""")
    is_de_vs = property(_gpgme._gpgme_op_decrypt_result_is_de_vs_get, _gpgme._gpgme_op_decrypt_result_is_de_vs_set, doc=r"""is_de_vs""")
    is_mime = property(_gpgme._gpgme_op_decrypt_result_is_mime_get, _gpgme._gpgme_op_decrypt_result_is_mime_set, doc=r"""is_mime""")
    legacy_cipher_nomdc = property(_gpgme._gpgme_op_decrypt_result_legacy_cipher_nomdc_get, _gpgme._gpgme_op_decrypt_result_legacy_cipher_nomdc_set, doc=r"""legacy_cipher_nomdc""")
    _unused = property(_gpgme._gpgme_op_decrypt_result__unused_get, _gpgme._gpgme_op_decrypt_result__unused_set, doc=r"""_unused""")
    recipients = property(_gpgme._gpgme_op_decrypt_result_recipients_get, _gpgme._gpgme_op_decrypt_result_recipients_set, doc=r"""recipients""")
    file_name = property(_gpgme._gpgme_op_decrypt_result_file_name_get, _gpgme._gpgme_op_decrypt_result_file_name_set, doc=r"""file_name""")
    session_key = property(_gpgme._gpgme_op_decrypt_result_session_key_get, _gpgme._gpgme_op_decrypt_result_session_key_set, doc=r"""session_key""")
    symkey_algo = property(_gpgme._gpgme_op_decrypt_result_symkey_algo_get, _gpgme._gpgme_op_decrypt_result_symkey_algo_set, doc=r"""symkey_algo""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_decrypt_result"""
        _gpgme._gpgme_op_decrypt_result_swiginit(self, _gpgme.new__gpgme_op_decrypt_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_decrypt_result

# Register _gpgme_op_decrypt_result in _gpgme:
_gpgme._gpgme_op_decrypt_result_swigregister(_gpgme_op_decrypt_result)


def gpgme_op_decrypt_result(ctx: "gpgme_ctx_t") -> "gpgme_decrypt_result_t":
    r"""gpgme_op_decrypt_result(ctx) -> _gpgme_op_decrypt_result"""
    return _gpgme.gpgme_op_decrypt_result(ctx)
GPGME_DECRYPT_VERIFY = _gpgme.GPGME_DECRYPT_VERIFY

GPGME_DECRYPT_UNWRAP = _gpgme.GPGME_DECRYPT_UNWRAP


def gpgme_op_decrypt_start(ctx: "gpgme_ctx_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt_start(ctx, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt_start(ctx, cipher, plain)

def gpgme_op_decrypt(ctx: "gpgme_ctx_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt(ctx, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt(ctx, cipher, plain)

def gpgme_op_decrypt_verify_start(ctx: "gpgme_ctx_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt_verify_start(ctx, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt_verify_start(ctx, cipher, plain)

def gpgme_op_decrypt_verify(ctx: "gpgme_ctx_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt_verify(ctx, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt_verify(ctx, cipher, plain)

def gpgme_op_decrypt_ext_start(ctx: "gpgme_ctx_t", flags: "gpgme_decrypt_flags_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt_ext_start(ctx, flags, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt_ext_start(ctx, flags, cipher, plain)

def gpgme_op_decrypt_ext(ctx: "gpgme_ctx_t", flags: "gpgme_decrypt_flags_t", cipher: "gpgme_data_t", plain: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_decrypt_ext(ctx, flags, cipher, plain) -> gpgme_error_t"""
    return _gpgme.gpgme_op_decrypt_ext(ctx, flags, cipher, plain)
class _gpgme_new_signature(object):
    r"""Proxy of C _gpgme_new_signature struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_gpgme._gpgme_new_signature_type_get, _gpgme._gpgme_new_signature_type_set, doc=r"""type""")
    pubkey_algo = property(_gpgme._gpgme_new_signature_pubkey_algo_get, _gpgme._gpgme_new_signature_pubkey_algo_set, doc=r"""pubkey_algo""")
    hash_algo = property(_gpgme._gpgme_new_signature_hash_algo_get, _gpgme._gpgme_new_signature_hash_algo_set, doc=r"""hash_algo""")
    _obsolete_class = property(_gpgme._gpgme_new_signature__obsolete_class_get, _gpgme._gpgme_new_signature__obsolete_class_set, doc=r"""_obsolete_class""")
    timestamp = property(_gpgme._gpgme_new_signature_timestamp_get, _gpgme._gpgme_new_signature_timestamp_set, doc=r"""timestamp""")
    fpr = property(_gpgme._gpgme_new_signature_fpr_get, _gpgme._gpgme_new_signature_fpr_set, doc=r"""fpr""")
    _obsolete_class_2 = property(_gpgme._gpgme_new_signature__obsolete_class_2_get, _gpgme._gpgme_new_signature__obsolete_class_2_set, doc=r"""_obsolete_class_2""")
    sig_class = property(_gpgme._gpgme_new_signature_sig_class_get, _gpgme._gpgme_new_signature_sig_class_set, doc=r"""sig_class""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_new_signature"""
        _gpgme._gpgme_new_signature_swiginit(self, _gpgme.new__gpgme_new_signature())
    __swig_destroy__ = _gpgme.delete__gpgme_new_signature

# Register _gpgme_new_signature in _gpgme:
_gpgme._gpgme_new_signature_swigregister(_gpgme_new_signature)

class _gpgme_op_sign_result(object):
    r"""Proxy of C _gpgme_op_sign_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    invalid_signers = property(_gpgme._gpgme_op_sign_result_invalid_signers_get, _gpgme._gpgme_op_sign_result_invalid_signers_set, doc=r"""invalid_signers""")
    signatures = property(_gpgme._gpgme_op_sign_result_signatures_get, _gpgme._gpgme_op_sign_result_signatures_set, doc=r"""signatures""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_sign_result"""
        _gpgme._gpgme_op_sign_result_swiginit(self, _gpgme.new__gpgme_op_sign_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_sign_result

# Register _gpgme_op_sign_result in _gpgme:
_gpgme._gpgme_op_sign_result_swigregister(_gpgme_op_sign_result)


def gpgme_op_sign_result(ctx: "gpgme_ctx_t") -> "gpgme_sign_result_t":
    r"""gpgme_op_sign_result(ctx) -> _gpgme_op_sign_result"""
    return _gpgme.gpgme_op_sign_result(ctx)

def gpgme_op_sign_start(ctx: "gpgme_ctx_t", plain: "gpgme_data_t", sig: "gpgme_data_t", mode: "gpgme_sig_mode_t") -> "gpgme_error_t":
    r"""gpgme_op_sign_start(ctx, plain, sig, mode) -> gpgme_error_t"""
    return _gpgme.gpgme_op_sign_start(ctx, plain, sig, mode)

def gpgme_op_sign(ctx: "gpgme_ctx_t", plain: "gpgme_data_t", sig: "gpgme_data_t", mode: "gpgme_sig_mode_t") -> "gpgme_error_t":
    r"""gpgme_op_sign(ctx, plain, sig, mode) -> gpgme_error_t"""
    return _gpgme.gpgme_op_sign(ctx, plain, sig, mode)
GPGME_SIGSUM_VALID = _gpgme.GPGME_SIGSUM_VALID

GPGME_SIGSUM_GREEN = _gpgme.GPGME_SIGSUM_GREEN

GPGME_SIGSUM_RED = _gpgme.GPGME_SIGSUM_RED

GPGME_SIGSUM_KEY_REVOKED = _gpgme.GPGME_SIGSUM_KEY_REVOKED

GPGME_SIGSUM_KEY_EXPIRED = _gpgme.GPGME_SIGSUM_KEY_EXPIRED

GPGME_SIGSUM_SIG_EXPIRED = _gpgme.GPGME_SIGSUM_SIG_EXPIRED

GPGME_SIGSUM_KEY_MISSING = _gpgme.GPGME_SIGSUM_KEY_MISSING

GPGME_SIGSUM_CRL_MISSING = _gpgme.GPGME_SIGSUM_CRL_MISSING

GPGME_SIGSUM_CRL_TOO_OLD = _gpgme.GPGME_SIGSUM_CRL_TOO_OLD

GPGME_SIGSUM_BAD_POLICY = _gpgme.GPGME_SIGSUM_BAD_POLICY

GPGME_SIGSUM_SYS_ERROR = _gpgme.GPGME_SIGSUM_SYS_ERROR

GPGME_SIGSUM_TOFU_CONFLICT = _gpgme.GPGME_SIGSUM_TOFU_CONFLICT

class _gpgme_signature(object):
    r"""Proxy of C _gpgme_signature struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    summary = property(_gpgme._gpgme_signature_summary_get, _gpgme._gpgme_signature_summary_set, doc=r"""summary""")
    fpr = property(_gpgme._gpgme_signature_fpr_get, _gpgme._gpgme_signature_fpr_set, doc=r"""fpr""")
    status = property(_gpgme._gpgme_signature_status_get, _gpgme._gpgme_signature_status_set, doc=r"""status""")
    notations = property(_gpgme._gpgme_signature_notations_get, _gpgme._gpgme_signature_notations_set, doc=r"""notations""")
    timestamp = property(_gpgme._gpgme_signature_timestamp_get, _gpgme._gpgme_signature_timestamp_set, doc=r"""timestamp""")
    exp_timestamp = property(_gpgme._gpgme_signature_exp_timestamp_get, _gpgme._gpgme_signature_exp_timestamp_set, doc=r"""exp_timestamp""")
    wrong_key_usage = property(_gpgme._gpgme_signature_wrong_key_usage_get, _gpgme._gpgme_signature_wrong_key_usage_set, doc=r"""wrong_key_usage""")
    pka_trust = property(_gpgme._gpgme_signature_pka_trust_get, _gpgme._gpgme_signature_pka_trust_set, doc=r"""pka_trust""")
    chain_model = property(_gpgme._gpgme_signature_chain_model_get, _gpgme._gpgme_signature_chain_model_set, doc=r"""chain_model""")
    is_de_vs = property(_gpgme._gpgme_signature_is_de_vs_get, _gpgme._gpgme_signature_is_de_vs_set, doc=r"""is_de_vs""")
    _unused = property(_gpgme._gpgme_signature__unused_get, _gpgme._gpgme_signature__unused_set, doc=r"""_unused""")
    validity = property(_gpgme._gpgme_signature_validity_get, _gpgme._gpgme_signature_validity_set, doc=r"""validity""")
    validity_reason = property(_gpgme._gpgme_signature_validity_reason_get, _gpgme._gpgme_signature_validity_reason_set, doc=r"""validity_reason""")
    pubkey_algo = property(_gpgme._gpgme_signature_pubkey_algo_get, _gpgme._gpgme_signature_pubkey_algo_set, doc=r"""pubkey_algo""")
    hash_algo = property(_gpgme._gpgme_signature_hash_algo_get, _gpgme._gpgme_signature_hash_algo_set, doc=r"""hash_algo""")
    pka_address = property(_gpgme._gpgme_signature_pka_address_get, _gpgme._gpgme_signature_pka_address_set, doc=r"""pka_address""")
    key = property(_gpgme._gpgme_signature_key_get, _gpgme._gpgme_signature_key_set, doc=r"""key""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_signature"""
        _gpgme._gpgme_signature_swiginit(self, _gpgme.new__gpgme_signature())
    __swig_destroy__ = _gpgme.delete__gpgme_signature

# Register _gpgme_signature in _gpgme:
_gpgme._gpgme_signature_swigregister(_gpgme_signature)

class _gpgme_op_verify_result(object):
    r"""Proxy of C _gpgme_op_verify_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    signatures = property(_gpgme._gpgme_op_verify_result_signatures_get, _gpgme._gpgme_op_verify_result_signatures_set, doc=r"""signatures""")
    file_name = property(_gpgme._gpgme_op_verify_result_file_name_get, _gpgme._gpgme_op_verify_result_file_name_set, doc=r"""file_name""")
    is_mime = property(_gpgme._gpgme_op_verify_result_is_mime_get, _gpgme._gpgme_op_verify_result_is_mime_set, doc=r"""is_mime""")
    _unused = property(_gpgme._gpgme_op_verify_result__unused_get, _gpgme._gpgme_op_verify_result__unused_set, doc=r"""_unused""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_verify_result"""
        _gpgme._gpgme_op_verify_result_swiginit(self, _gpgme.new__gpgme_op_verify_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_verify_result

# Register _gpgme_op_verify_result in _gpgme:
_gpgme._gpgme_op_verify_result_swigregister(_gpgme_op_verify_result)


def gpgme_op_verify_result(ctx: "gpgme_ctx_t") -> "gpgme_verify_result_t":
    r"""gpgme_op_verify_result(ctx) -> _gpgme_op_verify_result"""
    return _gpgme.gpgme_op_verify_result(ctx)

def gpgme_op_verify_start(ctx: "gpgme_ctx_t", sig: "gpgme_data_t", signed_text: "gpgme_data_t", plaintext: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_verify_start(ctx, sig, signed_text, plaintext) -> gpgme_error_t"""
    return _gpgme.gpgme_op_verify_start(ctx, sig, signed_text, plaintext)

def gpgme_op_verify(ctx: "gpgme_ctx_t", sig: "gpgme_data_t", signed_text: "gpgme_data_t", plaintext: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_verify(ctx, sig, signed_text, plaintext) -> gpgme_error_t"""
    return _gpgme.gpgme_op_verify(ctx, sig, signed_text, plaintext)
GPGME_IMPORT_NEW = _gpgme.GPGME_IMPORT_NEW

GPGME_IMPORT_UID = _gpgme.GPGME_IMPORT_UID

GPGME_IMPORT_SIG = _gpgme.GPGME_IMPORT_SIG

GPGME_IMPORT_SUBKEY = _gpgme.GPGME_IMPORT_SUBKEY

GPGME_IMPORT_SECRET = _gpgme.GPGME_IMPORT_SECRET

class _gpgme_import_status(object):
    r"""Proxy of C _gpgme_import_status struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fpr = property(_gpgme._gpgme_import_status_fpr_get, _gpgme._gpgme_import_status_fpr_set, doc=r"""fpr""")
    result = property(_gpgme._gpgme_import_status_result_get, _gpgme._gpgme_import_status_result_set, doc=r"""result""")
    status = property(_gpgme._gpgme_import_status_status_get, _gpgme._gpgme_import_status_status_set, doc=r"""status""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_import_status"""
        _gpgme._gpgme_import_status_swiginit(self, _gpgme.new__gpgme_import_status())
    __swig_destroy__ = _gpgme.delete__gpgme_import_status

# Register _gpgme_import_status in _gpgme:
_gpgme._gpgme_import_status_swigregister(_gpgme_import_status)

class _gpgme_op_import_result(object):
    r"""Proxy of C _gpgme_op_import_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    considered = property(_gpgme._gpgme_op_import_result_considered_get, _gpgme._gpgme_op_import_result_considered_set, doc=r"""considered""")
    no_user_id = property(_gpgme._gpgme_op_import_result_no_user_id_get, _gpgme._gpgme_op_import_result_no_user_id_set, doc=r"""no_user_id""")
    imported = property(_gpgme._gpgme_op_import_result_imported_get, _gpgme._gpgme_op_import_result_imported_set, doc=r"""imported""")
    imported_rsa = property(_gpgme._gpgme_op_import_result_imported_rsa_get, _gpgme._gpgme_op_import_result_imported_rsa_set, doc=r"""imported_rsa""")
    unchanged = property(_gpgme._gpgme_op_import_result_unchanged_get, _gpgme._gpgme_op_import_result_unchanged_set, doc=r"""unchanged""")
    new_user_ids = property(_gpgme._gpgme_op_import_result_new_user_ids_get, _gpgme._gpgme_op_import_result_new_user_ids_set, doc=r"""new_user_ids""")
    new_sub_keys = property(_gpgme._gpgme_op_import_result_new_sub_keys_get, _gpgme._gpgme_op_import_result_new_sub_keys_set, doc=r"""new_sub_keys""")
    new_signatures = property(_gpgme._gpgme_op_import_result_new_signatures_get, _gpgme._gpgme_op_import_result_new_signatures_set, doc=r"""new_signatures""")
    new_revocations = property(_gpgme._gpgme_op_import_result_new_revocations_get, _gpgme._gpgme_op_import_result_new_revocations_set, doc=r"""new_revocations""")
    secret_read = property(_gpgme._gpgme_op_import_result_secret_read_get, _gpgme._gpgme_op_import_result_secret_read_set, doc=r"""secret_read""")
    secret_imported = property(_gpgme._gpgme_op_import_result_secret_imported_get, _gpgme._gpgme_op_import_result_secret_imported_set, doc=r"""secret_imported""")
    secret_unchanged = property(_gpgme._gpgme_op_import_result_secret_unchanged_get, _gpgme._gpgme_op_import_result_secret_unchanged_set, doc=r"""secret_unchanged""")
    skipped_new_keys = property(_gpgme._gpgme_op_import_result_skipped_new_keys_get, _gpgme._gpgme_op_import_result_skipped_new_keys_set, doc=r"""skipped_new_keys""")
    not_imported = property(_gpgme._gpgme_op_import_result_not_imported_get, _gpgme._gpgme_op_import_result_not_imported_set, doc=r"""not_imported""")
    imports = property(_gpgme._gpgme_op_import_result_imports_get, _gpgme._gpgme_op_import_result_imports_set, doc=r"""imports""")
    skipped_v3_keys = property(_gpgme._gpgme_op_import_result_skipped_v3_keys_get, _gpgme._gpgme_op_import_result_skipped_v3_keys_set, doc=r"""skipped_v3_keys""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_import_result"""
        _gpgme._gpgme_op_import_result_swiginit(self, _gpgme.new__gpgme_op_import_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_import_result

# Register _gpgme_op_import_result in _gpgme:
_gpgme._gpgme_op_import_result_swigregister(_gpgme_op_import_result)


def gpgme_op_import_result(ctx: "gpgme_ctx_t") -> "gpgme_import_result_t":
    r"""gpgme_op_import_result(ctx) -> _gpgme_op_import_result"""
    return _gpgme.gpgme_op_import_result(ctx)

def gpgme_op_import_start(ctx: "gpgme_ctx_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_import_start(ctx, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_import_start(ctx, keydata)

def gpgme_op_import(ctx: "gpgme_ctx_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_import(ctx, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_import(ctx, keydata)

def gpgme_op_import_keys_start(ctx: "gpgme_ctx_t", keys: "gpgme_key_t []") -> "gpgme_error_t":
    r"""gpgme_op_import_keys_start(ctx, keys) -> gpgme_error_t"""
    return _gpgme.gpgme_op_import_keys_start(ctx, keys)

def gpgme_op_import_keys(ctx: "gpgme_ctx_t", keys: "gpgme_key_t []") -> "gpgme_error_t":
    r"""gpgme_op_import_keys(ctx, keys) -> gpgme_error_t"""
    return _gpgme.gpgme_op_import_keys(ctx, keys)

def gpgme_op_export_start(ctx: "gpgme_ctx_t", pattern: "char const *", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export_start(ctx, pattern, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export_start(ctx, pattern, mode, keydata)

def gpgme_op_export(ctx: "gpgme_ctx_t", pattern: "char const *", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export(ctx, pattern, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export(ctx, pattern, mode, keydata)

def gpgme_op_export_ext_start(ctx: "gpgme_ctx_t", pattern: "char const *[]", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export_ext_start(ctx, pattern, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export_ext_start(ctx, pattern, mode, keydata)

def gpgme_op_export_ext(ctx: "gpgme_ctx_t", pattern: "char const *[]", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export_ext(ctx, pattern, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export_ext(ctx, pattern, mode, keydata)

def gpgme_op_export_keys_start(ctx: "gpgme_ctx_t", keys: "gpgme_key_t []", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export_keys_start(ctx, keys, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export_keys_start(ctx, keys, mode, keydata)

def gpgme_op_export_keys(ctx: "gpgme_ctx_t", keys: "gpgme_key_t []", mode: "gpgme_export_mode_t", keydata: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_export_keys(ctx, keys, mode, keydata) -> gpgme_error_t"""
    return _gpgme.gpgme_op_export_keys(ctx, keys, mode, keydata)
GPGME_CREATE_SIGN = _gpgme.GPGME_CREATE_SIGN

GPGME_CREATE_ENCR = _gpgme.GPGME_CREATE_ENCR

GPGME_CREATE_CERT = _gpgme.GPGME_CREATE_CERT

GPGME_CREATE_AUTH = _gpgme.GPGME_CREATE_AUTH

GPGME_CREATE_NOPASSWD = _gpgme.GPGME_CREATE_NOPASSWD

GPGME_CREATE_SELFSIGNED = _gpgme.GPGME_CREATE_SELFSIGNED

GPGME_CREATE_NOSTORE = _gpgme.GPGME_CREATE_NOSTORE

GPGME_CREATE_WANTPUB = _gpgme.GPGME_CREATE_WANTPUB

GPGME_CREATE_WANTSEC = _gpgme.GPGME_CREATE_WANTSEC

GPGME_CREATE_FORCE = _gpgme.GPGME_CREATE_FORCE

GPGME_CREATE_NOEXPIRE = _gpgme.GPGME_CREATE_NOEXPIRE

class _gpgme_op_genkey_result(object):
    r"""Proxy of C _gpgme_op_genkey_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    primary = property(_gpgme._gpgme_op_genkey_result_primary_get, _gpgme._gpgme_op_genkey_result_primary_set, doc=r"""primary""")
    sub = property(_gpgme._gpgme_op_genkey_result_sub_get, _gpgme._gpgme_op_genkey_result_sub_set, doc=r"""sub""")
    uid = property(_gpgme._gpgme_op_genkey_result_uid_get, _gpgme._gpgme_op_genkey_result_uid_set, doc=r"""uid""")
    _unused = property(_gpgme._gpgme_op_genkey_result__unused_get, _gpgme._gpgme_op_genkey_result__unused_set, doc=r"""_unused""")
    fpr = property(_gpgme._gpgme_op_genkey_result_fpr_get, _gpgme._gpgme_op_genkey_result_fpr_set, doc=r"""fpr""")
    pubkey = property(_gpgme._gpgme_op_genkey_result_pubkey_get, _gpgme._gpgme_op_genkey_result_pubkey_set, doc=r"""pubkey""")
    seckey = property(_gpgme._gpgme_op_genkey_result_seckey_get, _gpgme._gpgme_op_genkey_result_seckey_set, doc=r"""seckey""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_genkey_result"""
        _gpgme._gpgme_op_genkey_result_swiginit(self, _gpgme.new__gpgme_op_genkey_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_genkey_result

# Register _gpgme_op_genkey_result in _gpgme:
_gpgme._gpgme_op_genkey_result_swigregister(_gpgme_op_genkey_result)


def gpgme_op_genkey_start(ctx: "gpgme_ctx_t", parms: "char const *", pubkey: "gpgme_data_t", seckey: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_genkey_start(ctx, parms, pubkey, seckey) -> gpgme_error_t"""
    return _gpgme.gpgme_op_genkey_start(ctx, parms, pubkey, seckey)

def gpgme_op_genkey(ctx: "gpgme_ctx_t", parms: "char const *", pubkey: "gpgme_data_t", seckey: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_genkey(ctx, parms, pubkey, seckey) -> gpgme_error_t"""
    return _gpgme.gpgme_op_genkey(ctx, parms, pubkey, seckey)

def gpgme_op_createkey_start(ctx: "gpgme_ctx_t", userid: "char const *", algo: "char const *", reserved: "unsigned long", expires: "unsigned long", certkey: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_createkey_start(ctx, userid, algo, reserved, expires, certkey, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_createkey_start(ctx, userid, algo, reserved, expires, certkey, flags)

def gpgme_op_createkey(ctx: "gpgme_ctx_t", userid: "char const *", algo: "char const *", reserved: "unsigned long", expires: "unsigned long", certkey: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_createkey(ctx, userid, algo, reserved, expires, certkey, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_createkey(ctx, userid, algo, reserved, expires, certkey, flags)

def gpgme_op_createsubkey_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", algo: "char const *", reserved: "unsigned long", expires: "unsigned long", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_createsubkey_start(ctx, key, algo, reserved, expires, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_createsubkey_start(ctx, key, algo, reserved, expires, flags)

def gpgme_op_createsubkey(ctx: "gpgme_ctx_t", key: "_gpgme_key", algo: "char const *", reserved: "unsigned long", expires: "unsigned long", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_createsubkey(ctx, key, algo, reserved, expires, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_createsubkey(ctx, key, algo, reserved, expires, flags)

def gpgme_op_adduid_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_adduid_start(ctx, key, userid, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_adduid_start(ctx, key, userid, reserved)

def gpgme_op_adduid(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_adduid(ctx, key, userid, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_adduid(ctx, key, userid, reserved)

def gpgme_op_revuid_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_revuid_start(ctx, key, userid, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_revuid_start(ctx, key, userid, reserved)

def gpgme_op_revuid(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_revuid(ctx, key, userid, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_revuid(ctx, key, userid, reserved)

def gpgme_op_set_uid_flag_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", name: "char const *", value: "char const *") -> "gpgme_error_t":
    r"""gpgme_op_set_uid_flag_start(ctx, key, userid, name, value) -> gpgme_error_t"""
    return _gpgme.gpgme_op_set_uid_flag_start(ctx, key, userid, name, value)

def gpgme_op_set_uid_flag(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", name: "char const *", value: "char const *") -> "gpgme_error_t":
    r"""gpgme_op_set_uid_flag(ctx, key, userid, name, value) -> gpgme_error_t"""
    return _gpgme.gpgme_op_set_uid_flag(ctx, key, userid, name, value)

def gpgme_op_setexpire_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", expires: "unsigned long", subfprs: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_setexpire_start(ctx, key, expires, subfprs, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_setexpire_start(ctx, key, expires, subfprs, reserved)

def gpgme_op_setexpire(ctx: "gpgme_ctx_t", key: "_gpgme_key", expires: "unsigned long", subfprs: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_setexpire(ctx, key, expires, subfprs, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_setexpire(ctx, key, expires, subfprs, reserved)

def gpgme_op_genkey_result(ctx: "gpgme_ctx_t") -> "gpgme_genkey_result_t":
    r"""gpgme_op_genkey_result(ctx) -> _gpgme_op_genkey_result"""
    return _gpgme.gpgme_op_genkey_result(ctx)

def gpgme_op_delete_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", allow_secret: "int") -> "gpgme_error_t":
    r"""gpgme_op_delete_start(ctx, key, allow_secret) -> gpgme_error_t"""
    return _gpgme.gpgme_op_delete_start(ctx, key, allow_secret)

def gpgme_op_delete(ctx: "gpgme_ctx_t", key: "_gpgme_key", allow_secret: "int") -> "gpgme_error_t":
    r"""gpgme_op_delete(ctx, key, allow_secret) -> gpgme_error_t"""
    return _gpgme.gpgme_op_delete(ctx, key, allow_secret)
GPGME_DELETE_ALLOW_SECRET = _gpgme.GPGME_DELETE_ALLOW_SECRET

GPGME_DELETE_FORCE = _gpgme.GPGME_DELETE_FORCE


def gpgme_op_delete_ext_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_delete_ext_start(ctx, key, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_delete_ext_start(ctx, key, flags)

def gpgme_op_delete_ext(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_delete_ext(ctx, key, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_delete_ext(ctx, key, flags)
GPGME_KEYSIGN_LOCAL = _gpgme.GPGME_KEYSIGN_LOCAL

GPGME_KEYSIGN_LFSEP = _gpgme.GPGME_KEYSIGN_LFSEP

GPGME_KEYSIGN_NOEXPIRE = _gpgme.GPGME_KEYSIGN_NOEXPIRE

GPGME_KEYSIGN_FORCE = _gpgme.GPGME_KEYSIGN_FORCE


def gpgme_op_keysign_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", expires: "unsigned long", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_keysign_start(ctx, key, userid, expires, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keysign_start(ctx, key, userid, expires, flags)

def gpgme_op_keysign(ctx: "gpgme_ctx_t", key: "_gpgme_key", userid: "char const *", expires: "unsigned long", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_keysign(ctx, key, userid, expires, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keysign(ctx, key, userid, expires, flags)
GPGME_REVSIG_LFSEP = _gpgme.GPGME_REVSIG_LFSEP


def gpgme_op_revsig_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", signing_key: "_gpgme_key", userid: "char const *", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_revsig_start(ctx, key, signing_key, userid, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_revsig_start(ctx, key, signing_key, userid, flags)

def gpgme_op_revsig(ctx: "gpgme_ctx_t", key: "_gpgme_key", signing_key: "_gpgme_key", userid: "char const *", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_revsig(ctx, key, signing_key, userid, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_revsig(ctx, key, signing_key, userid, flags)
GPGME_INTERACT_CARD = _gpgme.GPGME_INTERACT_CARD


def gpgme_op_interact_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int", fnc: "gpgme_interact_cb_t", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_interact_start(ctx, key, flags, fnc, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_interact_start(ctx, key, flags, fnc, out)

def gpgme_op_interact(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int", fnc: "gpgme_interact_cb_t", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_interact(ctx, key, flags, fnc, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_interact(ctx, key, flags, fnc, out)

def gpgme_op_tofu_policy_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", policy: "gpgme_tofu_policy_t") -> "gpgme_error_t":
    r"""gpgme_op_tofu_policy_start(ctx, key, policy) -> gpgme_error_t"""
    return _gpgme.gpgme_op_tofu_policy_start(ctx, key, policy)

def gpgme_op_tofu_policy(ctx: "gpgme_ctx_t", key: "_gpgme_key", policy: "gpgme_tofu_policy_t") -> "gpgme_error_t":
    r"""gpgme_op_tofu_policy(ctx, key, policy) -> gpgme_error_t"""
    return _gpgme.gpgme_op_tofu_policy(ctx, key, policy)
class _gpgme_op_keylist_result(object):
    r"""Proxy of C _gpgme_op_keylist_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    truncated = property(_gpgme._gpgme_op_keylist_result_truncated_get, _gpgme._gpgme_op_keylist_result_truncated_set, doc=r"""truncated""")
    _unused = property(_gpgme._gpgme_op_keylist_result__unused_get, _gpgme._gpgme_op_keylist_result__unused_set, doc=r"""_unused""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_keylist_result"""
        _gpgme._gpgme_op_keylist_result_swiginit(self, _gpgme.new__gpgme_op_keylist_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_keylist_result

# Register _gpgme_op_keylist_result in _gpgme:
_gpgme._gpgme_op_keylist_result_swigregister(_gpgme_op_keylist_result)


def gpgme_op_keylist_result(ctx: "gpgme_ctx_t") -> "gpgme_keylist_result_t":
    r"""gpgme_op_keylist_result(ctx) -> _gpgme_op_keylist_result"""
    return _gpgme.gpgme_op_keylist_result(ctx)

def gpgme_op_keylist_ext_start(ctx: "gpgme_ctx_t", pattern: "char const *[]", secret_only: "int", reserved: "int") -> "gpgme_error_t":
    r"""gpgme_op_keylist_ext_start(ctx, pattern, secret_only, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keylist_ext_start(ctx, pattern, secret_only, reserved)

def gpgme_op_keylist_from_data_start(ctx: "gpgme_ctx_t", data: "gpgme_data_t", reserved: "int") -> "gpgme_error_t":
    r"""gpgme_op_keylist_from_data_start(ctx, data, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keylist_from_data_start(ctx, data, reserved)

def gpgme_op_keylist_next(ctx: "gpgme_ctx_t", r_key: "gpgme_key_t *") -> "gpgme_error_t":
    r"""gpgme_op_keylist_next(ctx, r_key) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keylist_next(ctx, r_key)

def gpgme_op_keylist_end(ctx: "gpgme_ctx_t") -> "gpgme_error_t":
    r"""gpgme_op_keylist_end(ctx) -> gpgme_error_t"""
    return _gpgme.gpgme_op_keylist_end(ctx)

def gpgme_op_passwd_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_passwd_start(ctx, key, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_passwd_start(ctx, key, flags)

def gpgme_op_passwd(ctx: "gpgme_ctx_t", key: "_gpgme_key", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_passwd(ctx, key, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_passwd(ctx, key, flags)
class _gpgme_trust_item(object):
    r"""Proxy of C _gpgme_trust_item struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _refs = property(_gpgme._gpgme_trust_item__refs_get, _gpgme._gpgme_trust_item__refs_set, doc=r"""_refs""")
    keyid = property(_gpgme._gpgme_trust_item_keyid_get, _gpgme._gpgme_trust_item_keyid_set, doc=r"""keyid""")
    _keyid = property(_gpgme._gpgme_trust_item__keyid_get, _gpgme._gpgme_trust_item__keyid_set, doc=r"""_keyid""")
    type = property(_gpgme._gpgme_trust_item_type_get, _gpgme._gpgme_trust_item_type_set, doc=r"""type""")
    level = property(_gpgme._gpgme_trust_item_level_get, _gpgme._gpgme_trust_item_level_set, doc=r"""level""")
    owner_trust = property(_gpgme._gpgme_trust_item_owner_trust_get, _gpgme._gpgme_trust_item_owner_trust_set, doc=r"""owner_trust""")
    _owner_trust = property(_gpgme._gpgme_trust_item__owner_trust_get, _gpgme._gpgme_trust_item__owner_trust_set, doc=r"""_owner_trust""")
    validity = property(_gpgme._gpgme_trust_item_validity_get, _gpgme._gpgme_trust_item_validity_set, doc=r"""validity""")
    _validity = property(_gpgme._gpgme_trust_item__validity_get, _gpgme._gpgme_trust_item__validity_set, doc=r"""_validity""")
    name = property(_gpgme._gpgme_trust_item_name_get, _gpgme._gpgme_trust_item_name_set, doc=r"""name""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_trust_item"""
        _gpgme._gpgme_trust_item_swiginit(self, _gpgme.new__gpgme_trust_item())
    __swig_destroy__ = _gpgme.delete__gpgme_trust_item

# Register _gpgme_trust_item in _gpgme:
_gpgme._gpgme_trust_item_swigregister(_gpgme_trust_item)


def gpgme_op_trustlist_start(ctx: "gpgme_ctx_t", pattern: "char const *", max_level: "int") -> "gpgme_error_t":
    r"""gpgme_op_trustlist_start(ctx, pattern, max_level) -> gpgme_error_t"""
    return _gpgme.gpgme_op_trustlist_start(ctx, pattern, max_level)

def gpgme_op_trustlist_next(ctx: "gpgme_ctx_t", r_item: "gpgme_trust_item_t *") -> "gpgme_error_t":
    r"""gpgme_op_trustlist_next(ctx, r_item) -> gpgme_error_t"""
    return _gpgme.gpgme_op_trustlist_next(ctx, r_item)

def gpgme_op_trustlist_end(ctx: "gpgme_ctx_t") -> "gpgme_error_t":
    r"""gpgme_op_trustlist_end(ctx) -> gpgme_error_t"""
    return _gpgme.gpgme_op_trustlist_end(ctx)

def gpgme_trust_item_ref(item: "_gpgme_trust_item") -> "void":
    r"""gpgme_trust_item_ref(item)"""
    return _gpgme.gpgme_trust_item_ref(item)

def gpgme_trust_item_unref(item: "_gpgme_trust_item") -> "void":
    r"""gpgme_trust_item_unref(item)"""
    return _gpgme.gpgme_trust_item_unref(item)

def gpgme_op_getauditlog_start(ctx: "gpgme_ctx_t", output: "gpgme_data_t", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_getauditlog_start(ctx, output, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_getauditlog_start(ctx, output, flags)

def gpgme_op_getauditlog(ctx: "gpgme_ctx_t", output: "gpgme_data_t", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_getauditlog(ctx, output, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_getauditlog(ctx, output, flags)
GPGME_SPAWN_DETACHED = _gpgme.GPGME_SPAWN_DETACHED

GPGME_SPAWN_ALLOW_SET_FG = _gpgme.GPGME_SPAWN_ALLOW_SET_FG

GPGME_SPAWN_SHOW_WINDOW = _gpgme.GPGME_SPAWN_SHOW_WINDOW


def gpgme_op_spawn_start(ctx: "gpgme_ctx_t", file: "char const *", argv: "char const *[]", datain: "gpgme_data_t", dataout: "gpgme_data_t", dataerr: "gpgme_data_t", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_spawn_start(ctx, file, argv, datain, dataout, dataerr, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_spawn_start(ctx, file, argv, datain, dataout, dataerr, flags)

def gpgme_op_spawn(ctx: "gpgme_ctx_t", file: "char const *", argv: "char const *[]", datain: "gpgme_data_t", dataout: "gpgme_data_t", dataerr: "gpgme_data_t", flags: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_spawn(ctx, file, argv, datain, dataout, dataerr, flags) -> gpgme_error_t"""
    return _gpgme.gpgme_op_spawn(ctx, file, argv, datain, dataout, dataerr, flags)

def gpgme_op_assuan_transact_start(ctx: "gpgme_ctx_t", command: "char const *", data_cb: "gpgme_assuan_data_cb_t", inq_cb: "gpgme_assuan_inquire_cb_t", stat_cb: "gpgme_assuan_status_cb_t") -> "gpgme_error_t":
    r"""gpgme_op_assuan_transact_start(ctx, command, data_cb, inq_cb, stat_cb) -> gpgme_error_t"""
    return _gpgme.gpgme_op_assuan_transact_start(ctx, command, data_cb, inq_cb, stat_cb)

def gpgme_op_assuan_transact_ext(ctx: "gpgme_ctx_t", command: "char const *", data_cb: "gpgme_assuan_data_cb_t", inq_cb: "gpgme_assuan_inquire_cb_t", stat_cb: "gpgme_assuan_status_cb_t", op_err: "gpgme_error_t *") -> "gpgme_error_t":
    r"""gpgme_op_assuan_transact_ext(ctx, command, data_cb, inq_cb, stat_cb, op_err) -> gpgme_error_t"""
    return _gpgme.gpgme_op_assuan_transact_ext(ctx, command, data_cb, inq_cb, stat_cb, op_err)
class _gpgme_op_vfs_mount_result(object):
    r"""Proxy of C _gpgme_op_vfs_mount_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mount_dir = property(_gpgme._gpgme_op_vfs_mount_result_mount_dir_get, _gpgme._gpgme_op_vfs_mount_result_mount_dir_set, doc=r"""mount_dir""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_vfs_mount_result"""
        _gpgme._gpgme_op_vfs_mount_result_swiginit(self, _gpgme.new__gpgme_op_vfs_mount_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_vfs_mount_result

# Register _gpgme_op_vfs_mount_result in _gpgme:
_gpgme._gpgme_op_vfs_mount_result_swigregister(_gpgme_op_vfs_mount_result)


def gpgme_op_vfs_mount_result(ctx: "gpgme_ctx_t") -> "gpgme_vfs_mount_result_t":
    r"""gpgme_op_vfs_mount_result(ctx) -> _gpgme_op_vfs_mount_result"""
    return _gpgme.gpgme_op_vfs_mount_result(ctx)

def gpgme_op_vfs_mount(ctx: "gpgme_ctx_t", container_file: "char const *", mount_dir: "char const *", flags: "unsigned int", op_err: "gpgme_error_t *") -> "gpgme_error_t":
    r"""gpgme_op_vfs_mount(ctx, container_file, mount_dir, flags, op_err) -> gpgme_error_t"""
    return _gpgme.gpgme_op_vfs_mount(ctx, container_file, mount_dir, flags, op_err)

def gpgme_op_vfs_create(ctx: "gpgme_ctx_t", recp: "gpgme_key_t []", container_file: "char const *", flags: "unsigned int", op_err: "gpgme_error_t *") -> "gpgme_error_t":
    r"""gpgme_op_vfs_create(ctx, recp, container_file, flags, op_err) -> gpgme_error_t"""
    return _gpgme.gpgme_op_vfs_create(ctx, recp, container_file, flags, op_err)
GPGME_CONF_BASIC = _gpgme.GPGME_CONF_BASIC

GPGME_CONF_ADVANCED = _gpgme.GPGME_CONF_ADVANCED

GPGME_CONF_EXPERT = _gpgme.GPGME_CONF_EXPERT

GPGME_CONF_INVISIBLE = _gpgme.GPGME_CONF_INVISIBLE

GPGME_CONF_INTERNAL = _gpgme.GPGME_CONF_INTERNAL

GPGME_CONF_NONE = _gpgme.GPGME_CONF_NONE

GPGME_CONF_STRING = _gpgme.GPGME_CONF_STRING

GPGME_CONF_INT32 = _gpgme.GPGME_CONF_INT32

GPGME_CONF_UINT32 = _gpgme.GPGME_CONF_UINT32

GPGME_CONF_FILENAME = _gpgme.GPGME_CONF_FILENAME

GPGME_CONF_LDAP_SERVER = _gpgme.GPGME_CONF_LDAP_SERVER

GPGME_CONF_KEY_FPR = _gpgme.GPGME_CONF_KEY_FPR

GPGME_CONF_PUB_KEY = _gpgme.GPGME_CONF_PUB_KEY

GPGME_CONF_SEC_KEY = _gpgme.GPGME_CONF_SEC_KEY

GPGME_CONF_ALIAS_LIST = _gpgme.GPGME_CONF_ALIAS_LIST

class gpgme_conf_arg(object):
    r"""Proxy of C gpgme_conf_arg struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    no_arg = property(_gpgme.gpgme_conf_arg_no_arg_get, _gpgme.gpgme_conf_arg_no_arg_set, doc=r"""no_arg""")
    value = property(_gpgme.gpgme_conf_arg_value_get, doc=r"""value""")

    def __init__(self):
        r"""__init__(self) -> gpgme_conf_arg"""
        _gpgme.gpgme_conf_arg_swiginit(self, _gpgme.new_gpgme_conf_arg())
    __swig_destroy__ = _gpgme.delete_gpgme_conf_arg

# Register gpgme_conf_arg in _gpgme:
_gpgme.gpgme_conf_arg_swigregister(gpgme_conf_arg)

class gpgme_conf_arg_value(object):
    r"""Proxy of C gpgme_conf_arg_value struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_gpgme.gpgme_conf_arg_value_count_get, _gpgme.gpgme_conf_arg_value_count_set, doc=r"""count""")
    uint32 = property(_gpgme.gpgme_conf_arg_value_uint32_get, _gpgme.gpgme_conf_arg_value_uint32_set, doc=r"""uint32""")
    int32 = property(_gpgme.gpgme_conf_arg_value_int32_get, _gpgme.gpgme_conf_arg_value_int32_set, doc=r"""int32""")
    string = property(_gpgme.gpgme_conf_arg_value_string_get, _gpgme.gpgme_conf_arg_value_string_set, doc=r"""string""")

    def __init__(self):
        r"""__init__(self) -> gpgme_conf_arg_value"""
        _gpgme.gpgme_conf_arg_value_swiginit(self, _gpgme.new_gpgme_conf_arg_value())
    __swig_destroy__ = _gpgme.delete_gpgme_conf_arg_value

# Register gpgme_conf_arg_value in _gpgme:
_gpgme.gpgme_conf_arg_value_swigregister(gpgme_conf_arg_value)

GPGME_CONF_GROUP = _gpgme.GPGME_CONF_GROUP

GPGME_CONF_OPTIONAL = _gpgme.GPGME_CONF_OPTIONAL

GPGME_CONF_LIST = _gpgme.GPGME_CONF_LIST

GPGME_CONF_RUNTIME = _gpgme.GPGME_CONF_RUNTIME

GPGME_CONF_DEFAULT = _gpgme.GPGME_CONF_DEFAULT

GPGME_CONF_DEFAULT_DESC = _gpgme.GPGME_CONF_DEFAULT_DESC

GPGME_CONF_NO_ARG_DESC = _gpgme.GPGME_CONF_NO_ARG_DESC

GPGME_CONF_NO_CHANGE = _gpgme.GPGME_CONF_NO_CHANGE

class gpgme_conf_opt(object):
    r"""Proxy of C gpgme_conf_opt struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_gpgme.gpgme_conf_opt_name_get, _gpgme.gpgme_conf_opt_name_set, doc=r"""name""")
    flags = property(_gpgme.gpgme_conf_opt_flags_get, _gpgme.gpgme_conf_opt_flags_set, doc=r"""flags""")
    level = property(_gpgme.gpgme_conf_opt_level_get, _gpgme.gpgme_conf_opt_level_set, doc=r"""level""")
    description = property(_gpgme.gpgme_conf_opt_description_get, _gpgme.gpgme_conf_opt_description_set, doc=r"""description""")
    type = property(_gpgme.gpgme_conf_opt_type_get, _gpgme.gpgme_conf_opt_type_set, doc=r"""type""")
    alt_type = property(_gpgme.gpgme_conf_opt_alt_type_get, _gpgme.gpgme_conf_opt_alt_type_set, doc=r"""alt_type""")
    argname = property(_gpgme.gpgme_conf_opt_argname_get, _gpgme.gpgme_conf_opt_argname_set, doc=r"""argname""")
    default_value = property(_gpgme.gpgme_conf_opt_default_value_get, _gpgme.gpgme_conf_opt_default_value_set, doc=r"""default_value""")
    default_description = property(_gpgme.gpgme_conf_opt_default_description_get, _gpgme.gpgme_conf_opt_default_description_set, doc=r"""default_description""")
    no_arg_value = property(_gpgme.gpgme_conf_opt_no_arg_value_get, _gpgme.gpgme_conf_opt_no_arg_value_set, doc=r"""no_arg_value""")
    no_arg_description = property(_gpgme.gpgme_conf_opt_no_arg_description_get, _gpgme.gpgme_conf_opt_no_arg_description_set, doc=r"""no_arg_description""")
    value = property(_gpgme.gpgme_conf_opt_value_get, _gpgme.gpgme_conf_opt_value_set, doc=r"""value""")
    change_value = property(_gpgme.gpgme_conf_opt_change_value_get, _gpgme.gpgme_conf_opt_change_value_set, doc=r"""change_value""")
    new_value = property(_gpgme.gpgme_conf_opt_new_value_get, _gpgme.gpgme_conf_opt_new_value_set, doc=r"""new_value""")
    user_data = property(_gpgme.gpgme_conf_opt_user_data_get, _gpgme.gpgme_conf_opt_user_data_set, doc=r"""user_data""")

    def __init__(self):
        r"""__init__(self) -> gpgme_conf_opt"""
        _gpgme.gpgme_conf_opt_swiginit(self, _gpgme.new_gpgme_conf_opt())
    __swig_destroy__ = _gpgme.delete_gpgme_conf_opt

# Register gpgme_conf_opt in _gpgme:
_gpgme.gpgme_conf_opt_swigregister(gpgme_conf_opt)

class gpgme_conf_comp(object):
    r"""Proxy of C gpgme_conf_comp struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _last_opt_p = property(_gpgme.gpgme_conf_comp__last_opt_p_get, _gpgme.gpgme_conf_comp__last_opt_p_set, doc=r"""_last_opt_p""")
    name = property(_gpgme.gpgme_conf_comp_name_get, _gpgme.gpgme_conf_comp_name_set, doc=r"""name""")
    description = property(_gpgme.gpgme_conf_comp_description_get, _gpgme.gpgme_conf_comp_description_set, doc=r"""description""")
    program_name = property(_gpgme.gpgme_conf_comp_program_name_get, _gpgme.gpgme_conf_comp_program_name_set, doc=r"""program_name""")
    options = property(_gpgme.gpgme_conf_comp_options_get, _gpgme.gpgme_conf_comp_options_set, doc=r"""options""")

    def __init__(self):
        r"""__init__(self) -> gpgme_conf_comp"""
        _gpgme.gpgme_conf_comp_swiginit(self, _gpgme.new_gpgme_conf_comp())
    __swig_destroy__ = _gpgme.delete_gpgme_conf_comp

# Register gpgme_conf_comp in _gpgme:
_gpgme.gpgme_conf_comp_swigregister(gpgme_conf_comp)


def gpgme_conf_arg_new(arg_p: "gpgme_conf_arg_t *", type: "gpgme_conf_type_t", value: "void const *") -> "gpgme_error_t":
    r"""gpgme_conf_arg_new(arg_p, type, value) -> gpgme_error_t"""
    return _gpgme.gpgme_conf_arg_new(arg_p, type, value)

def gpgme_conf_arg_release(arg: "gpgme_conf_arg", type: "gpgme_conf_type_t") -> "void":
    r"""gpgme_conf_arg_release(arg, type)"""
    return _gpgme.gpgme_conf_arg_release(arg, type)

def gpgme_conf_opt_change(opt: "gpgme_conf_opt", reset: "int", arg: "gpgme_conf_arg") -> "gpgme_error_t":
    r"""gpgme_conf_opt_change(opt, reset, arg) -> gpgme_error_t"""
    return _gpgme.gpgme_conf_opt_change(opt, reset, arg)

def gpgme_conf_release(conf: "gpgme_conf_comp") -> "void":
    r"""gpgme_conf_release(conf)"""
    return _gpgme.gpgme_conf_release(conf)

def gpgme_op_conf_load(ctx: "gpgme_ctx_t", conf_p: "gpgme_conf_comp_t *") -> "gpgme_error_t":
    r"""gpgme_op_conf_load(ctx, conf_p) -> gpgme_error_t"""
    return _gpgme.gpgme_op_conf_load(ctx, conf_p)

def gpgme_op_conf_save(ctx: "gpgme_ctx_t", comp: "gpgme_conf_comp") -> "gpgme_error_t":
    r"""gpgme_op_conf_save(ctx, comp) -> gpgme_error_t"""
    return _gpgme.gpgme_op_conf_save(ctx, comp)

def gpgme_op_conf_dir(ctx: "gpgme_ctx_t", what: "char const *", result: "char **") -> "gpgme_error_t":
    r"""gpgme_op_conf_dir(ctx, what, result) -> gpgme_error_t"""
    return _gpgme.gpgme_op_conf_dir(ctx, what, result)
class _gpgme_op_query_swdb_result(object):
    r"""Proxy of C _gpgme_op_query_swdb_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_gpgme._gpgme_op_query_swdb_result_name_get, _gpgme._gpgme_op_query_swdb_result_name_set, doc=r"""name""")
    iversion = property(_gpgme._gpgme_op_query_swdb_result_iversion_get, _gpgme._gpgme_op_query_swdb_result_iversion_set, doc=r"""iversion""")
    created = property(_gpgme._gpgme_op_query_swdb_result_created_get, _gpgme._gpgme_op_query_swdb_result_created_set, doc=r"""created""")
    retrieved = property(_gpgme._gpgme_op_query_swdb_result_retrieved_get, _gpgme._gpgme_op_query_swdb_result_retrieved_set, doc=r"""retrieved""")
    warning = property(_gpgme._gpgme_op_query_swdb_result_warning_get, _gpgme._gpgme_op_query_swdb_result_warning_set, doc=r"""warning""")
    update = property(_gpgme._gpgme_op_query_swdb_result_update_get, _gpgme._gpgme_op_query_swdb_result_update_set, doc=r"""update""")
    urgent = property(_gpgme._gpgme_op_query_swdb_result_urgent_get, _gpgme._gpgme_op_query_swdb_result_urgent_set, doc=r"""urgent""")
    noinfo = property(_gpgme._gpgme_op_query_swdb_result_noinfo_get, _gpgme._gpgme_op_query_swdb_result_noinfo_set, doc=r"""noinfo""")
    unknown = property(_gpgme._gpgme_op_query_swdb_result_unknown_get, _gpgme._gpgme_op_query_swdb_result_unknown_set, doc=r"""unknown""")
    tooold = property(_gpgme._gpgme_op_query_swdb_result_tooold_get, _gpgme._gpgme_op_query_swdb_result_tooold_set, doc=r"""tooold""")
    error = property(_gpgme._gpgme_op_query_swdb_result_error_get, _gpgme._gpgme_op_query_swdb_result_error_set, doc=r"""error""")
    _reserved = property(_gpgme._gpgme_op_query_swdb_result__reserved_get, _gpgme._gpgme_op_query_swdb_result__reserved_set, doc=r"""_reserved""")
    version = property(_gpgme._gpgme_op_query_swdb_result_version_get, _gpgme._gpgme_op_query_swdb_result_version_set, doc=r"""version""")
    reldate = property(_gpgme._gpgme_op_query_swdb_result_reldate_get, _gpgme._gpgme_op_query_swdb_result_reldate_set, doc=r"""reldate""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_query_swdb_result"""
        _gpgme._gpgme_op_query_swdb_result_swiginit(self, _gpgme.new__gpgme_op_query_swdb_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_query_swdb_result

# Register _gpgme_op_query_swdb_result in _gpgme:
_gpgme._gpgme_op_query_swdb_result_swigregister(_gpgme_op_query_swdb_result)


def gpgme_op_query_swdb(ctx: "gpgme_ctx_t", name: "char const *", iversion: "char const *", reserved: "unsigned int") -> "gpgme_error_t":
    r"""gpgme_op_query_swdb(ctx, name, iversion, reserved) -> gpgme_error_t"""
    return _gpgme.gpgme_op_query_swdb(ctx, name, iversion, reserved)

def gpgme_op_query_swdb_result(ctx: "gpgme_ctx_t") -> "gpgme_query_swdb_result_t":
    r"""gpgme_op_query_swdb_result(ctx) -> _gpgme_op_query_swdb_result"""
    return _gpgme.gpgme_op_query_swdb_result(ctx)

def gpgme_set_global_flag(name: "char const *", value: "char const *") -> "int":
    r"""gpgme_set_global_flag(name, value) -> int"""
    return _gpgme.gpgme_set_global_flag(name, value)

def gpgme_check_version(req_version: "char const *") -> "char const *":
    r"""gpgme_check_version(req_version) -> char const *"""
    return _gpgme.gpgme_check_version(req_version)

def gpgme_check_version_internal(req_version: "char const *", offset_sig_validity: "size_t") -> "char const *":
    r"""gpgme_check_version_internal(req_version, offset_sig_validity) -> char const *"""
    return _gpgme.gpgme_check_version_internal(req_version, offset_sig_validity)

def gpgme_get_dirinfo(what: "char const *") -> "char const *":
    r"""gpgme_get_dirinfo(what) -> char const *"""
    return _gpgme.gpgme_get_dirinfo(what)

def gpgme_get_engine_info(engine_info: "gpgme_engine_info_t *") -> "gpgme_error_t":
    r"""gpgme_get_engine_info(engine_info) -> gpgme_error_t"""
    return _gpgme.gpgme_get_engine_info(engine_info)

def gpgme_set_engine_info(proto: "gpgme_protocol_t", file_name: "char const *", home_dir: "char const *") -> "gpgme_error_t":
    r"""gpgme_set_engine_info(proto, file_name, home_dir) -> gpgme_error_t"""
    return _gpgme.gpgme_set_engine_info(proto, file_name, home_dir)

def gpgme_engine_check_version(proto: "gpgme_protocol_t") -> "gpgme_error_t":
    r"""gpgme_engine_check_version(proto) -> gpgme_error_t"""
    return _gpgme.gpgme_engine_check_version(proto)

def gpgme_result_ref(result: "void *") -> "void":
    r"""gpgme_result_ref(result)"""
    return _gpgme.gpgme_result_ref(result)

def gpgme_result_unref(result: "void *") -> "void":
    r"""gpgme_result_unref(result)"""
    return _gpgme.gpgme_result_unref(result)

def gpgme_pubkey_algo_string(subkey: "_gpgme_subkey") -> "char *":
    r"""gpgme_pubkey_algo_string(subkey) -> char *"""
    return _gpgme.gpgme_pubkey_algo_string(subkey)

def gpgme_pubkey_algo_name(algo: "gpgme_pubkey_algo_t") -> "char const *":
    r"""gpgme_pubkey_algo_name(algo) -> char const *"""
    return _gpgme.gpgme_pubkey_algo_name(algo)

def gpgme_hash_algo_name(algo: "gpgme_hash_algo_t") -> "char const *":
    r"""gpgme_hash_algo_name(algo) -> char const *"""
    return _gpgme.gpgme_hash_algo_name(algo)

def gpgme_addrspec_from_uid(uid: "char const *") -> "char *":
    r"""gpgme_addrspec_from_uid(uid) -> char *"""
    return _gpgme.gpgme_addrspec_from_uid(uid)
GPGME_EXPORT_MODE_NOUID = _gpgme.GPGME_EXPORT_MODE_NOUID

GPGME_STATUS_EOF = _gpgme.GPGME_STATUS_EOF

GPGME_STATUS_ENTER = _gpgme.GPGME_STATUS_ENTER

GPGME_STATUS_LEAVE = _gpgme.GPGME_STATUS_LEAVE

GPGME_STATUS_ABORT = _gpgme.GPGME_STATUS_ABORT

GPGME_STATUS_GOODSIG = _gpgme.GPGME_STATUS_GOODSIG

GPGME_STATUS_BADSIG = _gpgme.GPGME_STATUS_BADSIG

GPGME_STATUS_ERRSIG = _gpgme.GPGME_STATUS_ERRSIG

GPGME_STATUS_BADARMOR = _gpgme.GPGME_STATUS_BADARMOR

GPGME_STATUS_RSA_OR_IDEA = _gpgme.GPGME_STATUS_RSA_OR_IDEA

GPGME_STATUS_KEYEXPIRED = _gpgme.GPGME_STATUS_KEYEXPIRED

GPGME_STATUS_KEYREVOKED = _gpgme.GPGME_STATUS_KEYREVOKED

GPGME_STATUS_TRUST_UNDEFINED = _gpgme.GPGME_STATUS_TRUST_UNDEFINED

GPGME_STATUS_TRUST_NEVER = _gpgme.GPGME_STATUS_TRUST_NEVER

GPGME_STATUS_TRUST_MARGINAL = _gpgme.GPGME_STATUS_TRUST_MARGINAL

GPGME_STATUS_TRUST_FULLY = _gpgme.GPGME_STATUS_TRUST_FULLY

GPGME_STATUS_TRUST_ULTIMATE = _gpgme.GPGME_STATUS_TRUST_ULTIMATE

GPGME_STATUS_SHM_INFO = _gpgme.GPGME_STATUS_SHM_INFO

GPGME_STATUS_SHM_GET = _gpgme.GPGME_STATUS_SHM_GET

GPGME_STATUS_SHM_GET_BOOL = _gpgme.GPGME_STATUS_SHM_GET_BOOL

GPGME_STATUS_SHM_GET_HIDDEN = _gpgme.GPGME_STATUS_SHM_GET_HIDDEN

GPGME_STATUS_NEED_PASSPHRASE = _gpgme.GPGME_STATUS_NEED_PASSPHRASE

GPGME_STATUS_VALIDSIG = _gpgme.GPGME_STATUS_VALIDSIG

GPGME_STATUS_SIG_ID = _gpgme.GPGME_STATUS_SIG_ID

GPGME_STATUS_ENC_TO = _gpgme.GPGME_STATUS_ENC_TO

GPGME_STATUS_NODATA = _gpgme.GPGME_STATUS_NODATA

GPGME_STATUS_BAD_PASSPHRASE = _gpgme.GPGME_STATUS_BAD_PASSPHRASE

GPGME_STATUS_NO_PUBKEY = _gpgme.GPGME_STATUS_NO_PUBKEY

GPGME_STATUS_NO_SECKEY = _gpgme.GPGME_STATUS_NO_SECKEY

GPGME_STATUS_NEED_PASSPHRASE_SYM = _gpgme.GPGME_STATUS_NEED_PASSPHRASE_SYM

GPGME_STATUS_DECRYPTION_FAILED = _gpgme.GPGME_STATUS_DECRYPTION_FAILED

GPGME_STATUS_DECRYPTION_OKAY = _gpgme.GPGME_STATUS_DECRYPTION_OKAY

GPGME_STATUS_MISSING_PASSPHRASE = _gpgme.GPGME_STATUS_MISSING_PASSPHRASE

GPGME_STATUS_GOOD_PASSPHRASE = _gpgme.GPGME_STATUS_GOOD_PASSPHRASE

GPGME_STATUS_GOODMDC = _gpgme.GPGME_STATUS_GOODMDC

GPGME_STATUS_BADMDC = _gpgme.GPGME_STATUS_BADMDC

GPGME_STATUS_ERRMDC = _gpgme.GPGME_STATUS_ERRMDC

GPGME_STATUS_IMPORTED = _gpgme.GPGME_STATUS_IMPORTED

GPGME_STATUS_IMPORT_OK = _gpgme.GPGME_STATUS_IMPORT_OK

GPGME_STATUS_IMPORT_PROBLEM = _gpgme.GPGME_STATUS_IMPORT_PROBLEM

GPGME_STATUS_IMPORT_RES = _gpgme.GPGME_STATUS_IMPORT_RES

GPGME_STATUS_FILE_START = _gpgme.GPGME_STATUS_FILE_START

GPGME_STATUS_FILE_DONE = _gpgme.GPGME_STATUS_FILE_DONE

GPGME_STATUS_FILE_ERROR = _gpgme.GPGME_STATUS_FILE_ERROR

GPGME_STATUS_BEGIN_DECRYPTION = _gpgme.GPGME_STATUS_BEGIN_DECRYPTION

GPGME_STATUS_END_DECRYPTION = _gpgme.GPGME_STATUS_END_DECRYPTION

GPGME_STATUS_BEGIN_ENCRYPTION = _gpgme.GPGME_STATUS_BEGIN_ENCRYPTION

GPGME_STATUS_END_ENCRYPTION = _gpgme.GPGME_STATUS_END_ENCRYPTION

GPGME_STATUS_DELETE_PROBLEM = _gpgme.GPGME_STATUS_DELETE_PROBLEM

GPGME_STATUS_GET_BOOL = _gpgme.GPGME_STATUS_GET_BOOL

GPGME_STATUS_GET_LINE = _gpgme.GPGME_STATUS_GET_LINE

GPGME_STATUS_GET_HIDDEN = _gpgme.GPGME_STATUS_GET_HIDDEN

GPGME_STATUS_GOT_IT = _gpgme.GPGME_STATUS_GOT_IT

GPGME_STATUS_PROGRESS = _gpgme.GPGME_STATUS_PROGRESS

GPGME_STATUS_SIG_CREATED = _gpgme.GPGME_STATUS_SIG_CREATED

GPGME_STATUS_SESSION_KEY = _gpgme.GPGME_STATUS_SESSION_KEY

GPGME_STATUS_NOTATION_NAME = _gpgme.GPGME_STATUS_NOTATION_NAME

GPGME_STATUS_NOTATION_DATA = _gpgme.GPGME_STATUS_NOTATION_DATA

GPGME_STATUS_POLICY_URL = _gpgme.GPGME_STATUS_POLICY_URL

GPGME_STATUS_BEGIN_STREAM = _gpgme.GPGME_STATUS_BEGIN_STREAM

GPGME_STATUS_END_STREAM = _gpgme.GPGME_STATUS_END_STREAM

GPGME_STATUS_KEY_CREATED = _gpgme.GPGME_STATUS_KEY_CREATED

GPGME_STATUS_USERID_HINT = _gpgme.GPGME_STATUS_USERID_HINT

GPGME_STATUS_UNEXPECTED = _gpgme.GPGME_STATUS_UNEXPECTED

GPGME_STATUS_INV_RECP = _gpgme.GPGME_STATUS_INV_RECP

GPGME_STATUS_NO_RECP = _gpgme.GPGME_STATUS_NO_RECP

GPGME_STATUS_ALREADY_SIGNED = _gpgme.GPGME_STATUS_ALREADY_SIGNED

GPGME_STATUS_SIGEXPIRED = _gpgme.GPGME_STATUS_SIGEXPIRED

GPGME_STATUS_EXPSIG = _gpgme.GPGME_STATUS_EXPSIG

GPGME_STATUS_EXPKEYSIG = _gpgme.GPGME_STATUS_EXPKEYSIG

GPGME_STATUS_TRUNCATED = _gpgme.GPGME_STATUS_TRUNCATED

GPGME_STATUS_ERROR = _gpgme.GPGME_STATUS_ERROR

GPGME_STATUS_NEWSIG = _gpgme.GPGME_STATUS_NEWSIG

GPGME_STATUS_REVKEYSIG = _gpgme.GPGME_STATUS_REVKEYSIG

GPGME_STATUS_SIG_SUBPACKET = _gpgme.GPGME_STATUS_SIG_SUBPACKET

GPGME_STATUS_NEED_PASSPHRASE_PIN = _gpgme.GPGME_STATUS_NEED_PASSPHRASE_PIN

GPGME_STATUS_SC_OP_FAILURE = _gpgme.GPGME_STATUS_SC_OP_FAILURE

GPGME_STATUS_SC_OP_SUCCESS = _gpgme.GPGME_STATUS_SC_OP_SUCCESS

GPGME_STATUS_CARDCTRL = _gpgme.GPGME_STATUS_CARDCTRL

GPGME_STATUS_BACKUP_KEY_CREATED = _gpgme.GPGME_STATUS_BACKUP_KEY_CREATED

GPGME_STATUS_PKA_TRUST_BAD = _gpgme.GPGME_STATUS_PKA_TRUST_BAD

GPGME_STATUS_PKA_TRUST_GOOD = _gpgme.GPGME_STATUS_PKA_TRUST_GOOD

GPGME_STATUS_PLAINTEXT = _gpgme.GPGME_STATUS_PLAINTEXT

GPGME_STATUS_INV_SGNR = _gpgme.GPGME_STATUS_INV_SGNR

GPGME_STATUS_NO_SGNR = _gpgme.GPGME_STATUS_NO_SGNR

GPGME_STATUS_SUCCESS = _gpgme.GPGME_STATUS_SUCCESS

GPGME_STATUS_DECRYPTION_INFO = _gpgme.GPGME_STATUS_DECRYPTION_INFO

GPGME_STATUS_PLAINTEXT_LENGTH = _gpgme.GPGME_STATUS_PLAINTEXT_LENGTH

GPGME_STATUS_MOUNTPOINT = _gpgme.GPGME_STATUS_MOUNTPOINT

GPGME_STATUS_PINENTRY_LAUNCHED = _gpgme.GPGME_STATUS_PINENTRY_LAUNCHED

GPGME_STATUS_ATTRIBUTE = _gpgme.GPGME_STATUS_ATTRIBUTE

GPGME_STATUS_BEGIN_SIGNING = _gpgme.GPGME_STATUS_BEGIN_SIGNING

GPGME_STATUS_KEY_NOT_CREATED = _gpgme.GPGME_STATUS_KEY_NOT_CREATED

GPGME_STATUS_INQUIRE_MAXLEN = _gpgme.GPGME_STATUS_INQUIRE_MAXLEN

GPGME_STATUS_FAILURE = _gpgme.GPGME_STATUS_FAILURE

GPGME_STATUS_KEY_CONSIDERED = _gpgme.GPGME_STATUS_KEY_CONSIDERED

GPGME_STATUS_TOFU_USER = _gpgme.GPGME_STATUS_TOFU_USER

GPGME_STATUS_TOFU_STATS = _gpgme.GPGME_STATUS_TOFU_STATS

GPGME_STATUS_TOFU_STATS_LONG = _gpgme.GPGME_STATUS_TOFU_STATS_LONG

GPGME_STATUS_NOTATION_FLAGS = _gpgme.GPGME_STATUS_NOTATION_FLAGS

GPGME_STATUS_DECRYPTION_COMPLIANCE_MODE = _gpgme.GPGME_STATUS_DECRYPTION_COMPLIANCE_MODE

GPGME_STATUS_VERIFICATION_COMPLIANCE_MODE = _gpgme.GPGME_STATUS_VERIFICATION_COMPLIANCE_MODE

GPGME_STATUS_CANCELED_BY_USER = _gpgme.GPGME_STATUS_CANCELED_BY_USER


def gpgme_op_edit_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", fnc: "gpgme_edit_cb_t", fnc_value: "void *", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_edit_start(ctx, key, fnc, fnc_value, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_edit_start(ctx, key, fnc, fnc_value, out)

def gpgme_op_edit(ctx: "gpgme_ctx_t", key: "_gpgme_key", fnc: "gpgme_edit_cb_t", fnc_value: "void *", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_edit(ctx, key, fnc, fnc_value, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_edit(ctx, key, fnc, fnc_value, out)

def gpgme_op_card_edit_start(ctx: "gpgme_ctx_t", key: "_gpgme_key", fnc: "gpgme_edit_cb_t", fnc_value: "void *", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_card_edit_start(ctx, key, fnc, fnc_value, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_card_edit_start(ctx, key, fnc, fnc_value, out)

def gpgme_op_card_edit(ctx: "gpgme_ctx_t", key: "_gpgme_key", fnc: "gpgme_edit_cb_t", fnc_value: "void *", out: "gpgme_data_t") -> "gpgme_error_t":
    r"""gpgme_op_card_edit(ctx, key, fnc, fnc_value, out) -> gpgme_error_t"""
    return _gpgme.gpgme_op_card_edit(ctx, key, fnc, fnc_value, out)
GPGME_SIG_STAT_NONE = _gpgme.GPGME_SIG_STAT_NONE

GPGME_SIG_STAT_GOOD = _gpgme.GPGME_SIG_STAT_GOOD

GPGME_SIG_STAT_BAD = _gpgme.GPGME_SIG_STAT_BAD

GPGME_SIG_STAT_NOKEY = _gpgme.GPGME_SIG_STAT_NOKEY

GPGME_SIG_STAT_NOSIG = _gpgme.GPGME_SIG_STAT_NOSIG

GPGME_SIG_STAT_ERROR = _gpgme.GPGME_SIG_STAT_ERROR

GPGME_SIG_STAT_DIFF = _gpgme.GPGME_SIG_STAT_DIFF

GPGME_SIG_STAT_GOOD_EXP = _gpgme.GPGME_SIG_STAT_GOOD_EXP

GPGME_SIG_STAT_GOOD_EXPKEY = _gpgme.GPGME_SIG_STAT_GOOD_EXPKEY

GPGME_ATTR_KEYID = _gpgme.GPGME_ATTR_KEYID

GPGME_ATTR_FPR = _gpgme.GPGME_ATTR_FPR

GPGME_ATTR_ALGO = _gpgme.GPGME_ATTR_ALGO

GPGME_ATTR_LEN = _gpgme.GPGME_ATTR_LEN

GPGME_ATTR_CREATED = _gpgme.GPGME_ATTR_CREATED

GPGME_ATTR_EXPIRE = _gpgme.GPGME_ATTR_EXPIRE

GPGME_ATTR_OTRUST = _gpgme.GPGME_ATTR_OTRUST

GPGME_ATTR_USERID = _gpgme.GPGME_ATTR_USERID

GPGME_ATTR_NAME = _gpgme.GPGME_ATTR_NAME

GPGME_ATTR_EMAIL = _gpgme.GPGME_ATTR_EMAIL

GPGME_ATTR_COMMENT = _gpgme.GPGME_ATTR_COMMENT

GPGME_ATTR_VALIDITY = _gpgme.GPGME_ATTR_VALIDITY

GPGME_ATTR_LEVEL = _gpgme.GPGME_ATTR_LEVEL

GPGME_ATTR_TYPE = _gpgme.GPGME_ATTR_TYPE

GPGME_ATTR_IS_SECRET = _gpgme.GPGME_ATTR_IS_SECRET

GPGME_ATTR_KEY_REVOKED = _gpgme.GPGME_ATTR_KEY_REVOKED

GPGME_ATTR_KEY_INVALID = _gpgme.GPGME_ATTR_KEY_INVALID

GPGME_ATTR_UID_REVOKED = _gpgme.GPGME_ATTR_UID_REVOKED

GPGME_ATTR_UID_INVALID = _gpgme.GPGME_ATTR_UID_INVALID

GPGME_ATTR_KEY_CAPS = _gpgme.GPGME_ATTR_KEY_CAPS

GPGME_ATTR_CAN_ENCRYPT = _gpgme.GPGME_ATTR_CAN_ENCRYPT

GPGME_ATTR_CAN_SIGN = _gpgme.GPGME_ATTR_CAN_SIGN

GPGME_ATTR_CAN_CERTIFY = _gpgme.GPGME_ATTR_CAN_CERTIFY

GPGME_ATTR_KEY_EXPIRED = _gpgme.GPGME_ATTR_KEY_EXPIRED

GPGME_ATTR_KEY_DISABLED = _gpgme.GPGME_ATTR_KEY_DISABLED

GPGME_ATTR_SERIAL = _gpgme.GPGME_ATTR_SERIAL

GPGME_ATTR_ISSUER = _gpgme.GPGME_ATTR_ISSUER

GPGME_ATTR_CHAINID = _gpgme.GPGME_ATTR_CHAINID

GPGME_ATTR_SIG_STATUS = _gpgme.GPGME_ATTR_SIG_STATUS

GPGME_ATTR_ERRTOK = _gpgme.GPGME_ATTR_ERRTOK

GPGME_ATTR_SIG_SUMMARY = _gpgme.GPGME_ATTR_SIG_SUMMARY

GPGME_ATTR_SIG_CLASS = _gpgme.GPGME_ATTR_SIG_CLASS


def gpgme_get_sig_status(ctx: "gpgme_ctx_t", idx: "int", r_stat: "_gpgme_sig_stat_t *", r_created: "time_t *") -> "char const *":
    r"""gpgme_get_sig_status(ctx, idx, r_stat, r_created) -> char const *"""
    return _gpgme.gpgme_get_sig_status(ctx, idx, r_stat, r_created)

def gpgme_get_sig_ulong_attr(c: "gpgme_ctx_t", idx: "int", what: "_gpgme_attr_t", whatidx: "int") -> "unsigned long":
    r"""gpgme_get_sig_ulong_attr(c, idx, what, whatidx) -> unsigned long"""
    return _gpgme.gpgme_get_sig_ulong_attr(c, idx, what, whatidx)

def gpgme_get_sig_string_attr(c: "gpgme_ctx_t", idx: "int", what: "_gpgme_attr_t", whatidx: "int") -> "char const *":
    r"""gpgme_get_sig_string_attr(c, idx, what, whatidx) -> char const *"""
    return _gpgme.gpgme_get_sig_string_attr(c, idx, what, whatidx)

def gpgme_get_sig_key(ctx: "gpgme_ctx_t", idx: "int", r_key: "gpgme_key_t *") -> "gpgme_error_t":
    r"""gpgme_get_sig_key(ctx, idx, r_key) -> gpgme_error_t"""
    return _gpgme.gpgme_get_sig_key(ctx, idx, r_key)

def gpgme_data_new_with_read_cb(r_dh: "gpgme_data_t *", read_cb: "int (*)(void *,char *,size_t,size_t *)", read_cb_value: "void *") -> "gpgme_error_t":
    r"""gpgme_data_new_with_read_cb(r_dh, read_cb, read_cb_value) -> gpgme_error_t"""
    return _gpgme.gpgme_data_new_with_read_cb(r_dh, read_cb, read_cb_value)

def gpgme_key_get_string_attr(key: "_gpgme_key", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "char const *":
    r"""gpgme_key_get_string_attr(key, what, reserved, idx) -> char const *"""
    return _gpgme.gpgme_key_get_string_attr(key, what, reserved, idx)

def gpgme_key_get_ulong_attr(key: "_gpgme_key", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "unsigned long":
    r"""gpgme_key_get_ulong_attr(key, what, reserved, idx) -> unsigned long"""
    return _gpgme.gpgme_key_get_ulong_attr(key, what, reserved, idx)

def gpgme_key_sig_get_string_attr(key: "_gpgme_key", uid_idx: "int", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "char const *":
    r"""gpgme_key_sig_get_string_attr(key, uid_idx, what, reserved, idx) -> char const *"""
    return _gpgme.gpgme_key_sig_get_string_attr(key, uid_idx, what, reserved, idx)

def gpgme_key_sig_get_ulong_attr(key: "_gpgme_key", uid_idx: "int", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "unsigned long":
    r"""gpgme_key_sig_get_ulong_attr(key, uid_idx, what, reserved, idx) -> unsigned long"""
    return _gpgme.gpgme_key_sig_get_ulong_attr(key, uid_idx, what, reserved, idx)

def gpgme_op_import_ext(ctx: "gpgme_ctx_t", keydata: "gpgme_data_t", nr: "int *") -> "gpgme_error_t":
    r"""gpgme_op_import_ext(ctx, keydata, nr) -> gpgme_error_t"""
    return _gpgme.gpgme_op_import_ext(ctx, keydata, nr)

def gpgme_trust_item_release(item: "_gpgme_trust_item") -> "void":
    r"""gpgme_trust_item_release(item)"""
    return _gpgme.gpgme_trust_item_release(item)

def gpgme_trust_item_get_string_attr(item: "_gpgme_trust_item", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "char const *":
    r"""gpgme_trust_item_get_string_attr(item, what, reserved, idx) -> char const *"""
    return _gpgme.gpgme_trust_item_get_string_attr(item, what, reserved, idx)

def gpgme_trust_item_get_int_attr(item: "_gpgme_trust_item", what: "_gpgme_attr_t", reserved: "void const *", idx: "int") -> "int":
    r"""gpgme_trust_item_get_int_attr(item, what, reserved, idx) -> int"""
    return _gpgme.gpgme_trust_item_get_int_attr(item, what, reserved, idx)
class _gpgme_op_assuan_result(object):
    r"""Proxy of C _gpgme_op_assuan_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    err = property(_gpgme._gpgme_op_assuan_result_err_get, _gpgme._gpgme_op_assuan_result_err_set, doc=r"""err""")

    def __init__(self):
        r"""__init__(self) -> _gpgme_op_assuan_result"""
        _gpgme._gpgme_op_assuan_result_swiginit(self, _gpgme.new__gpgme_op_assuan_result())
    __swig_destroy__ = _gpgme.delete__gpgme_op_assuan_result

# Register _gpgme_op_assuan_result in _gpgme:
_gpgme._gpgme_op_assuan_result_swigregister(_gpgme_op_assuan_result)


def gpgme_op_assuan_result(ctx: "gpgme_ctx_t") -> "gpgme_assuan_result_t":
    r"""gpgme_op_assuan_result(ctx) -> _gpgme_op_assuan_result"""
    return _gpgme.gpgme_op_assuan_result(ctx)

def gpgme_op_assuan_transact(ctx: "gpgme_ctx_t", command: "char const *", data_cb: "gpgme_assuan_data_cb_t", inq_cb: "gpgme_assuan_inquire_cb_t", status_cb: "gpgme_assuan_status_cb_t", status_cb_value: "void *") -> "gpgme_error_t":
    r"""gpgme_op_assuan_transact(ctx, command, data_cb, inq_cb, status_cb, status_cb_value) -> gpgme_error_t"""
    return _gpgme.gpgme_op_assuan_transact(ctx, command, data_cb, inq_cb, status_cb, status_cb_value)
GPG_ERR_SOURCE_UNKNOWN = _gpgme.GPG_ERR_SOURCE_UNKNOWN

GPG_ERR_SOURCE_GCRYPT = _gpgme.GPG_ERR_SOURCE_GCRYPT

GPG_ERR_SOURCE_GPG = _gpgme.GPG_ERR_SOURCE_GPG

GPG_ERR_SOURCE_GPGSM = _gpgme.GPG_ERR_SOURCE_GPGSM

GPG_ERR_SOURCE_GPGAGENT = _gpgme.GPG_ERR_SOURCE_GPGAGENT

GPG_ERR_SOURCE_PINENTRY = _gpgme.GPG_ERR_SOURCE_PINENTRY

GPG_ERR_SOURCE_SCD = _gpgme.GPG_ERR_SOURCE_SCD

GPG_ERR_SOURCE_GPGME = _gpgme.GPG_ERR_SOURCE_GPGME

GPG_ERR_SOURCE_KEYBOX = _gpgme.GPG_ERR_SOURCE_KEYBOX

GPG_ERR_SOURCE_KSBA = _gpgme.GPG_ERR_SOURCE_KSBA

GPG_ERR_SOURCE_DIRMNGR = _gpgme.GPG_ERR_SOURCE_DIRMNGR

GPG_ERR_SOURCE_GSTI = _gpgme.GPG_ERR_SOURCE_GSTI

GPG_ERR_SOURCE_GPA = _gpgme.GPG_ERR_SOURCE_GPA

GPG_ERR_SOURCE_KLEO = _gpgme.GPG_ERR_SOURCE_KLEO

GPG_ERR_SOURCE_G13 = _gpgme.GPG_ERR_SOURCE_G13

GPG_ERR_SOURCE_ASSUAN = _gpgme.GPG_ERR_SOURCE_ASSUAN

GPG_ERR_SOURCE_TPM2D = _gpgme.GPG_ERR_SOURCE_TPM2D

GPG_ERR_SOURCE_TLS = _gpgme.GPG_ERR_SOURCE_TLS

GPG_ERR_SOURCE_ANY = _gpgme.GPG_ERR_SOURCE_ANY

GPG_ERR_SOURCE_USER_1 = _gpgme.GPG_ERR_SOURCE_USER_1

GPG_ERR_SOURCE_USER_2 = _gpgme.GPG_ERR_SOURCE_USER_2

GPG_ERR_SOURCE_USER_3 = _gpgme.GPG_ERR_SOURCE_USER_3

GPG_ERR_SOURCE_USER_4 = _gpgme.GPG_ERR_SOURCE_USER_4

GPG_ERR_SOURCE_DIM = _gpgme.GPG_ERR_SOURCE_DIM

GPG_ERR_NO_ERROR = _gpgme.GPG_ERR_NO_ERROR

GPG_ERR_GENERAL = _gpgme.GPG_ERR_GENERAL

GPG_ERR_UNKNOWN_PACKET = _gpgme.GPG_ERR_UNKNOWN_PACKET

GPG_ERR_UNKNOWN_VERSION = _gpgme.GPG_ERR_UNKNOWN_VERSION

GPG_ERR_PUBKEY_ALGO = _gpgme.GPG_ERR_PUBKEY_ALGO

GPG_ERR_DIGEST_ALGO = _gpgme.GPG_ERR_DIGEST_ALGO

GPG_ERR_BAD_PUBKEY = _gpgme.GPG_ERR_BAD_PUBKEY

GPG_ERR_BAD_SECKEY = _gpgme.GPG_ERR_BAD_SECKEY

GPG_ERR_BAD_SIGNATURE = _gpgme.GPG_ERR_BAD_SIGNATURE

GPG_ERR_NO_PUBKEY = _gpgme.GPG_ERR_NO_PUBKEY

GPG_ERR_CHECKSUM = _gpgme.GPG_ERR_CHECKSUM

GPG_ERR_BAD_PASSPHRASE = _gpgme.GPG_ERR_BAD_PASSPHRASE

GPG_ERR_CIPHER_ALGO = _gpgme.GPG_ERR_CIPHER_ALGO

GPG_ERR_KEYRING_OPEN = _gpgme.GPG_ERR_KEYRING_OPEN

GPG_ERR_INV_PACKET = _gpgme.GPG_ERR_INV_PACKET

GPG_ERR_INV_ARMOR = _gpgme.GPG_ERR_INV_ARMOR

GPG_ERR_NO_USER_ID = _gpgme.GPG_ERR_NO_USER_ID

GPG_ERR_NO_SECKEY = _gpgme.GPG_ERR_NO_SECKEY

GPG_ERR_WRONG_SECKEY = _gpgme.GPG_ERR_WRONG_SECKEY

GPG_ERR_BAD_KEY = _gpgme.GPG_ERR_BAD_KEY

GPG_ERR_COMPR_ALGO = _gpgme.GPG_ERR_COMPR_ALGO

GPG_ERR_NO_PRIME = _gpgme.GPG_ERR_NO_PRIME

GPG_ERR_NO_ENCODING_METHOD = _gpgme.GPG_ERR_NO_ENCODING_METHOD

GPG_ERR_NO_ENCRYPTION_SCHEME = _gpgme.GPG_ERR_NO_ENCRYPTION_SCHEME

GPG_ERR_NO_SIGNATURE_SCHEME = _gpgme.GPG_ERR_NO_SIGNATURE_SCHEME

GPG_ERR_INV_ATTR = _gpgme.GPG_ERR_INV_ATTR

GPG_ERR_NO_VALUE = _gpgme.GPG_ERR_NO_VALUE

GPG_ERR_NOT_FOUND = _gpgme.GPG_ERR_NOT_FOUND

GPG_ERR_VALUE_NOT_FOUND = _gpgme.GPG_ERR_VALUE_NOT_FOUND

GPG_ERR_SYNTAX = _gpgme.GPG_ERR_SYNTAX

GPG_ERR_BAD_MPI = _gpgme.GPG_ERR_BAD_MPI

GPG_ERR_INV_PASSPHRASE = _gpgme.GPG_ERR_INV_PASSPHRASE

GPG_ERR_SIG_CLASS = _gpgme.GPG_ERR_SIG_CLASS

GPG_ERR_RESOURCE_LIMIT = _gpgme.GPG_ERR_RESOURCE_LIMIT

GPG_ERR_INV_KEYRING = _gpgme.GPG_ERR_INV_KEYRING

GPG_ERR_TRUSTDB = _gpgme.GPG_ERR_TRUSTDB

GPG_ERR_BAD_CERT = _gpgme.GPG_ERR_BAD_CERT

GPG_ERR_INV_USER_ID = _gpgme.GPG_ERR_INV_USER_ID

GPG_ERR_UNEXPECTED = _gpgme.GPG_ERR_UNEXPECTED

GPG_ERR_TIME_CONFLICT = _gpgme.GPG_ERR_TIME_CONFLICT

GPG_ERR_KEYSERVER = _gpgme.GPG_ERR_KEYSERVER

GPG_ERR_WRONG_PUBKEY_ALGO = _gpgme.GPG_ERR_WRONG_PUBKEY_ALGO

GPG_ERR_TRIBUTE_TO_D_A = _gpgme.GPG_ERR_TRIBUTE_TO_D_A

GPG_ERR_WEAK_KEY = _gpgme.GPG_ERR_WEAK_KEY

GPG_ERR_INV_KEYLEN = _gpgme.GPG_ERR_INV_KEYLEN

GPG_ERR_INV_ARG = _gpgme.GPG_ERR_INV_ARG

GPG_ERR_BAD_URI = _gpgme.GPG_ERR_BAD_URI

GPG_ERR_INV_URI = _gpgme.GPG_ERR_INV_URI

GPG_ERR_NETWORK = _gpgme.GPG_ERR_NETWORK

GPG_ERR_UNKNOWN_HOST = _gpgme.GPG_ERR_UNKNOWN_HOST

GPG_ERR_SELFTEST_FAILED = _gpgme.GPG_ERR_SELFTEST_FAILED

GPG_ERR_NOT_ENCRYPTED = _gpgme.GPG_ERR_NOT_ENCRYPTED

GPG_ERR_NOT_PROCESSED = _gpgme.GPG_ERR_NOT_PROCESSED

GPG_ERR_UNUSABLE_PUBKEY = _gpgme.GPG_ERR_UNUSABLE_PUBKEY

GPG_ERR_UNUSABLE_SECKEY = _gpgme.GPG_ERR_UNUSABLE_SECKEY

GPG_ERR_INV_VALUE = _gpgme.GPG_ERR_INV_VALUE

GPG_ERR_BAD_CERT_CHAIN = _gpgme.GPG_ERR_BAD_CERT_CHAIN

GPG_ERR_MISSING_CERT = _gpgme.GPG_ERR_MISSING_CERT

GPG_ERR_NO_DATA = _gpgme.GPG_ERR_NO_DATA

GPG_ERR_BUG = _gpgme.GPG_ERR_BUG

GPG_ERR_NOT_SUPPORTED = _gpgme.GPG_ERR_NOT_SUPPORTED

GPG_ERR_INV_OP = _gpgme.GPG_ERR_INV_OP

GPG_ERR_TIMEOUT = _gpgme.GPG_ERR_TIMEOUT

GPG_ERR_INTERNAL = _gpgme.GPG_ERR_INTERNAL

GPG_ERR_EOF_GCRYPT = _gpgme.GPG_ERR_EOF_GCRYPT

GPG_ERR_INV_OBJ = _gpgme.GPG_ERR_INV_OBJ

GPG_ERR_TOO_SHORT = _gpgme.GPG_ERR_TOO_SHORT

GPG_ERR_TOO_LARGE = _gpgme.GPG_ERR_TOO_LARGE

GPG_ERR_NO_OBJ = _gpgme.GPG_ERR_NO_OBJ

GPG_ERR_NOT_IMPLEMENTED = _gpgme.GPG_ERR_NOT_IMPLEMENTED

GPG_ERR_CONFLICT = _gpgme.GPG_ERR_CONFLICT

GPG_ERR_INV_CIPHER_MODE = _gpgme.GPG_ERR_INV_CIPHER_MODE

GPG_ERR_INV_FLAG = _gpgme.GPG_ERR_INV_FLAG

GPG_ERR_INV_HANDLE = _gpgme.GPG_ERR_INV_HANDLE

GPG_ERR_TRUNCATED = _gpgme.GPG_ERR_TRUNCATED

GPG_ERR_INCOMPLETE_LINE = _gpgme.GPG_ERR_INCOMPLETE_LINE

GPG_ERR_INV_RESPONSE = _gpgme.GPG_ERR_INV_RESPONSE

GPG_ERR_NO_AGENT = _gpgme.GPG_ERR_NO_AGENT

GPG_ERR_AGENT = _gpgme.GPG_ERR_AGENT

GPG_ERR_INV_DATA = _gpgme.GPG_ERR_INV_DATA

GPG_ERR_ASSUAN_SERVER_FAULT = _gpgme.GPG_ERR_ASSUAN_SERVER_FAULT

GPG_ERR_ASSUAN = _gpgme.GPG_ERR_ASSUAN

GPG_ERR_INV_SESSION_KEY = _gpgme.GPG_ERR_INV_SESSION_KEY

GPG_ERR_INV_SEXP = _gpgme.GPG_ERR_INV_SEXP

GPG_ERR_UNSUPPORTED_ALGORITHM = _gpgme.GPG_ERR_UNSUPPORTED_ALGORITHM

GPG_ERR_NO_PIN_ENTRY = _gpgme.GPG_ERR_NO_PIN_ENTRY

GPG_ERR_PIN_ENTRY = _gpgme.GPG_ERR_PIN_ENTRY

GPG_ERR_BAD_PIN = _gpgme.GPG_ERR_BAD_PIN

GPG_ERR_INV_NAME = _gpgme.GPG_ERR_INV_NAME

GPG_ERR_BAD_DATA = _gpgme.GPG_ERR_BAD_DATA

GPG_ERR_INV_PARAMETER = _gpgme.GPG_ERR_INV_PARAMETER

GPG_ERR_WRONG_CARD = _gpgme.GPG_ERR_WRONG_CARD

GPG_ERR_NO_DIRMNGR = _gpgme.GPG_ERR_NO_DIRMNGR

GPG_ERR_DIRMNGR = _gpgme.GPG_ERR_DIRMNGR

GPG_ERR_CERT_REVOKED = _gpgme.GPG_ERR_CERT_REVOKED

GPG_ERR_NO_CRL_KNOWN = _gpgme.GPG_ERR_NO_CRL_KNOWN

GPG_ERR_CRL_TOO_OLD = _gpgme.GPG_ERR_CRL_TOO_OLD

GPG_ERR_LINE_TOO_LONG = _gpgme.GPG_ERR_LINE_TOO_LONG

GPG_ERR_NOT_TRUSTED = _gpgme.GPG_ERR_NOT_TRUSTED

GPG_ERR_CANCELED = _gpgme.GPG_ERR_CANCELED

GPG_ERR_BAD_CA_CERT = _gpgme.GPG_ERR_BAD_CA_CERT

GPG_ERR_CERT_EXPIRED = _gpgme.GPG_ERR_CERT_EXPIRED

GPG_ERR_CERT_TOO_YOUNG = _gpgme.GPG_ERR_CERT_TOO_YOUNG

GPG_ERR_UNSUPPORTED_CERT = _gpgme.GPG_ERR_UNSUPPORTED_CERT

GPG_ERR_UNKNOWN_SEXP = _gpgme.GPG_ERR_UNKNOWN_SEXP

GPG_ERR_UNSUPPORTED_PROTECTION = _gpgme.GPG_ERR_UNSUPPORTED_PROTECTION

GPG_ERR_CORRUPTED_PROTECTION = _gpgme.GPG_ERR_CORRUPTED_PROTECTION

GPG_ERR_AMBIGUOUS_NAME = _gpgme.GPG_ERR_AMBIGUOUS_NAME

GPG_ERR_CARD = _gpgme.GPG_ERR_CARD

GPG_ERR_CARD_RESET = _gpgme.GPG_ERR_CARD_RESET

GPG_ERR_CARD_REMOVED = _gpgme.GPG_ERR_CARD_REMOVED

GPG_ERR_INV_CARD = _gpgme.GPG_ERR_INV_CARD

GPG_ERR_CARD_NOT_PRESENT = _gpgme.GPG_ERR_CARD_NOT_PRESENT

GPG_ERR_NO_PKCS15_APP = _gpgme.GPG_ERR_NO_PKCS15_APP

GPG_ERR_NOT_CONFIRMED = _gpgme.GPG_ERR_NOT_CONFIRMED

GPG_ERR_CONFIGURATION = _gpgme.GPG_ERR_CONFIGURATION

GPG_ERR_NO_POLICY_MATCH = _gpgme.GPG_ERR_NO_POLICY_MATCH

GPG_ERR_INV_INDEX = _gpgme.GPG_ERR_INV_INDEX

GPG_ERR_INV_ID = _gpgme.GPG_ERR_INV_ID

GPG_ERR_NO_SCDAEMON = _gpgme.GPG_ERR_NO_SCDAEMON

GPG_ERR_SCDAEMON = _gpgme.GPG_ERR_SCDAEMON

GPG_ERR_UNSUPPORTED_PROTOCOL = _gpgme.GPG_ERR_UNSUPPORTED_PROTOCOL

GPG_ERR_BAD_PIN_METHOD = _gpgme.GPG_ERR_BAD_PIN_METHOD

GPG_ERR_CARD_NOT_INITIALIZED = _gpgme.GPG_ERR_CARD_NOT_INITIALIZED

GPG_ERR_UNSUPPORTED_OPERATION = _gpgme.GPG_ERR_UNSUPPORTED_OPERATION

GPG_ERR_WRONG_KEY_USAGE = _gpgme.GPG_ERR_WRONG_KEY_USAGE

GPG_ERR_NOTHING_FOUND = _gpgme.GPG_ERR_NOTHING_FOUND

GPG_ERR_WRONG_BLOB_TYPE = _gpgme.GPG_ERR_WRONG_BLOB_TYPE

GPG_ERR_MISSING_VALUE = _gpgme.GPG_ERR_MISSING_VALUE

GPG_ERR_HARDWARE = _gpgme.GPG_ERR_HARDWARE

GPG_ERR_PIN_BLOCKED = _gpgme.GPG_ERR_PIN_BLOCKED

GPG_ERR_USE_CONDITIONS = _gpgme.GPG_ERR_USE_CONDITIONS

GPG_ERR_PIN_NOT_SYNCED = _gpgme.GPG_ERR_PIN_NOT_SYNCED

GPG_ERR_INV_CRL = _gpgme.GPG_ERR_INV_CRL

GPG_ERR_BAD_BER = _gpgme.GPG_ERR_BAD_BER

GPG_ERR_INV_BER = _gpgme.GPG_ERR_INV_BER

GPG_ERR_ELEMENT_NOT_FOUND = _gpgme.GPG_ERR_ELEMENT_NOT_FOUND

GPG_ERR_IDENTIFIER_NOT_FOUND = _gpgme.GPG_ERR_IDENTIFIER_NOT_FOUND

GPG_ERR_INV_TAG = _gpgme.GPG_ERR_INV_TAG

GPG_ERR_INV_LENGTH = _gpgme.GPG_ERR_INV_LENGTH

GPG_ERR_INV_KEYINFO = _gpgme.GPG_ERR_INV_KEYINFO

GPG_ERR_UNEXPECTED_TAG = _gpgme.GPG_ERR_UNEXPECTED_TAG

GPG_ERR_NOT_DER_ENCODED = _gpgme.GPG_ERR_NOT_DER_ENCODED

GPG_ERR_NO_CMS_OBJ = _gpgme.GPG_ERR_NO_CMS_OBJ

GPG_ERR_INV_CMS_OBJ = _gpgme.GPG_ERR_INV_CMS_OBJ

GPG_ERR_UNKNOWN_CMS_OBJ = _gpgme.GPG_ERR_UNKNOWN_CMS_OBJ

GPG_ERR_UNSUPPORTED_CMS_OBJ = _gpgme.GPG_ERR_UNSUPPORTED_CMS_OBJ

GPG_ERR_UNSUPPORTED_ENCODING = _gpgme.GPG_ERR_UNSUPPORTED_ENCODING

GPG_ERR_UNSUPPORTED_CMS_VERSION = _gpgme.GPG_ERR_UNSUPPORTED_CMS_VERSION

GPG_ERR_UNKNOWN_ALGORITHM = _gpgme.GPG_ERR_UNKNOWN_ALGORITHM

GPG_ERR_INV_ENGINE = _gpgme.GPG_ERR_INV_ENGINE

GPG_ERR_PUBKEY_NOT_TRUSTED = _gpgme.GPG_ERR_PUBKEY_NOT_TRUSTED

GPG_ERR_DECRYPT_FAILED = _gpgme.GPG_ERR_DECRYPT_FAILED

GPG_ERR_KEY_EXPIRED = _gpgme.GPG_ERR_KEY_EXPIRED

GPG_ERR_SIG_EXPIRED = _gpgme.GPG_ERR_SIG_EXPIRED

GPG_ERR_ENCODING_PROBLEM = _gpgme.GPG_ERR_ENCODING_PROBLEM

GPG_ERR_INV_STATE = _gpgme.GPG_ERR_INV_STATE

GPG_ERR_DUP_VALUE = _gpgme.GPG_ERR_DUP_VALUE

GPG_ERR_MISSING_ACTION = _gpgme.GPG_ERR_MISSING_ACTION

GPG_ERR_MODULE_NOT_FOUND = _gpgme.GPG_ERR_MODULE_NOT_FOUND

GPG_ERR_INV_OID_STRING = _gpgme.GPG_ERR_INV_OID_STRING

GPG_ERR_INV_TIME = _gpgme.GPG_ERR_INV_TIME

GPG_ERR_INV_CRL_OBJ = _gpgme.GPG_ERR_INV_CRL_OBJ

GPG_ERR_UNSUPPORTED_CRL_VERSION = _gpgme.GPG_ERR_UNSUPPORTED_CRL_VERSION

GPG_ERR_INV_CERT_OBJ = _gpgme.GPG_ERR_INV_CERT_OBJ

GPG_ERR_UNKNOWN_NAME = _gpgme.GPG_ERR_UNKNOWN_NAME

GPG_ERR_LOCALE_PROBLEM = _gpgme.GPG_ERR_LOCALE_PROBLEM

GPG_ERR_NOT_LOCKED = _gpgme.GPG_ERR_NOT_LOCKED

GPG_ERR_PROTOCOL_VIOLATION = _gpgme.GPG_ERR_PROTOCOL_VIOLATION

GPG_ERR_INV_MAC = _gpgme.GPG_ERR_INV_MAC

GPG_ERR_INV_REQUEST = _gpgme.GPG_ERR_INV_REQUEST

GPG_ERR_UNKNOWN_EXTN = _gpgme.GPG_ERR_UNKNOWN_EXTN

GPG_ERR_UNKNOWN_CRIT_EXTN = _gpgme.GPG_ERR_UNKNOWN_CRIT_EXTN

GPG_ERR_LOCKED = _gpgme.GPG_ERR_LOCKED

GPG_ERR_UNKNOWN_OPTION = _gpgme.GPG_ERR_UNKNOWN_OPTION

GPG_ERR_UNKNOWN_COMMAND = _gpgme.GPG_ERR_UNKNOWN_COMMAND

GPG_ERR_NOT_OPERATIONAL = _gpgme.GPG_ERR_NOT_OPERATIONAL

GPG_ERR_NO_PASSPHRASE = _gpgme.GPG_ERR_NO_PASSPHRASE

GPG_ERR_NO_PIN = _gpgme.GPG_ERR_NO_PIN

GPG_ERR_NOT_ENABLED = _gpgme.GPG_ERR_NOT_ENABLED

GPG_ERR_NO_ENGINE = _gpgme.GPG_ERR_NO_ENGINE

GPG_ERR_MISSING_KEY = _gpgme.GPG_ERR_MISSING_KEY

GPG_ERR_TOO_MANY = _gpgme.GPG_ERR_TOO_MANY

GPG_ERR_LIMIT_REACHED = _gpgme.GPG_ERR_LIMIT_REACHED

GPG_ERR_NOT_INITIALIZED = _gpgme.GPG_ERR_NOT_INITIALIZED

GPG_ERR_MISSING_ISSUER_CERT = _gpgme.GPG_ERR_MISSING_ISSUER_CERT

GPG_ERR_NO_KEYSERVER = _gpgme.GPG_ERR_NO_KEYSERVER

GPG_ERR_INV_CURVE = _gpgme.GPG_ERR_INV_CURVE

GPG_ERR_UNKNOWN_CURVE = _gpgme.GPG_ERR_UNKNOWN_CURVE

GPG_ERR_DUP_KEY = _gpgme.GPG_ERR_DUP_KEY

GPG_ERR_AMBIGUOUS = _gpgme.GPG_ERR_AMBIGUOUS

GPG_ERR_NO_CRYPT_CTX = _gpgme.GPG_ERR_NO_CRYPT_CTX

GPG_ERR_WRONG_CRYPT_CTX = _gpgme.GPG_ERR_WRONG_CRYPT_CTX

GPG_ERR_BAD_CRYPT_CTX = _gpgme.GPG_ERR_BAD_CRYPT_CTX

GPG_ERR_CRYPT_CTX_CONFLICT = _gpgme.GPG_ERR_CRYPT_CTX_CONFLICT

GPG_ERR_BROKEN_PUBKEY = _gpgme.GPG_ERR_BROKEN_PUBKEY

GPG_ERR_BROKEN_SECKEY = _gpgme.GPG_ERR_BROKEN_SECKEY

GPG_ERR_MAC_ALGO = _gpgme.GPG_ERR_MAC_ALGO

GPG_ERR_FULLY_CANCELED = _gpgme.GPG_ERR_FULLY_CANCELED

GPG_ERR_UNFINISHED = _gpgme.GPG_ERR_UNFINISHED

GPG_ERR_BUFFER_TOO_SHORT = _gpgme.GPG_ERR_BUFFER_TOO_SHORT

GPG_ERR_SEXP_INV_LEN_SPEC = _gpgme.GPG_ERR_SEXP_INV_LEN_SPEC

GPG_ERR_SEXP_STRING_TOO_LONG = _gpgme.GPG_ERR_SEXP_STRING_TOO_LONG

GPG_ERR_SEXP_UNMATCHED_PAREN = _gpgme.GPG_ERR_SEXP_UNMATCHED_PAREN

GPG_ERR_SEXP_NOT_CANONICAL = _gpgme.GPG_ERR_SEXP_NOT_CANONICAL

GPG_ERR_SEXP_BAD_CHARACTER = _gpgme.GPG_ERR_SEXP_BAD_CHARACTER

GPG_ERR_SEXP_BAD_QUOTATION = _gpgme.GPG_ERR_SEXP_BAD_QUOTATION

GPG_ERR_SEXP_ZERO_PREFIX = _gpgme.GPG_ERR_SEXP_ZERO_PREFIX

GPG_ERR_SEXP_NESTED_DH = _gpgme.GPG_ERR_SEXP_NESTED_DH

GPG_ERR_SEXP_UNMATCHED_DH = _gpgme.GPG_ERR_SEXP_UNMATCHED_DH

GPG_ERR_SEXP_UNEXPECTED_PUNC = _gpgme.GPG_ERR_SEXP_UNEXPECTED_PUNC

GPG_ERR_SEXP_BAD_HEX_CHAR = _gpgme.GPG_ERR_SEXP_BAD_HEX_CHAR

GPG_ERR_SEXP_ODD_HEX_NUMBERS = _gpgme.GPG_ERR_SEXP_ODD_HEX_NUMBERS

GPG_ERR_SEXP_BAD_OCT_CHAR = _gpgme.GPG_ERR_SEXP_BAD_OCT_CHAR

GPG_ERR_SUBKEYS_EXP_OR_REV = _gpgme.GPG_ERR_SUBKEYS_EXP_OR_REV

GPG_ERR_DB_CORRUPTED = _gpgme.GPG_ERR_DB_CORRUPTED

GPG_ERR_SERVER_FAILED = _gpgme.GPG_ERR_SERVER_FAILED

GPG_ERR_NO_NAME = _gpgme.GPG_ERR_NO_NAME

GPG_ERR_NO_KEY = _gpgme.GPG_ERR_NO_KEY

GPG_ERR_LEGACY_KEY = _gpgme.GPG_ERR_LEGACY_KEY

GPG_ERR_REQUEST_TOO_SHORT = _gpgme.GPG_ERR_REQUEST_TOO_SHORT

GPG_ERR_REQUEST_TOO_LONG = _gpgme.GPG_ERR_REQUEST_TOO_LONG

GPG_ERR_OBJ_TERM_STATE = _gpgme.GPG_ERR_OBJ_TERM_STATE

GPG_ERR_NO_CERT_CHAIN = _gpgme.GPG_ERR_NO_CERT_CHAIN

GPG_ERR_CERT_TOO_LARGE = _gpgme.GPG_ERR_CERT_TOO_LARGE

GPG_ERR_INV_RECORD = _gpgme.GPG_ERR_INV_RECORD

GPG_ERR_BAD_MAC = _gpgme.GPG_ERR_BAD_MAC

GPG_ERR_UNEXPECTED_MSG = _gpgme.GPG_ERR_UNEXPECTED_MSG

GPG_ERR_COMPR_FAILED = _gpgme.GPG_ERR_COMPR_FAILED

GPG_ERR_WOULD_WRAP = _gpgme.GPG_ERR_WOULD_WRAP

GPG_ERR_FATAL_ALERT = _gpgme.GPG_ERR_FATAL_ALERT

GPG_ERR_NO_CIPHER = _gpgme.GPG_ERR_NO_CIPHER

GPG_ERR_MISSING_CLIENT_CERT = _gpgme.GPG_ERR_MISSING_CLIENT_CERT

GPG_ERR_CLOSE_NOTIFY = _gpgme.GPG_ERR_CLOSE_NOTIFY

GPG_ERR_TICKET_EXPIRED = _gpgme.GPG_ERR_TICKET_EXPIRED

GPG_ERR_BAD_TICKET = _gpgme.GPG_ERR_BAD_TICKET

GPG_ERR_UNKNOWN_IDENTITY = _gpgme.GPG_ERR_UNKNOWN_IDENTITY

GPG_ERR_BAD_HS_CERT = _gpgme.GPG_ERR_BAD_HS_CERT

GPG_ERR_BAD_HS_CERT_REQ = _gpgme.GPG_ERR_BAD_HS_CERT_REQ

GPG_ERR_BAD_HS_CERT_VER = _gpgme.GPG_ERR_BAD_HS_CERT_VER

GPG_ERR_BAD_HS_CHANGE_CIPHER = _gpgme.GPG_ERR_BAD_HS_CHANGE_CIPHER

GPG_ERR_BAD_HS_CLIENT_HELLO = _gpgme.GPG_ERR_BAD_HS_CLIENT_HELLO

GPG_ERR_BAD_HS_SERVER_HELLO = _gpgme.GPG_ERR_BAD_HS_SERVER_HELLO

GPG_ERR_BAD_HS_SERVER_HELLO_DONE = _gpgme.GPG_ERR_BAD_HS_SERVER_HELLO_DONE

GPG_ERR_BAD_HS_FINISHED = _gpgme.GPG_ERR_BAD_HS_FINISHED

GPG_ERR_BAD_HS_SERVER_KEX = _gpgme.GPG_ERR_BAD_HS_SERVER_KEX

GPG_ERR_BAD_HS_CLIENT_KEX = _gpgme.GPG_ERR_BAD_HS_CLIENT_KEX

GPG_ERR_BOGUS_STRING = _gpgme.GPG_ERR_BOGUS_STRING

GPG_ERR_FORBIDDEN = _gpgme.GPG_ERR_FORBIDDEN

GPG_ERR_KEY_DISABLED = _gpgme.GPG_ERR_KEY_DISABLED

GPG_ERR_KEY_ON_CARD = _gpgme.GPG_ERR_KEY_ON_CARD

GPG_ERR_INV_LOCK_OBJ = _gpgme.GPG_ERR_INV_LOCK_OBJ

GPG_ERR_TRUE = _gpgme.GPG_ERR_TRUE

GPG_ERR_FALSE = _gpgme.GPG_ERR_FALSE

GPG_ERR_ASS_GENERAL = _gpgme.GPG_ERR_ASS_GENERAL

GPG_ERR_ASS_ACCEPT_FAILED = _gpgme.GPG_ERR_ASS_ACCEPT_FAILED

GPG_ERR_ASS_CONNECT_FAILED = _gpgme.GPG_ERR_ASS_CONNECT_FAILED

GPG_ERR_ASS_INV_RESPONSE = _gpgme.GPG_ERR_ASS_INV_RESPONSE

GPG_ERR_ASS_INV_VALUE = _gpgme.GPG_ERR_ASS_INV_VALUE

GPG_ERR_ASS_INCOMPLETE_LINE = _gpgme.GPG_ERR_ASS_INCOMPLETE_LINE

GPG_ERR_ASS_LINE_TOO_LONG = _gpgme.GPG_ERR_ASS_LINE_TOO_LONG

GPG_ERR_ASS_NESTED_COMMANDS = _gpgme.GPG_ERR_ASS_NESTED_COMMANDS

GPG_ERR_ASS_NO_DATA_CB = _gpgme.GPG_ERR_ASS_NO_DATA_CB

GPG_ERR_ASS_NO_INQUIRE_CB = _gpgme.GPG_ERR_ASS_NO_INQUIRE_CB

GPG_ERR_ASS_NOT_A_SERVER = _gpgme.GPG_ERR_ASS_NOT_A_SERVER

GPG_ERR_ASS_NOT_A_CLIENT = _gpgme.GPG_ERR_ASS_NOT_A_CLIENT

GPG_ERR_ASS_SERVER_START = _gpgme.GPG_ERR_ASS_SERVER_START

GPG_ERR_ASS_READ_ERROR = _gpgme.GPG_ERR_ASS_READ_ERROR

GPG_ERR_ASS_WRITE_ERROR = _gpgme.GPG_ERR_ASS_WRITE_ERROR

GPG_ERR_ASS_TOO_MUCH_DATA = _gpgme.GPG_ERR_ASS_TOO_MUCH_DATA

GPG_ERR_ASS_UNEXPECTED_CMD = _gpgme.GPG_ERR_ASS_UNEXPECTED_CMD

GPG_ERR_ASS_UNKNOWN_CMD = _gpgme.GPG_ERR_ASS_UNKNOWN_CMD

GPG_ERR_ASS_SYNTAX = _gpgme.GPG_ERR_ASS_SYNTAX

GPG_ERR_ASS_CANCELED = _gpgme.GPG_ERR_ASS_CANCELED

GPG_ERR_ASS_NO_INPUT = _gpgme.GPG_ERR_ASS_NO_INPUT

GPG_ERR_ASS_NO_OUTPUT = _gpgme.GPG_ERR_ASS_NO_OUTPUT

GPG_ERR_ASS_PARAMETER = _gpgme.GPG_ERR_ASS_PARAMETER

GPG_ERR_ASS_UNKNOWN_INQUIRE = _gpgme.GPG_ERR_ASS_UNKNOWN_INQUIRE

GPG_ERR_ENGINE_TOO_OLD = _gpgme.GPG_ERR_ENGINE_TOO_OLD

GPG_ERR_WINDOW_TOO_SMALL = _gpgme.GPG_ERR_WINDOW_TOO_SMALL

GPG_ERR_WINDOW_TOO_LARGE = _gpgme.GPG_ERR_WINDOW_TOO_LARGE

GPG_ERR_MISSING_ENVVAR = _gpgme.GPG_ERR_MISSING_ENVVAR

GPG_ERR_USER_ID_EXISTS = _gpgme.GPG_ERR_USER_ID_EXISTS

GPG_ERR_NAME_EXISTS = _gpgme.GPG_ERR_NAME_EXISTS

GPG_ERR_DUP_NAME = _gpgme.GPG_ERR_DUP_NAME

GPG_ERR_TOO_YOUNG = _gpgme.GPG_ERR_TOO_YOUNG

GPG_ERR_TOO_OLD = _gpgme.GPG_ERR_TOO_OLD

GPG_ERR_UNKNOWN_FLAG = _gpgme.GPG_ERR_UNKNOWN_FLAG

GPG_ERR_INV_ORDER = _gpgme.GPG_ERR_INV_ORDER

GPG_ERR_ALREADY_FETCHED = _gpgme.GPG_ERR_ALREADY_FETCHED

GPG_ERR_TRY_LATER = _gpgme.GPG_ERR_TRY_LATER

GPG_ERR_WRONG_NAME = _gpgme.GPG_ERR_WRONG_NAME

GPG_ERR_NO_AUTH = _gpgme.GPG_ERR_NO_AUTH

GPG_ERR_BAD_AUTH = _gpgme.GPG_ERR_BAD_AUTH

GPG_ERR_NO_KEYBOXD = _gpgme.GPG_ERR_NO_KEYBOXD

GPG_ERR_KEYBOXD = _gpgme.GPG_ERR_KEYBOXD

GPG_ERR_NO_SERVICE = _gpgme.GPG_ERR_NO_SERVICE

GPG_ERR_SERVICE = _gpgme.GPG_ERR_SERVICE

GPG_ERR_SYSTEM_BUG = _gpgme.GPG_ERR_SYSTEM_BUG

GPG_ERR_DNS_UNKNOWN = _gpgme.GPG_ERR_DNS_UNKNOWN

GPG_ERR_DNS_SECTION = _gpgme.GPG_ERR_DNS_SECTION

GPG_ERR_DNS_ADDRESS = _gpgme.GPG_ERR_DNS_ADDRESS

GPG_ERR_DNS_NO_QUERY = _gpgme.GPG_ERR_DNS_NO_QUERY

GPG_ERR_DNS_NO_ANSWER = _gpgme.GPG_ERR_DNS_NO_ANSWER

GPG_ERR_DNS_CLOSED = _gpgme.GPG_ERR_DNS_CLOSED

GPG_ERR_DNS_VERIFY = _gpgme.GPG_ERR_DNS_VERIFY

GPG_ERR_DNS_TIMEOUT = _gpgme.GPG_ERR_DNS_TIMEOUT

GPG_ERR_LDAP_GENERAL = _gpgme.GPG_ERR_LDAP_GENERAL

GPG_ERR_LDAP_ATTR_GENERAL = _gpgme.GPG_ERR_LDAP_ATTR_GENERAL

GPG_ERR_LDAP_NAME_GENERAL = _gpgme.GPG_ERR_LDAP_NAME_GENERAL

GPG_ERR_LDAP_SECURITY_GENERAL = _gpgme.GPG_ERR_LDAP_SECURITY_GENERAL

GPG_ERR_LDAP_SERVICE_GENERAL = _gpgme.GPG_ERR_LDAP_SERVICE_GENERAL

GPG_ERR_LDAP_UPDATE_GENERAL = _gpgme.GPG_ERR_LDAP_UPDATE_GENERAL

GPG_ERR_LDAP_E_GENERAL = _gpgme.GPG_ERR_LDAP_E_GENERAL

GPG_ERR_LDAP_X_GENERAL = _gpgme.GPG_ERR_LDAP_X_GENERAL

GPG_ERR_LDAP_OTHER_GENERAL = _gpgme.GPG_ERR_LDAP_OTHER_GENERAL

GPG_ERR_LDAP_X_CONNECTING = _gpgme.GPG_ERR_LDAP_X_CONNECTING

GPG_ERR_LDAP_REFERRAL_LIMIT = _gpgme.GPG_ERR_LDAP_REFERRAL_LIMIT

GPG_ERR_LDAP_CLIENT_LOOP = _gpgme.GPG_ERR_LDAP_CLIENT_LOOP

GPG_ERR_LDAP_NO_RESULTS = _gpgme.GPG_ERR_LDAP_NO_RESULTS

GPG_ERR_LDAP_CONTROL_NOT_FOUND = _gpgme.GPG_ERR_LDAP_CONTROL_NOT_FOUND

GPG_ERR_LDAP_NOT_SUPPORTED = _gpgme.GPG_ERR_LDAP_NOT_SUPPORTED

GPG_ERR_LDAP_CONNECT = _gpgme.GPG_ERR_LDAP_CONNECT

GPG_ERR_LDAP_NO_MEMORY = _gpgme.GPG_ERR_LDAP_NO_MEMORY

GPG_ERR_LDAP_PARAM = _gpgme.GPG_ERR_LDAP_PARAM

GPG_ERR_LDAP_USER_CANCELLED = _gpgme.GPG_ERR_LDAP_USER_CANCELLED

GPG_ERR_LDAP_FILTER = _gpgme.GPG_ERR_LDAP_FILTER

GPG_ERR_LDAP_AUTH_UNKNOWN = _gpgme.GPG_ERR_LDAP_AUTH_UNKNOWN

GPG_ERR_LDAP_TIMEOUT = _gpgme.GPG_ERR_LDAP_TIMEOUT

GPG_ERR_LDAP_DECODING = _gpgme.GPG_ERR_LDAP_DECODING

GPG_ERR_LDAP_ENCODING = _gpgme.GPG_ERR_LDAP_ENCODING

GPG_ERR_LDAP_LOCAL = _gpgme.GPG_ERR_LDAP_LOCAL

GPG_ERR_LDAP_SERVER_DOWN = _gpgme.GPG_ERR_LDAP_SERVER_DOWN

GPG_ERR_LDAP_SUCCESS = _gpgme.GPG_ERR_LDAP_SUCCESS

GPG_ERR_LDAP_OPERATIONS = _gpgme.GPG_ERR_LDAP_OPERATIONS

GPG_ERR_LDAP_PROTOCOL = _gpgme.GPG_ERR_LDAP_PROTOCOL

GPG_ERR_LDAP_TIMELIMIT = _gpgme.GPG_ERR_LDAP_TIMELIMIT

GPG_ERR_LDAP_SIZELIMIT = _gpgme.GPG_ERR_LDAP_SIZELIMIT

GPG_ERR_LDAP_COMPARE_FALSE = _gpgme.GPG_ERR_LDAP_COMPARE_FALSE

GPG_ERR_LDAP_COMPARE_TRUE = _gpgme.GPG_ERR_LDAP_COMPARE_TRUE

GPG_ERR_LDAP_UNSUPPORTED_AUTH = _gpgme.GPG_ERR_LDAP_UNSUPPORTED_AUTH

GPG_ERR_LDAP_STRONG_AUTH_RQRD = _gpgme.GPG_ERR_LDAP_STRONG_AUTH_RQRD

GPG_ERR_LDAP_PARTIAL_RESULTS = _gpgme.GPG_ERR_LDAP_PARTIAL_RESULTS

GPG_ERR_LDAP_REFERRAL = _gpgme.GPG_ERR_LDAP_REFERRAL

GPG_ERR_LDAP_ADMINLIMIT = _gpgme.GPG_ERR_LDAP_ADMINLIMIT

GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN = _gpgme.GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN

GPG_ERR_LDAP_CONFIDENT_RQRD = _gpgme.GPG_ERR_LDAP_CONFIDENT_RQRD

GPG_ERR_LDAP_SASL_BIND_INPROG = _gpgme.GPG_ERR_LDAP_SASL_BIND_INPROG

GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE = _gpgme.GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE

GPG_ERR_LDAP_UNDEFINED_TYPE = _gpgme.GPG_ERR_LDAP_UNDEFINED_TYPE

GPG_ERR_LDAP_BAD_MATCHING = _gpgme.GPG_ERR_LDAP_BAD_MATCHING

GPG_ERR_LDAP_CONST_VIOLATION = _gpgme.GPG_ERR_LDAP_CONST_VIOLATION

GPG_ERR_LDAP_TYPE_VALUE_EXISTS = _gpgme.GPG_ERR_LDAP_TYPE_VALUE_EXISTS

GPG_ERR_LDAP_INV_SYNTAX = _gpgme.GPG_ERR_LDAP_INV_SYNTAX

GPG_ERR_LDAP_NO_SUCH_OBJ = _gpgme.GPG_ERR_LDAP_NO_SUCH_OBJ

GPG_ERR_LDAP_ALIAS_PROBLEM = _gpgme.GPG_ERR_LDAP_ALIAS_PROBLEM

GPG_ERR_LDAP_INV_DN_SYNTAX = _gpgme.GPG_ERR_LDAP_INV_DN_SYNTAX

GPG_ERR_LDAP_IS_LEAF = _gpgme.GPG_ERR_LDAP_IS_LEAF

GPG_ERR_LDAP_ALIAS_DEREF = _gpgme.GPG_ERR_LDAP_ALIAS_DEREF

GPG_ERR_LDAP_X_PROXY_AUTH_FAIL = _gpgme.GPG_ERR_LDAP_X_PROXY_AUTH_FAIL

GPG_ERR_LDAP_BAD_AUTH = _gpgme.GPG_ERR_LDAP_BAD_AUTH

GPG_ERR_LDAP_INV_CREDENTIALS = _gpgme.GPG_ERR_LDAP_INV_CREDENTIALS

GPG_ERR_LDAP_INSUFFICIENT_ACC = _gpgme.GPG_ERR_LDAP_INSUFFICIENT_ACC

GPG_ERR_LDAP_BUSY = _gpgme.GPG_ERR_LDAP_BUSY

GPG_ERR_LDAP_UNAVAILABLE = _gpgme.GPG_ERR_LDAP_UNAVAILABLE

GPG_ERR_LDAP_UNWILL_TO_PERFORM = _gpgme.GPG_ERR_LDAP_UNWILL_TO_PERFORM

GPG_ERR_LDAP_LOOP_DETECT = _gpgme.GPG_ERR_LDAP_LOOP_DETECT

GPG_ERR_LDAP_NAMING_VIOLATION = _gpgme.GPG_ERR_LDAP_NAMING_VIOLATION

GPG_ERR_LDAP_OBJ_CLS_VIOLATION = _gpgme.GPG_ERR_LDAP_OBJ_CLS_VIOLATION

GPG_ERR_LDAP_NOT_ALLOW_NONLEAF = _gpgme.GPG_ERR_LDAP_NOT_ALLOW_NONLEAF

GPG_ERR_LDAP_NOT_ALLOW_ON_RDN = _gpgme.GPG_ERR_LDAP_NOT_ALLOW_ON_RDN

GPG_ERR_LDAP_ALREADY_EXISTS = _gpgme.GPG_ERR_LDAP_ALREADY_EXISTS

GPG_ERR_LDAP_NO_OBJ_CLASS_MODS = _gpgme.GPG_ERR_LDAP_NO_OBJ_CLASS_MODS

GPG_ERR_LDAP_RESULTS_TOO_LARGE = _gpgme.GPG_ERR_LDAP_RESULTS_TOO_LARGE

GPG_ERR_LDAP_AFFECTS_MULT_DSAS = _gpgme.GPG_ERR_LDAP_AFFECTS_MULT_DSAS

GPG_ERR_LDAP_VLV = _gpgme.GPG_ERR_LDAP_VLV

GPG_ERR_LDAP_OTHER = _gpgme.GPG_ERR_LDAP_OTHER

GPG_ERR_LDAP_CUP_RESOURCE_LIMIT = _gpgme.GPG_ERR_LDAP_CUP_RESOURCE_LIMIT

GPG_ERR_LDAP_CUP_SEC_VIOLATION = _gpgme.GPG_ERR_LDAP_CUP_SEC_VIOLATION

GPG_ERR_LDAP_CUP_INV_DATA = _gpgme.GPG_ERR_LDAP_CUP_INV_DATA

GPG_ERR_LDAP_CUP_UNSUP_SCHEME = _gpgme.GPG_ERR_LDAP_CUP_UNSUP_SCHEME

GPG_ERR_LDAP_CUP_RELOAD = _gpgme.GPG_ERR_LDAP_CUP_RELOAD

GPG_ERR_LDAP_CANCELLED = _gpgme.GPG_ERR_LDAP_CANCELLED

GPG_ERR_LDAP_NO_SUCH_OPERATION = _gpgme.GPG_ERR_LDAP_NO_SUCH_OPERATION

GPG_ERR_LDAP_TOO_LATE = _gpgme.GPG_ERR_LDAP_TOO_LATE

GPG_ERR_LDAP_CANNOT_CANCEL = _gpgme.GPG_ERR_LDAP_CANNOT_CANCEL

GPG_ERR_LDAP_ASSERTION_FAILED = _gpgme.GPG_ERR_LDAP_ASSERTION_FAILED

GPG_ERR_LDAP_PROX_AUTH_DENIED = _gpgme.GPG_ERR_LDAP_PROX_AUTH_DENIED

GPG_ERR_USER_1 = _gpgme.GPG_ERR_USER_1

GPG_ERR_USER_2 = _gpgme.GPG_ERR_USER_2

GPG_ERR_USER_3 = _gpgme.GPG_ERR_USER_3

GPG_ERR_USER_4 = _gpgme.GPG_ERR_USER_4

GPG_ERR_USER_5 = _gpgme.GPG_ERR_USER_5

GPG_ERR_USER_6 = _gpgme.GPG_ERR_USER_6

GPG_ERR_USER_7 = _gpgme.GPG_ERR_USER_7

GPG_ERR_USER_8 = _gpgme.GPG_ERR_USER_8

GPG_ERR_USER_9 = _gpgme.GPG_ERR_USER_9

GPG_ERR_USER_10 = _gpgme.GPG_ERR_USER_10

GPG_ERR_USER_11 = _gpgme.GPG_ERR_USER_11

GPG_ERR_USER_12 = _gpgme.GPG_ERR_USER_12

GPG_ERR_USER_13 = _gpgme.GPG_ERR_USER_13

GPG_ERR_USER_14 = _gpgme.GPG_ERR_USER_14

GPG_ERR_USER_15 = _gpgme.GPG_ERR_USER_15

GPG_ERR_USER_16 = _gpgme.GPG_ERR_USER_16

GPG_ERR_SQL_OK = _gpgme.GPG_ERR_SQL_OK

GPG_ERR_SQL_ERROR = _gpgme.GPG_ERR_SQL_ERROR

GPG_ERR_SQL_INTERNAL = _gpgme.GPG_ERR_SQL_INTERNAL

GPG_ERR_SQL_PERM = _gpgme.GPG_ERR_SQL_PERM

GPG_ERR_SQL_ABORT = _gpgme.GPG_ERR_SQL_ABORT

GPG_ERR_SQL_BUSY = _gpgme.GPG_ERR_SQL_BUSY

GPG_ERR_SQL_LOCKED = _gpgme.GPG_ERR_SQL_LOCKED

GPG_ERR_SQL_NOMEM = _gpgme.GPG_ERR_SQL_NOMEM

GPG_ERR_SQL_READONLY = _gpgme.GPG_ERR_SQL_READONLY

GPG_ERR_SQL_INTERRUPT = _gpgme.GPG_ERR_SQL_INTERRUPT

GPG_ERR_SQL_IOERR = _gpgme.GPG_ERR_SQL_IOERR

GPG_ERR_SQL_CORRUPT = _gpgme.GPG_ERR_SQL_CORRUPT

GPG_ERR_SQL_NOTFOUND = _gpgme.GPG_ERR_SQL_NOTFOUND

GPG_ERR_SQL_FULL = _gpgme.GPG_ERR_SQL_FULL

GPG_ERR_SQL_CANTOPEN = _gpgme.GPG_ERR_SQL_CANTOPEN

GPG_ERR_SQL_PROTOCOL = _gpgme.GPG_ERR_SQL_PROTOCOL

GPG_ERR_SQL_EMPTY = _gpgme.GPG_ERR_SQL_EMPTY

GPG_ERR_SQL_SCHEMA = _gpgme.GPG_ERR_SQL_SCHEMA

GPG_ERR_SQL_TOOBIG = _gpgme.GPG_ERR_SQL_TOOBIG

GPG_ERR_SQL_CONSTRAINT = _gpgme.GPG_ERR_SQL_CONSTRAINT

GPG_ERR_SQL_MISMATCH = _gpgme.GPG_ERR_SQL_MISMATCH

GPG_ERR_SQL_MISUSE = _gpgme.GPG_ERR_SQL_MISUSE

GPG_ERR_SQL_NOLFS = _gpgme.GPG_ERR_SQL_NOLFS

GPG_ERR_SQL_AUTH = _gpgme.GPG_ERR_SQL_AUTH

GPG_ERR_SQL_FORMAT = _gpgme.GPG_ERR_SQL_FORMAT

GPG_ERR_SQL_RANGE = _gpgme.GPG_ERR_SQL_RANGE

GPG_ERR_SQL_NOTADB = _gpgme.GPG_ERR_SQL_NOTADB

GPG_ERR_SQL_NOTICE = _gpgme.GPG_ERR_SQL_NOTICE

GPG_ERR_SQL_WARNING = _gpgme.GPG_ERR_SQL_WARNING

GPG_ERR_SQL_ROW = _gpgme.GPG_ERR_SQL_ROW

GPG_ERR_SQL_DONE = _gpgme.GPG_ERR_SQL_DONE

GPG_ERR_MISSING_ERRNO = _gpgme.GPG_ERR_MISSING_ERRNO

GPG_ERR_UNKNOWN_ERRNO = _gpgme.GPG_ERR_UNKNOWN_ERRNO

GPG_ERR_EOF = _gpgme.GPG_ERR_EOF

GPG_ERR_E2BIG = _gpgme.GPG_ERR_E2BIG

GPG_ERR_EACCES = _gpgme.GPG_ERR_EACCES

GPG_ERR_EADDRINUSE = _gpgme.GPG_ERR_EADDRINUSE

GPG_ERR_EADDRNOTAVAIL = _gpgme.GPG_ERR_EADDRNOTAVAIL

GPG_ERR_EADV = _gpgme.GPG_ERR_EADV

GPG_ERR_EAFNOSUPPORT = _gpgme.GPG_ERR_EAFNOSUPPORT

GPG_ERR_EAGAIN = _gpgme.GPG_ERR_EAGAIN

GPG_ERR_EALREADY = _gpgme.GPG_ERR_EALREADY

GPG_ERR_EAUTH = _gpgme.GPG_ERR_EAUTH

GPG_ERR_EBACKGROUND = _gpgme.GPG_ERR_EBACKGROUND

GPG_ERR_EBADE = _gpgme.GPG_ERR_EBADE

GPG_ERR_EBADF = _gpgme.GPG_ERR_EBADF

GPG_ERR_EBADFD = _gpgme.GPG_ERR_EBADFD

GPG_ERR_EBADMSG = _gpgme.GPG_ERR_EBADMSG

GPG_ERR_EBADR = _gpgme.GPG_ERR_EBADR

GPG_ERR_EBADRPC = _gpgme.GPG_ERR_EBADRPC

GPG_ERR_EBADRQC = _gpgme.GPG_ERR_EBADRQC

GPG_ERR_EBADSLT = _gpgme.GPG_ERR_EBADSLT

GPG_ERR_EBFONT = _gpgme.GPG_ERR_EBFONT

GPG_ERR_EBUSY = _gpgme.GPG_ERR_EBUSY

GPG_ERR_ECANCELED = _gpgme.GPG_ERR_ECANCELED

GPG_ERR_ECHILD = _gpgme.GPG_ERR_ECHILD

GPG_ERR_ECHRNG = _gpgme.GPG_ERR_ECHRNG

GPG_ERR_ECOMM = _gpgme.GPG_ERR_ECOMM

GPG_ERR_ECONNABORTED = _gpgme.GPG_ERR_ECONNABORTED

GPG_ERR_ECONNREFUSED = _gpgme.GPG_ERR_ECONNREFUSED

GPG_ERR_ECONNRESET = _gpgme.GPG_ERR_ECONNRESET

GPG_ERR_ED = _gpgme.GPG_ERR_ED

GPG_ERR_EDEADLK = _gpgme.GPG_ERR_EDEADLK

GPG_ERR_EDEADLOCK = _gpgme.GPG_ERR_EDEADLOCK

GPG_ERR_EDESTADDRREQ = _gpgme.GPG_ERR_EDESTADDRREQ

GPG_ERR_EDIED = _gpgme.GPG_ERR_EDIED

GPG_ERR_EDOM = _gpgme.GPG_ERR_EDOM

GPG_ERR_EDOTDOT = _gpgme.GPG_ERR_EDOTDOT

GPG_ERR_EDQUOT = _gpgme.GPG_ERR_EDQUOT

GPG_ERR_EEXIST = _gpgme.GPG_ERR_EEXIST

GPG_ERR_EFAULT = _gpgme.GPG_ERR_EFAULT

GPG_ERR_EFBIG = _gpgme.GPG_ERR_EFBIG

GPG_ERR_EFTYPE = _gpgme.GPG_ERR_EFTYPE

GPG_ERR_EGRATUITOUS = _gpgme.GPG_ERR_EGRATUITOUS

GPG_ERR_EGREGIOUS = _gpgme.GPG_ERR_EGREGIOUS

GPG_ERR_EHOSTDOWN = _gpgme.GPG_ERR_EHOSTDOWN

GPG_ERR_EHOSTUNREACH = _gpgme.GPG_ERR_EHOSTUNREACH

GPG_ERR_EIDRM = _gpgme.GPG_ERR_EIDRM

GPG_ERR_EIEIO = _gpgme.GPG_ERR_EIEIO

GPG_ERR_EILSEQ = _gpgme.GPG_ERR_EILSEQ

GPG_ERR_EINPROGRESS = _gpgme.GPG_ERR_EINPROGRESS

GPG_ERR_EINTR = _gpgme.GPG_ERR_EINTR

GPG_ERR_EINVAL = _gpgme.GPG_ERR_EINVAL

GPG_ERR_EIO = _gpgme.GPG_ERR_EIO

GPG_ERR_EISCONN = _gpgme.GPG_ERR_EISCONN

GPG_ERR_EISDIR = _gpgme.GPG_ERR_EISDIR

GPG_ERR_EISNAM = _gpgme.GPG_ERR_EISNAM

GPG_ERR_EL2HLT = _gpgme.GPG_ERR_EL2HLT

GPG_ERR_EL2NSYNC = _gpgme.GPG_ERR_EL2NSYNC

GPG_ERR_EL3HLT = _gpgme.GPG_ERR_EL3HLT

GPG_ERR_EL3RST = _gpgme.GPG_ERR_EL3RST

GPG_ERR_ELIBACC = _gpgme.GPG_ERR_ELIBACC

GPG_ERR_ELIBBAD = _gpgme.GPG_ERR_ELIBBAD

GPG_ERR_ELIBEXEC = _gpgme.GPG_ERR_ELIBEXEC

GPG_ERR_ELIBMAX = _gpgme.GPG_ERR_ELIBMAX

GPG_ERR_ELIBSCN = _gpgme.GPG_ERR_ELIBSCN

GPG_ERR_ELNRNG = _gpgme.GPG_ERR_ELNRNG

GPG_ERR_ELOOP = _gpgme.GPG_ERR_ELOOP

GPG_ERR_EMEDIUMTYPE = _gpgme.GPG_ERR_EMEDIUMTYPE

GPG_ERR_EMFILE = _gpgme.GPG_ERR_EMFILE

GPG_ERR_EMLINK = _gpgme.GPG_ERR_EMLINK

GPG_ERR_EMSGSIZE = _gpgme.GPG_ERR_EMSGSIZE

GPG_ERR_EMULTIHOP = _gpgme.GPG_ERR_EMULTIHOP

GPG_ERR_ENAMETOOLONG = _gpgme.GPG_ERR_ENAMETOOLONG

GPG_ERR_ENAVAIL = _gpgme.GPG_ERR_ENAVAIL

GPG_ERR_ENEEDAUTH = _gpgme.GPG_ERR_ENEEDAUTH

GPG_ERR_ENETDOWN = _gpgme.GPG_ERR_ENETDOWN

GPG_ERR_ENETRESET = _gpgme.GPG_ERR_ENETRESET

GPG_ERR_ENETUNREACH = _gpgme.GPG_ERR_ENETUNREACH

GPG_ERR_ENFILE = _gpgme.GPG_ERR_ENFILE

GPG_ERR_ENOANO = _gpgme.GPG_ERR_ENOANO

GPG_ERR_ENOBUFS = _gpgme.GPG_ERR_ENOBUFS

GPG_ERR_ENOCSI = _gpgme.GPG_ERR_ENOCSI

GPG_ERR_ENODATA = _gpgme.GPG_ERR_ENODATA

GPG_ERR_ENODEV = _gpgme.GPG_ERR_ENODEV

GPG_ERR_ENOENT = _gpgme.GPG_ERR_ENOENT

GPG_ERR_ENOEXEC = _gpgme.GPG_ERR_ENOEXEC

GPG_ERR_ENOLCK = _gpgme.GPG_ERR_ENOLCK

GPG_ERR_ENOLINK = _gpgme.GPG_ERR_ENOLINK

GPG_ERR_ENOMEDIUM = _gpgme.GPG_ERR_ENOMEDIUM

GPG_ERR_ENOMEM = _gpgme.GPG_ERR_ENOMEM

GPG_ERR_ENOMSG = _gpgme.GPG_ERR_ENOMSG

GPG_ERR_ENONET = _gpgme.GPG_ERR_ENONET

GPG_ERR_ENOPKG = _gpgme.GPG_ERR_ENOPKG

GPG_ERR_ENOPROTOOPT = _gpgme.GPG_ERR_ENOPROTOOPT

GPG_ERR_ENOSPC = _gpgme.GPG_ERR_ENOSPC

GPG_ERR_ENOSR = _gpgme.GPG_ERR_ENOSR

GPG_ERR_ENOSTR = _gpgme.GPG_ERR_ENOSTR

GPG_ERR_ENOSYS = _gpgme.GPG_ERR_ENOSYS

GPG_ERR_ENOTBLK = _gpgme.GPG_ERR_ENOTBLK

GPG_ERR_ENOTCONN = _gpgme.GPG_ERR_ENOTCONN

GPG_ERR_ENOTDIR = _gpgme.GPG_ERR_ENOTDIR

GPG_ERR_ENOTEMPTY = _gpgme.GPG_ERR_ENOTEMPTY

GPG_ERR_ENOTNAM = _gpgme.GPG_ERR_ENOTNAM

GPG_ERR_ENOTSOCK = _gpgme.GPG_ERR_ENOTSOCK

GPG_ERR_ENOTSUP = _gpgme.GPG_ERR_ENOTSUP

GPG_ERR_ENOTTY = _gpgme.GPG_ERR_ENOTTY

GPG_ERR_ENOTUNIQ = _gpgme.GPG_ERR_ENOTUNIQ

GPG_ERR_ENXIO = _gpgme.GPG_ERR_ENXIO

GPG_ERR_EOPNOTSUPP = _gpgme.GPG_ERR_EOPNOTSUPP

GPG_ERR_EOVERFLOW = _gpgme.GPG_ERR_EOVERFLOW

GPG_ERR_EPERM = _gpgme.GPG_ERR_EPERM

GPG_ERR_EPFNOSUPPORT = _gpgme.GPG_ERR_EPFNOSUPPORT

GPG_ERR_EPIPE = _gpgme.GPG_ERR_EPIPE

GPG_ERR_EPROCLIM = _gpgme.GPG_ERR_EPROCLIM

GPG_ERR_EPROCUNAVAIL = _gpgme.GPG_ERR_EPROCUNAVAIL

GPG_ERR_EPROGMISMATCH = _gpgme.GPG_ERR_EPROGMISMATCH

GPG_ERR_EPROGUNAVAIL = _gpgme.GPG_ERR_EPROGUNAVAIL

GPG_ERR_EPROTO = _gpgme.GPG_ERR_EPROTO

GPG_ERR_EPROTONOSUPPORT = _gpgme.GPG_ERR_EPROTONOSUPPORT

GPG_ERR_EPROTOTYPE = _gpgme.GPG_ERR_EPROTOTYPE

GPG_ERR_ERANGE = _gpgme.GPG_ERR_ERANGE

GPG_ERR_EREMCHG = _gpgme.GPG_ERR_EREMCHG

GPG_ERR_EREMOTE = _gpgme.GPG_ERR_EREMOTE

GPG_ERR_EREMOTEIO = _gpgme.GPG_ERR_EREMOTEIO

GPG_ERR_ERESTART = _gpgme.GPG_ERR_ERESTART

GPG_ERR_EROFS = _gpgme.GPG_ERR_EROFS

GPG_ERR_ERPCMISMATCH = _gpgme.GPG_ERR_ERPCMISMATCH

GPG_ERR_ESHUTDOWN = _gpgme.GPG_ERR_ESHUTDOWN

GPG_ERR_ESOCKTNOSUPPORT = _gpgme.GPG_ERR_ESOCKTNOSUPPORT

GPG_ERR_ESPIPE = _gpgme.GPG_ERR_ESPIPE

GPG_ERR_ESRCH = _gpgme.GPG_ERR_ESRCH

GPG_ERR_ESRMNT = _gpgme.GPG_ERR_ESRMNT

GPG_ERR_ESTALE = _gpgme.GPG_ERR_ESTALE

GPG_ERR_ESTRPIPE = _gpgme.GPG_ERR_ESTRPIPE

GPG_ERR_ETIME = _gpgme.GPG_ERR_ETIME

GPG_ERR_ETIMEDOUT = _gpgme.GPG_ERR_ETIMEDOUT

GPG_ERR_ETOOMANYREFS = _gpgme.GPG_ERR_ETOOMANYREFS

GPG_ERR_ETXTBSY = _gpgme.GPG_ERR_ETXTBSY

GPG_ERR_EUCLEAN = _gpgme.GPG_ERR_EUCLEAN

GPG_ERR_EUNATCH = _gpgme.GPG_ERR_EUNATCH

GPG_ERR_EUSERS = _gpgme.GPG_ERR_EUSERS

GPG_ERR_EWOULDBLOCK = _gpgme.GPG_ERR_EWOULDBLOCK

GPG_ERR_EXDEV = _gpgme.GPG_ERR_EXDEV

GPG_ERR_EXFULL = _gpgme.GPG_ERR_EXFULL

GPG_ERR_CODE_DIM = _gpgme.GPG_ERR_CODE_DIM


def new_gpgme_ctx_t_p() -> "gpgme_ctx_t *":
    r"""new_gpgme_ctx_t_p() -> gpgme_ctx_t *"""
    return _gpgme.new_gpgme_ctx_t_p()

def copy_gpgme_ctx_t_p(value: "gpgme_ctx_t") -> "gpgme_ctx_t *":
    r"""copy_gpgme_ctx_t_p(value) -> gpgme_ctx_t *"""
    return _gpgme.copy_gpgme_ctx_t_p(value)

def delete_gpgme_ctx_t_p(obj: "gpgme_ctx_t *") -> "void":
    r"""delete_gpgme_ctx_t_p(obj)"""
    return _gpgme.delete_gpgme_ctx_t_p(obj)

def gpgme_ctx_t_p_assign(obj: "gpgme_ctx_t *", value: "gpgme_ctx_t") -> "void":
    r"""gpgme_ctx_t_p_assign(obj, value)"""
    return _gpgme.gpgme_ctx_t_p_assign(obj, value)

def gpgme_ctx_t_p_value(obj: "gpgme_ctx_t *") -> "gpgme_ctx_t":
    r"""gpgme_ctx_t_p_value(obj) -> gpgme_ctx_t"""
    return _gpgme.gpgme_ctx_t_p_value(obj)

def new_gpgme_data_t_p() -> "gpgme_data_t *":
    r"""new_gpgme_data_t_p() -> gpgme_data_t *"""
    return _gpgme.new_gpgme_data_t_p()

def copy_gpgme_data_t_p(value: "gpgme_data_t") -> "gpgme_data_t *":
    r"""copy_gpgme_data_t_p(value) -> gpgme_data_t *"""
    return _gpgme.copy_gpgme_data_t_p(value)

def delete_gpgme_data_t_p(obj: "gpgme_data_t *") -> "void":
    r"""delete_gpgme_data_t_p(obj)"""
    return _gpgme.delete_gpgme_data_t_p(obj)

def gpgme_data_t_p_assign(obj: "gpgme_data_t *", value: "gpgme_data_t") -> "void":
    r"""gpgme_data_t_p_assign(obj, value)"""
    return _gpgme.gpgme_data_t_p_assign(obj, value)

def gpgme_data_t_p_value(obj: "gpgme_data_t *") -> "gpgme_data_t":
    r"""gpgme_data_t_p_value(obj) -> gpgme_data_t"""
    return _gpgme.gpgme_data_t_p_value(obj)

def new_gpgme_key_t_p() -> "gpgme_key_t *":
    r"""new_gpgme_key_t_p() -> gpgme_key_t *"""
    return _gpgme.new_gpgme_key_t_p()

def copy_gpgme_key_t_p(value: "_gpgme_key") -> "gpgme_key_t *":
    r"""copy_gpgme_key_t_p(value) -> gpgme_key_t *"""
    return _gpgme.copy_gpgme_key_t_p(value)

def delete_gpgme_key_t_p(obj: "gpgme_key_t *") -> "void":
    r"""delete_gpgme_key_t_p(obj)"""
    return _gpgme.delete_gpgme_key_t_p(obj)

def gpgme_key_t_p_assign(obj: "gpgme_key_t *", value: "_gpgme_key") -> "void":
    r"""gpgme_key_t_p_assign(obj, value)"""
    return _gpgme.gpgme_key_t_p_assign(obj, value)

def gpgme_key_t_p_value(obj: "gpgme_key_t *") -> "gpgme_key_t":
    r"""gpgme_key_t_p_value(obj) -> _gpgme_key"""
    return _gpgme.gpgme_key_t_p_value(obj)

def new_gpgme_error_t_p() -> "gpgme_error_t *":
    r"""new_gpgme_error_t_p() -> gpgme_error_t *"""
    return _gpgme.new_gpgme_error_t_p()

def copy_gpgme_error_t_p(value: "gpgme_error_t") -> "gpgme_error_t *":
    r"""copy_gpgme_error_t_p(value) -> gpgme_error_t *"""
    return _gpgme.copy_gpgme_error_t_p(value)

def delete_gpgme_error_t_p(obj: "gpgme_error_t *") -> "void":
    r"""delete_gpgme_error_t_p(obj)"""
    return _gpgme.delete_gpgme_error_t_p(obj)

def gpgme_error_t_p_assign(obj: "gpgme_error_t *", value: "gpgme_error_t") -> "void":
    r"""gpgme_error_t_p_assign(obj, value)"""
    return _gpgme.gpgme_error_t_p_assign(obj, value)

def gpgme_error_t_p_value(obj: "gpgme_error_t *") -> "gpgme_error_t":
    r"""gpgme_error_t_p_value(obj) -> gpgme_error_t"""
    return _gpgme.gpgme_error_t_p_value(obj)

def new_gpgme_trust_item_t_p() -> "gpgme_trust_item_t *":
    r"""new_gpgme_trust_item_t_p() -> gpgme_trust_item_t *"""
    return _gpgme.new_gpgme_trust_item_t_p()

def copy_gpgme_trust_item_t_p(value: "_gpgme_trust_item") -> "gpgme_trust_item_t *":
    r"""copy_gpgme_trust_item_t_p(value) -> gpgme_trust_item_t *"""
    return _gpgme.copy_gpgme_trust_item_t_p(value)

def delete_gpgme_trust_item_t_p(obj: "gpgme_trust_item_t *") -> "void":
    r"""delete_gpgme_trust_item_t_p(obj)"""
    return _gpgme.delete_gpgme_trust_item_t_p(obj)

def gpgme_trust_item_t_p_assign(obj: "gpgme_trust_item_t *", value: "_gpgme_trust_item") -> "void":
    r"""gpgme_trust_item_t_p_assign(obj, value)"""
    return _gpgme.gpgme_trust_item_t_p_assign(obj, value)

def gpgme_trust_item_t_p_value(obj: "gpgme_trust_item_t *") -> "gpgme_trust_item_t":
    r"""gpgme_trust_item_t_p_value(obj) -> _gpgme_trust_item"""
    return _gpgme.gpgme_trust_item_t_p_value(obj)

def new_gpgme_engine_info_t_p() -> "gpgme_engine_info_t *":
    r"""new_gpgme_engine_info_t_p() -> gpgme_engine_info_t *"""
    return _gpgme.new_gpgme_engine_info_t_p()

def copy_gpgme_engine_info_t_p(value: "_gpgme_engine_info") -> "gpgme_engine_info_t *":
    r"""copy_gpgme_engine_info_t_p(value) -> gpgme_engine_info_t *"""
    return _gpgme.copy_gpgme_engine_info_t_p(value)

def delete_gpgme_engine_info_t_p(obj: "gpgme_engine_info_t *") -> "void":
    r"""delete_gpgme_engine_info_t_p(obj)"""
    return _gpgme.delete_gpgme_engine_info_t_p(obj)

def gpgme_engine_info_t_p_assign(obj: "gpgme_engine_info_t *", value: "_gpgme_engine_info") -> "void":
    r"""gpgme_engine_info_t_p_assign(obj, value)"""
    return _gpgme.gpgme_engine_info_t_p_assign(obj, value)

def gpgme_engine_info_t_p_value(obj: "gpgme_engine_info_t *") -> "gpgme_engine_info_t":
    r"""gpgme_engine_info_t_p_value(obj) -> _gpgme_engine_info"""
    return _gpgme.gpgme_engine_info_t_p_value(obj)

def fdopen(fildes: "int", mode: "char const *") -> "FILE *":
    r"""fdopen(fildes, mode) -> FILE *"""
    return _gpgme.fdopen(fildes, mode)

def gpg_raise_callback_exception(_self: "PyObject *") -> "PyObject *":
    r"""gpg_raise_callback_exception(_self) -> PyObject *"""
    return _gpgme.gpg_raise_callback_exception(_self)

def gpg_set_passphrase_cb(_self: "PyObject *", cb: "PyObject *") -> "PyObject *":
    r"""gpg_set_passphrase_cb(_self, cb) -> PyObject *"""
    return _gpgme.gpg_set_passphrase_cb(_self, cb)

def gpg_set_progress_cb(_self: "PyObject *", cb: "PyObject *") -> "PyObject *":
    r"""gpg_set_progress_cb(_self, cb) -> PyObject *"""
    return _gpgme.gpg_set_progress_cb(_self, cb)

def gpg_set_status_cb(_self: "PyObject *", cb: "PyObject *") -> "PyObject *":
    r"""gpg_set_status_cb(_self, cb) -> PyObject *"""
    return _gpgme.gpg_set_status_cb(_self, cb)

def gpg_data_new_from_cbs(_self: "PyObject *", pycbs: "PyObject *", r_data: "gpgme_data_t *") -> "PyObject *":
    r"""gpg_data_new_from_cbs(_self, pycbs, r_data) -> PyObject *"""
    return _gpgme.gpg_data_new_from_cbs(_self, pycbs, r_data)

cvar = _gpgme.cvar

