# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _common_types
else:
    import _common_types

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common_types.delete_SwigPyIterator

    def value(self):
        return _common_types.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _common_types.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _common_types.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _common_types.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _common_types.SwigPyIterator_equal(self, x)

    def copy(self):
        return _common_types.SwigPyIterator_copy(self)

    def next(self):
        return _common_types.SwigPyIterator_next(self)

    def __next__(self):
        return _common_types.SwigPyIterator___next__(self)

    def previous(self):
        return _common_types.SwigPyIterator_previous(self)

    def advance(self, n):
        return _common_types.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _common_types.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _common_types.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _common_types.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _common_types.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _common_types.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _common_types.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _common_types:
_common_types.SwigPyIterator_swigregister(SwigPyIterator)

class SetString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.SetString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.SetString___nonzero__(self)

    def __bool__(self):
        return _common_types.SetString___bool__(self)

    def __len__(self):
        return _common_types.SetString___len__(self)

    def append(self, x):
        return _common_types.SetString_append(self, x)

    def __contains__(self, x):
        return _common_types.SetString___contains__(self, x)

    def __getitem__(self, i):
        return _common_types.SetString___getitem__(self, i)

    def add(self, x):
        return _common_types.SetString_add(self, x)

    def discard(self, x):
        return _common_types.SetString_discard(self, x)

    def __init__(self, *args):
        _common_types.SetString_swiginit(self, _common_types.new_SetString(*args))

    def empty(self):
        return _common_types.SetString_empty(self)

    def size(self):
        return _common_types.SetString_size(self)

    def clear(self):
        return _common_types.SetString_clear(self)

    def swap(self, v):
        return _common_types.SetString_swap(self, v)

    def count(self, x):
        return _common_types.SetString_count(self, x)

    def begin(self):
        return _common_types.SetString_begin(self)

    def end(self):
        return _common_types.SetString_end(self)

    def rbegin(self):
        return _common_types.SetString_rbegin(self)

    def rend(self):
        return _common_types.SetString_rend(self)

    def erase(self, *args):
        return _common_types.SetString_erase(self, *args)

    def find(self, x):
        return _common_types.SetString_find(self, x)

    def lower_bound(self, x):
        return _common_types.SetString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.SetString_upper_bound(self, x)

    def equal_range(self, x):
        return _common_types.SetString_equal_range(self, x)

    def insert(self, __x):
        return _common_types.SetString_insert(self, __x)
    __swig_destroy__ = _common_types.delete_SetString

# Register SetString in _common_types:
_common_types.SetString_swigregister(SetString)

class PairStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _common_types.PairStringString_swiginit(self, _common_types.new_PairStringString(*args))
    first = property(_common_types.PairStringString_first_get, _common_types.PairStringString_first_set)
    second = property(_common_types.PairStringString_second_get, _common_types.PairStringString_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _common_types.delete_PairStringString

# Register PairStringString in _common_types:
_common_types.PairStringString_swigregister(PairStringString)

class VectorPairStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.VectorPairStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.VectorPairStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.VectorPairStringString___bool__(self)

    def __len__(self):
        return _common_types.VectorPairStringString___len__(self)

    def __getslice__(self, i, j):
        return _common_types.VectorPairStringString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _common_types.VectorPairStringString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _common_types.VectorPairStringString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _common_types.VectorPairStringString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _common_types.VectorPairStringString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _common_types.VectorPairStringString___setitem__(self, *args)

    def pop(self):
        return _common_types.VectorPairStringString_pop(self)

    def append(self, x):
        return _common_types.VectorPairStringString_append(self, x)

    def empty(self):
        return _common_types.VectorPairStringString_empty(self)

    def size(self):
        return _common_types.VectorPairStringString_size(self)

    def swap(self, v):
        return _common_types.VectorPairStringString_swap(self, v)

    def begin(self):
        return _common_types.VectorPairStringString_begin(self)

    def end(self):
        return _common_types.VectorPairStringString_end(self)

    def rbegin(self):
        return _common_types.VectorPairStringString_rbegin(self)

    def rend(self):
        return _common_types.VectorPairStringString_rend(self)

    def clear(self):
        return _common_types.VectorPairStringString_clear(self)

    def get_allocator(self):
        return _common_types.VectorPairStringString_get_allocator(self)

    def pop_back(self):
        return _common_types.VectorPairStringString_pop_back(self)

    def erase(self, *args):
        return _common_types.VectorPairStringString_erase(self, *args)

    def __init__(self, *args):
        _common_types.VectorPairStringString_swiginit(self, _common_types.new_VectorPairStringString(*args))

    def push_back(self, x):
        return _common_types.VectorPairStringString_push_back(self, x)

    def front(self):
        return _common_types.VectorPairStringString_front(self)

    def back(self):
        return _common_types.VectorPairStringString_back(self)

    def assign(self, n, x):
        return _common_types.VectorPairStringString_assign(self, n, x)

    def resize(self, *args):
        return _common_types.VectorPairStringString_resize(self, *args)

    def insert(self, *args):
        return _common_types.VectorPairStringString_insert(self, *args)

    def reserve(self, n):
        return _common_types.VectorPairStringString_reserve(self, n)

    def capacity(self):
        return _common_types.VectorPairStringString_capacity(self)
    __swig_destroy__ = _common_types.delete_VectorPairStringString

# Register VectorPairStringString in _common_types:
_common_types.VectorPairStringString_swigregister(VectorPairStringString)

class MapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringString_keys(self)

    def values(self):
        return _common_types.MapStringString_values(self)

    def items(self):
        return _common_types.MapStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringString_asdict(self)

    def __init__(self, *args):
        _common_types.MapStringString_swiginit(self, _common_types.new_MapStringString(*args))

    def empty(self):
        return _common_types.MapStringString_empty(self)

    def size(self):
        return _common_types.MapStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringString_begin(self)

    def end(self):
        return _common_types.MapStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringString_rend(self)

    def clear(self):
        return _common_types.MapStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringString

# Register MapStringString in _common_types:
_common_types.MapStringString_swigregister(MapStringString)

class MapStringMapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringMapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringMapStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringMapStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringMapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringMapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringMapStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringMapStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringMapStringString_keys(self)

    def values(self):
        return _common_types.MapStringMapStringString_values(self)

    def items(self):
        return _common_types.MapStringMapStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringMapStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringMapStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringMapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringMapStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringMapStringString_asdict(self)

    def __init__(self, *args):
        _common_types.MapStringMapStringString_swiginit(self, _common_types.new_MapStringMapStringString(*args))

    def empty(self):
        return _common_types.MapStringMapStringString_empty(self)

    def size(self):
        return _common_types.MapStringMapStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringMapStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringMapStringString_begin(self)

    def end(self):
        return _common_types.MapStringMapStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringMapStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringMapStringString_rend(self)

    def clear(self):
        return _common_types.MapStringMapStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringMapStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringMapStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringMapStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringMapStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringMapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringMapStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringMapStringString

# Register MapStringMapStringString in _common_types:
_common_types.MapStringMapStringString_swigregister(MapStringMapStringString)

class MapStringPairStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _common_types.MapStringPairStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _common_types.MapStringPairStringString___nonzero__(self)

    def __bool__(self):
        return _common_types.MapStringPairStringString___bool__(self)

    def __len__(self):
        return _common_types.MapStringPairStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _common_types.MapStringPairStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _common_types.MapStringPairStringString___delitem__(self, key)

    def has_key(self, key):
        return _common_types.MapStringPairStringString_has_key(self, key)

    def keys(self):
        return _common_types.MapStringPairStringString_keys(self)

    def values(self):
        return _common_types.MapStringPairStringString_values(self)

    def items(self):
        return _common_types.MapStringPairStringString_items(self)

    def __contains__(self, key):
        return _common_types.MapStringPairStringString___contains__(self, key)

    def key_iterator(self):
        return _common_types.MapStringPairStringString_key_iterator(self)

    def value_iterator(self):
        return _common_types.MapStringPairStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _common_types.MapStringPairStringString___setitem__(self, *args)

    def asdict(self):
        return _common_types.MapStringPairStringString_asdict(self)

    def __init__(self, *args):
        _common_types.MapStringPairStringString_swiginit(self, _common_types.new_MapStringPairStringString(*args))

    def empty(self):
        return _common_types.MapStringPairStringString_empty(self)

    def size(self):
        return _common_types.MapStringPairStringString_size(self)

    def swap(self, v):
        return _common_types.MapStringPairStringString_swap(self, v)

    def begin(self):
        return _common_types.MapStringPairStringString_begin(self)

    def end(self):
        return _common_types.MapStringPairStringString_end(self)

    def rbegin(self):
        return _common_types.MapStringPairStringString_rbegin(self)

    def rend(self):
        return _common_types.MapStringPairStringString_rend(self)

    def clear(self):
        return _common_types.MapStringPairStringString_clear(self)

    def get_allocator(self):
        return _common_types.MapStringPairStringString_get_allocator(self)

    def count(self, x):
        return _common_types.MapStringPairStringString_count(self, x)

    def erase(self, *args):
        return _common_types.MapStringPairStringString_erase(self, *args)

    def find(self, x):
        return _common_types.MapStringPairStringString_find(self, x)

    def lower_bound(self, x):
        return _common_types.MapStringPairStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _common_types.MapStringPairStringString_upper_bound(self, x)
    __swig_destroy__ = _common_types.delete_MapStringPairStringString

# Register MapStringPairStringString in _common_types:
_common_types.MapStringPairStringString_swigregister(MapStringPairStringString)

class StopIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _common_types.StopIterator_swiginit(self, _common_types.new_StopIterator())
    __swig_destroy__ = _common_types.delete_StopIterator

# Register StopIterator in _common_types:
_common_types.StopIterator_swigregister(StopIterator)

class PreserveOrderMapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def empty(self):
        return _common_types.PreserveOrderMapStringString_empty(self)

    def size(self):
        return _common_types.PreserveOrderMapStringString_size(self)

    def max_size(self):
        return _common_types.PreserveOrderMapStringString_max_size(self)

    def reserve(self, newCapacity):
        return _common_types.PreserveOrderMapStringString_reserve(self, newCapacity)

    def capacity(self):
        return _common_types.PreserveOrderMapStringString_capacity(self)

    def shrink_to_fit(self):
        return _common_types.PreserveOrderMapStringString_shrink_to_fit(self)

    def clear(self):
        return _common_types.PreserveOrderMapStringString_clear(self)

    def erase(self, key):
        return _common_types.PreserveOrderMapStringString_erase(self, key)

    def __getitem__(self, key):
        return _common_types.PreserveOrderMapStringString___getitem__(self, key)

    def __setitem__(self, key, value):
        return _common_types.PreserveOrderMapStringString___setitem__(self, key, value)

    def __delitem__(self, key):
        return _common_types.PreserveOrderMapStringString___delitem__(self, key)

    def __contains__(self, key):
        return _common_types.PreserveOrderMapStringString___contains__(self, key)

    def __len__(self):
        return _common_types.PreserveOrderMapStringString___len__(self)

    def __iter__(self):
        return _common_types.PreserveOrderMapStringString___iter__(self)

    def __init__(self):
        _common_types.PreserveOrderMapStringString_swiginit(self, _common_types.new_PreserveOrderMapStringString())
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringString

# Register PreserveOrderMapStringString in _common_types:
_common_types.PreserveOrderMapStringString_swigregister(PreserveOrderMapStringString)

class PreserveOrderMapStringStringIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _common_types.PreserveOrderMapStringStringIterator_swiginit(self, _common_types.new_PreserveOrderMapStringStringIterator(_cur, _end))

    def __iter__(self):
        return _common_types.PreserveOrderMapStringStringIterator___iter__(self)
    cur = property(_common_types.PreserveOrderMapStringStringIterator_cur_get, _common_types.PreserveOrderMapStringStringIterator_cur_set)
    end = property(_common_types.PreserveOrderMapStringStringIterator_end_get, _common_types.PreserveOrderMapStringStringIterator_end_set)

    def __next__(self):
        return _common_types.PreserveOrderMapStringStringIterator___next__(self)

    def next(self):
        return _common_types.PreserveOrderMapStringStringIterator_next(self)
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringStringIterator

# Register PreserveOrderMapStringStringIterator in _common_types:
_common_types.PreserveOrderMapStringStringIterator_swigregister(PreserveOrderMapStringStringIterator)

class PreserveOrderMapStringPreserveOrderMapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def empty(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_empty(self)

    def size(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_size(self)

    def max_size(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_max_size(self)

    def reserve(self, newCapacity):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_reserve(self, newCapacity)

    def capacity(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_capacity(self)

    def shrink_to_fit(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_shrink_to_fit(self)

    def clear(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_clear(self)

    def erase(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString_erase(self, key)

    def __getitem__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___getitem__(self, key)

    def __setitem__(self, key, value):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___setitem__(self, key, value)

    def __delitem__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___delitem__(self, key)

    def __contains__(self, key):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___contains__(self, key)

    def __len__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___len__(self)

    def __iter__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringString___iter__(self)

    def __init__(self):
        _common_types.PreserveOrderMapStringPreserveOrderMapStringString_swiginit(self, _common_types.new_PreserveOrderMapStringPreserveOrderMapStringString())
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringPreserveOrderMapStringString

# Register PreserveOrderMapStringPreserveOrderMapStringString in _common_types:
_common_types.PreserveOrderMapStringPreserveOrderMapStringString_swigregister(PreserveOrderMapStringPreserveOrderMapStringString)

class PreserveOrderMapStringPreserveOrderMapStringStringIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_swiginit(self, _common_types.new_PreserveOrderMapStringPreserveOrderMapStringStringIterator(_cur, _end))

    def __iter__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator___iter__(self)
    cur = property(_common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_get, _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_cur_set)
    end = property(_common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_get, _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_end_set)

    def __next__(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator___next__(self)

    def next(self):
        return _common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_next(self)
    __swig_destroy__ = _common_types.delete_PreserveOrderMapStringPreserveOrderMapStringStringIterator

# Register PreserveOrderMapStringPreserveOrderMapStringStringIterator in _common_types:
_common_types.PreserveOrderMapStringPreserveOrderMapStringStringIterator_swigregister(PreserveOrderMapStringPreserveOrderMapStringStringIterator)



